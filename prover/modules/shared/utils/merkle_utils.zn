//! GENERATED CODE. DO NOT EDIT
//! Edit it in prover/build.gradle.kts

//! Merkle tree construction for NodeDigestBits
fn get_merkle_tree_from_2_node_digests(leaves: [NodeDigestBits; 2]) -> NodeDigestBits {
    dbg!("Consuming 2 leaves");
    dbg!("0: {}", NodeDigestDto::from_bits_to_bytes(leaves[0]));
    dbg!("1: {}", NodeDigestDto::from_bits_to_bytes(leaves[1]));
    pedersen_to_padded_bits(
        pedersen(concatenate_node_digests(leaves[0], leaves[1])).0,
    )
}

fn get_merkle_tree_from_4_node_digests(leaves: [NodeDigestBits; 4]) -> NodeDigestBits {
    dbg!("Consuming 4 leaves");
    let mut new_leaves = [[false; NODE_DIGEST_BITS]; 2];
    for i in 0..2 {
        new_leaves[i] = pedersen_to_padded_bits(
            pedersen(concatenate_node_digests(leaves[2 * i], leaves[2 * i + 1])).0,
        );
        dbg!("{}: {}", 2 * i, NodeDigestDto::from_bits_to_bytes(leaves[2 * i]));
        dbg!("{}: {}", 2 * i + 1, NodeDigestDto::from_bits_to_bytes(leaves[2 * i + 1]));
        dbg!("Digest: {}", NodeDigestDto::from_bits_to_bytes(new_leaves[i]));
    }
    dbg!("");
    get_merkle_tree_from_2_node_digests(new_leaves)
}

fn get_merkle_tree_from_8_node_digests(leaves: [NodeDigestBits; 8]) -> NodeDigestBits {
    dbg!("Consuming 8 leaves");
    let mut new_leaves = [[false; NODE_DIGEST_BITS]; 4];
    for i in 0..4 {
        new_leaves[i] = pedersen_to_padded_bits(
            pedersen(concatenate_node_digests(leaves[2 * i], leaves[2 * i + 1])).0,
        );
        dbg!("{}: {}", 2 * i, NodeDigestDto::from_bits_to_bytes(leaves[2 * i]));
        dbg!("{}: {}", 2 * i + 1, NodeDigestDto::from_bits_to_bytes(leaves[2 * i + 1]));
        dbg!("Digest: {}", NodeDigestDto::from_bits_to_bytes(new_leaves[i]));
    }
    dbg!("");
    get_merkle_tree_from_4_node_digests(new_leaves)
}

fn get_merkle_tree_from_16_node_digests(leaves: [NodeDigestBits; 16]) -> NodeDigestBits {
    dbg!("Consuming 16 leaves");
    let mut new_leaves = [[false; NODE_DIGEST_BITS]; 8];
    for i in 0..8 {
        new_leaves[i] = pedersen_to_padded_bits(
            pedersen(concatenate_node_digests(leaves[2 * i], leaves[2 * i + 1])).0,
        );
        dbg!("{}: {}", 2 * i, NodeDigestDto::from_bits_to_bytes(leaves[2 * i]));
        dbg!("{}: {}", 2 * i + 1, NodeDigestDto::from_bits_to_bytes(leaves[2 * i + 1]));
        dbg!("Digest: {}", NodeDigestDto::from_bits_to_bytes(new_leaves[i]));
    }
    dbg!("");
    get_merkle_tree_from_8_node_digests(new_leaves)
}

//! Merkle tree construction for ComponentGroupLeafDigestBits.
//! Use it only for the computation of a component sub-Merkle tree from component group leaf hashes.
fn get_merkle_tree_from_2_component_group_leaf_digests(leaves: [ComponentGroupLeafDigestBits; 2]) -> NodeDigestBits {
    dbg!("Consuming 2 leaves");
    dbg!("0: {}", ComponentGroupLeafDigestDto::from_bits_to_bytes(leaves[0]));
    dbg!("1: {}", ComponentGroupLeafDigestDto::from_bits_to_bytes(leaves[1]));
    pedersen_to_padded_bits(
        pedersen(concatenate_component_group_leaf_digests(leaves[0], leaves[1])).0,
    )
}

fn get_merkle_tree_from_4_component_group_leaf_digests(leaves: [ComponentGroupLeafDigestBits; 4]) -> NodeDigestBits {
    dbg!("Consuming 4 leaves");
    let mut new_leaves = [[false; NODE_DIGEST_BITS]; 2];
    for i in 0..2 {
        new_leaves[i] = pedersen_to_padded_bits(
            pedersen(concatenate_component_group_leaf_digests(leaves[2 * i], leaves[2 * i + 1])).0,
        );
        dbg!("{}: {}", 2 * i, ComponentGroupLeafDigestDto::from_bits_to_bytes(leaves[2 * i]));
        dbg!("{}: {}", 2 * i + 1, ComponentGroupLeafDigestDto::from_bits_to_bytes(leaves[2 * i + 1]));
        dbg!("Digest: {}", ComponentGroupLeafDigestDto::from_bits_to_bytes(new_leaves[i]));
    }
    dbg!("");
    get_merkle_tree_from_2_node_digests(new_leaves)
}

fn get_merkle_tree_from_8_component_group_leaf_digests(leaves: [ComponentGroupLeafDigestBits; 8]) -> NodeDigestBits {
    dbg!("Consuming 8 leaves");
    let mut new_leaves = [[false; NODE_DIGEST_BITS]; 4];
    for i in 0..4 {
        new_leaves[i] = pedersen_to_padded_bits(
            pedersen(concatenate_component_group_leaf_digests(leaves[2 * i], leaves[2 * i + 1])).0,
        );
        dbg!("{}: {}", 2 * i, ComponentGroupLeafDigestDto::from_bits_to_bytes(leaves[2 * i]));
        dbg!("{}: {}", 2 * i + 1, ComponentGroupLeafDigestDto::from_bits_to_bytes(leaves[2 * i + 1]));
        dbg!("Digest: {}", ComponentGroupLeafDigestDto::from_bits_to_bytes(new_leaves[i]));
    }
    dbg!("");
    get_merkle_tree_from_4_node_digests(new_leaves)
}

fn get_merkle_tree_from_16_component_group_leaf_digests(leaves: [ComponentGroupLeafDigestBits; 16]) -> NodeDigestBits {
    dbg!("Consuming 16 leaves");
    let mut new_leaves = [[false; NODE_DIGEST_BITS]; 8];
    for i in 0..8 {
        new_leaves[i] = pedersen_to_padded_bits(
            pedersen(concatenate_component_group_leaf_digests(leaves[2 * i], leaves[2 * i + 1])).0,
        );
        dbg!("{}: {}", 2 * i, ComponentGroupLeafDigestDto::from_bits_to_bytes(leaves[2 * i]));
        dbg!("{}: {}", 2 * i + 1, ComponentGroupLeafDigestDto::from_bits_to_bytes(leaves[2 * i + 1]));
        dbg!("Digest: {}", ComponentGroupLeafDigestDto::from_bits_to_bytes(new_leaves[i]));
    }
    dbg!("");
    get_merkle_tree_from_8_node_digests(new_leaves)
}
