const MERKLE_TREE_SIZE : u16 = 8;

//! Top-level function to be called.
//! Pads the configure number of leaves to the right amount with zero hashes from the right
//! and calls appropriate tree-constructing procedure
fn merkle_root(leaves: [NodeDigestBits; COMPONENT_GROUPS_SIZE]) -> NodeDigestBits {
    dbg!("Building a tree from 8 leaves");

    //! No padding required
    //let mut full_leaves = [[false; NODE_DIGEST_BITS]; MERKLE_TREE_SIZE];
    //for i in 0..8 {
    //    full_leaves[i] = leaves[i];
    //}

    dbg!("Constructing the root");
    get_merkle_tree_from_8_node_digests(leaves)
}

fn build_merkle_tree(
    zk_prover_transaction: ZKProverTransaction,
) -> NodeDigestBits {

    //Fingerprint for privacy salt
    let privacy_salt = PrivacySalt::from_bytes_to_bits(zk_prover_transaction.privacy_salt);

    let mut component_group_hashes = [[false; NODE_DIGEST_BITS]; COMPONENT_GROUPS_SIZE];

    component_group_hashes[(ComponentGroupEnum::OUTPUTS_GROUP as u8) - 1] =
        OutputsComponentGroup::compute_component_group_hash(zk_prover_transaction.outputs, privacy_salt);
    component_group_hashes[(ComponentGroupEnum::COMMANDS_GROUP as u8) - 1] =
        CommandsComponentGroup::compute_component_group_hash(zk_prover_transaction.commands, privacy_salt);
    component_group_hashes[(ComponentGroupEnum::ATTACHMENTS_GROUP as u8) - 1] =
        AttachmentsComponentGroup::compute_component_group_hash(zk_prover_transaction.attachments, privacy_salt);
    component_group_hashes[(ComponentGroupEnum::NOTARY_GROUP as u8) - 1] =
        NotaryComponentGroup::compute_component_group_hash(zk_prover_transaction.notary, privacy_salt);
    component_group_hashes[(ComponentGroupEnum::TIMEWINDOW_GROUP as u8) - 1] =
        TimeWindowComponentGroup::compute_component_group_hash(zk_prover_transaction.time_window, privacy_salt);
    component_group_hashes[(ComponentGroupEnum::SIGNERS_GROUP as u8) - 1] =
        SignersComponentGroup::compute_component_group_hash(zk_prover_transaction.signers, privacy_salt);
    component_group_hashes[(ComponentGroupEnum::REFERENCES_GROUP as u8) - 1] =
        ReferencesComponentGroup::compute_component_group_hash(zk_prover_transaction.references, privacy_salt);
    component_group_hashes[(ComponentGroupEnum::PARAMETERS_GROUP as u8) - 1] =
        ParametersComponentGroup::compute_component_group_hash(zk_prover_transaction.parameters, privacy_salt);

    //compute merkle root
    merkle_root(component_group_hashes)
}
