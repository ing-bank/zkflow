type ComponentGroupLeafDigestBits = [bool; COMPONENT_GROUP_LEAF_DIGEST_BITS];
type ComponentGroupLeafDigestBytes = [u8; COMPONENT_GROUP_LEAF_DIGEST_BYTES];

struct ComponentGroupLeafDigest {
    bits : ComponentGroupLeafDigestBits,
}

impl ComponentGroupLeafDigest{
    // Method to concatenate two component leaf hash digests.
    fn concatenate(
        this: ComponentGroupLeafDigest,
        hash2: ComponentGroupLeafDigest,
    ) -> [bool; COMPONENT_GROUP_LEAF_DIGEST_BITS + COMPONENT_GROUP_LEAF_DIGEST_BITS] {
        let mut data = [false; COMPONENT_GROUP_LEAF_DIGEST_BITS + COMPONENT_GROUP_LEAF_DIGEST_BITS];

        for i in (0 as u16)..COMPONENT_GROUP_LEAF_DIGEST_BITS {
            data[i] = this.bits[i];
            data[COMPONENT_GROUP_LEAF_DIGEST_BITS + i] = hash2.bits[i];
        }
        data
    }

    fn to_bytes(this: ComponentGroupLeafDigest) -> ComponentGroupLeafDigestBytes {
        let mut bytes = [0 as u8; COMPONENT_GROUP_LEAF_DIGEST_BYTES];

        for i in 0..COMPONENT_GROUP_LEAF_DIGEST_BYTES {
            let mut byte_bits = [false; BYTE_BITS];
            for j in 0..BYTE_BITS {
                byte_bits[j] = this.bits[BYTE_BITS * i + j];
            }
            bytes[i] = from_bits_unsigned(byte_bits);
        }

        bytes
    }
}