type NodeDigestBits = [bool; NODE_DIGEST_BITS];
type NodeDigestBytes = [u8; NODE_DIGEST_BYTES];

struct NodeDigest {
    bytes : NodeDigestBytes,
}

impl NodeDigest {
    fn fingerprint(this: NodeDigest) -> NodeDigestBits {
        let mut fingerprint_bits = [false; NODE_DIGEST_BITS];

        for i in (0 as u16)..NODE_DIGEST_BYTES {
            let bits = to_bits(this.bytes[i]);
            for j in (0 as u16)..BYTE_BITS {
                fingerprint_bits[BYTE_BITS * i + j] = bits[j];
            }
        }
        fingerprint_bits
    }

    // Method to concatenate two component node hash digests.
    fn concatenate(
        hash1: NodeDigestBits,
        hash2: NodeDigestBits,
    ) -> [bool; NODE_DIGEST_BITS + NODE_DIGEST_BITS] {
        let mut data = [false; NODE_DIGEST_BITS + NODE_DIGEST_BITS];

        for i in (0 as u16)..NODE_DIGEST_BITS {
            data[i] = hash1[i];
            data[NODE_DIGEST_BITS + i] = hash2[i];
        }
        data
    }

    fn from_bits(this: NodeDigestBits) -> NodeDigest {
        let mut bytes = [0 as u8; NODE_DIGEST_BYTES];

        for i in 0..NODE_DIGEST_BYTES {
            let mut byte_bits = [false; BYTE_BITS];
            for j in 0..BYTE_BITS {
                byte_bits[j] = this[BYTE_BITS * i + j];
            }
            bytes[i] = from_bits_unsigned(byte_bits);
        }

        NodeDigest{bytes: bytes}
    }

}


