const MERKLE_TREE_SIZE : u16 = 16;

fn build_merkle_tree(
    zk_prover_transaction: ZKProverTransaction,
) -> HashDigestBits {

    //Fingerprint for privacy salt
    let privacy_salt = HashDigest::fingerprint(zk_prover_transaction.privacy_salt);

    let mut component_group_hashes = [[false; HASH_BITS]; COMPONENT_GROUP_SIZE];

    component_group_hashes[ComponentGroupEnum::INPUTS_GROUP] =
        InputsComponentGroup::compute_component_group_hash(zk_prover_transaction.inputs, privacy_salt);
    component_group_hashes[ComponentGroupEnum::OUTPUTS_GROUP] =
        OutputsComponentGroup::compute_component_group_hash(zk_prover_transaction.outputs, privacy_salt);
    component_group_hashes[ComponentGroupEnum::COMMANDS_GROUP] =
        CommandsComponentGroup::compute_component_group_hash(zk_prover_transaction.commands, privacy_salt);
    component_group_hashes[ComponentGroupEnum::ATTACHMENTS_GROUP] =
        AttachmentsComponentGroup::compute_component_group_hash(zk_prover_transaction.attachments, privacy_salt);
    component_group_hashes[ComponentGroupEnum::NOTARY_GROUP] =
        NotaryComponentGroup::compute_component_group_hash(zk_prover_transaction.notary, privacy_salt);
    component_group_hashes[ComponentGroupEnum::TIMEWINDOW_GROUP] =
        TimeWindowComponentGroup::compute_component_group_hash(zk_prover_transaction.time_window, privacy_salt);
    component_group_hashes[ComponentGroupEnum::SIGNERS_GROUP] =
        SignersComponentGroup::compute_component_group_hash(zk_prover_transaction.signers, privacy_salt);
    component_group_hashes[ComponentGroupEnum::REFERENCES_GROUP] =
        ReferencesComponentGroup::compute_component_group_hash(zk_prover_transaction.references, privacy_salt);
    component_group_hashes[ComponentGroupEnum::PARAMETERS_GROUP] =
        ParametersComponentGroup::compute_component_group_hash(zk_prover_transaction.parameters, privacy_salt);

    //Validate component group hashes
    //This function is currently disabled since witness file is all zeros.
    validate_group_hashes(component_group_hashes, zk_prover_transaction);

    // There are 9 component groups.
    // Pad it from the right with as many zero hashes to get a power of two number of leaves.
    // This is how Corda Merkle tree construction works.
    let mut component_leaves = [[false; HASH_BITS]; MERKLE_TREE_SIZE];
    for i in 0..COMPONENT_GROUP_SIZE {
        component_leaves[i] = component_group_hashes[i];
    }

    merkle_16_leaves(component_leaves)
}
