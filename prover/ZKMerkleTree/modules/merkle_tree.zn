const MERKLE_TREE_SIZE : u16 = 16;

fn build_merkle_tree(
    zk_prover_transaction: ZKProverTransaction,
) -> NodeDigestBits {

    //Fingerprint for privacy salt
    let privacy_salt = PrivacySalt::fingerprint(zk_prover_transaction.privacy_salt);

    let mut component_group_hashes = [[false; NODE_DIGEST_BITS]; COMPONENT_GROUPS_SIZE];

    component_group_hashes[ComponentGroupEnum::INPUTS_GROUP] =
        InputsComponentGroup::compute_component_group_hash(zk_prover_transaction.inputs, privacy_salt);
    component_group_hashes[ComponentGroupEnum::OUTPUTS_GROUP] =
        OutputsComponentGroup::compute_component_group_hash(zk_prover_transaction.outputs, privacy_salt);
    component_group_hashes[ComponentGroupEnum::COMMANDS_GROUP] =
        CommandsComponentGroup::compute_component_group_hash(zk_prover_transaction.commands, privacy_salt);
    component_group_hashes[ComponentGroupEnum::ATTACHMENTS_GROUP] =
        AttachmentsComponentGroup::compute_component_group_hash(zk_prover_transaction.attachments, privacy_salt);
    component_group_hashes[ComponentGroupEnum::NOTARY_GROUP] =
        NotaryComponentGroup::compute_component_group_hash(zk_prover_transaction.notary, privacy_salt);
    component_group_hashes[ComponentGroupEnum::TIMEWINDOW_GROUP] =
        TimeWindowComponentGroup::compute_component_group_hash(zk_prover_transaction.time_window, privacy_salt);
    component_group_hashes[ComponentGroupEnum::SIGNERS_GROUP] =
        SignersComponentGroup::compute_component_group_hash(zk_prover_transaction.signers, privacy_salt);
    component_group_hashes[ComponentGroupEnum::REFERENCES_GROUP] =
        ReferencesComponentGroup::compute_component_group_hash(zk_prover_transaction.references, privacy_salt);
    component_group_hashes[ComponentGroupEnum::PARAMETERS_GROUP] =
        ParametersComponentGroup::compute_component_group_hash(zk_prover_transaction.parameters, privacy_salt);

    //compute merkle root
    merkle_root(component_group_hashes)
}
