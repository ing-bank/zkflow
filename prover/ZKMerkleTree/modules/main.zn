struct PublicInput {
    transaction_id: NodeDigestDto,
    input_nonces: [HashDigest; INPUT_GROUP_SIZE],
    input_hashes: [HashDigest; INPUT_GROUP_SIZE],
    reference_nonces: [HashDigest; REFERENCE_GROUP_SIZE],
    reference_hashes: [HashDigest; REFERENCE_GROUP_SIZE],
}

// fn validate_b_preimage(preimage)

fn main(witness: Witness) -> PublicInput {
    // Check contract rules
    // TODO: disabled for now, so that the circuit can handle any command
    // check_contract_rules(witness.transaction);

    // Compute the transaction id
    let root_hash = build_merkle_tree(witness.transaction);

    // TODO: verify that for each input and reference, the recalculation of its hash,
    // using the nonce provided in the public input, matches the hash provided in the public input.
    // This proves that we did not change the contents of the inputs and references, compared to
    // the VerifierTransaction known by the verifier, of which they were an output.

    PublicInput {
        transaction_id: NodeDigestDto::from_bits_to_bytes(root_hash),
        input_nonces: [HashDigest; INPUT_GROUP_SIZE],
        input_hashes: [HashDigest; INPUT_GROUP_SIZE],
        reference_nonces: [HashDigest; REFERENCE_GROUP_SIZE],
        reference_hashes: [HashDigest; REFERENCE_GROUP_SIZE],
    }
}
