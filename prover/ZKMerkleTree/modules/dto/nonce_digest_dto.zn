///Struct NonceDigestDto is only used for input/output reading and writing purposes.
///In internal computations, the circuit only uses NonceDigestBits type.

const NONCE_DIGEST_BYTES: u16 = COMPONENT_GROUP_LEAF_DIGEST_BYTES;
const NONCE_DIGEST_BITS: u16  = COMPONENT_GROUP_LEAF_DIGEST_BITS;

type NonceDigestBytes = [u8; NONCE_DIGEST_BYTES];
type NonceDigestBits = [bool; NONCE_DIGEST_BITS];

struct NonceDigestDto {
    bytes : NonceDigestBytes,
}

impl NonceDigestDto {
    fn from_bytes_to_bits(this: NonceDigestDto) -> NonceDigestBits {
        let mut bits = [false; NONCE_DIGEST_BITS];

        for i in (0 as u16)..NONCE_DIGEST_BYTES {
            let byte_bits = to_bits(this.bytes[i]);
            for j in (0 as u16)..BYTE_BITS {
                bits[BYTE_BITS * i + j] = byte_bits[j];
            }
        }
        bits
    }

    fn from_bits_to_bytes(bits: NonceDigestBits) -> NonceDigestDto {
        let mut bytes = [0 as u8; NONCE_DIGEST_BYTES];

        for i in 0..NONCE_DIGEST_BYTES {
            let mut byte_bits = [false; BYTE_BITS];
            for j in 0..BYTE_BITS {
                byte_bits[j] = bits[BYTE_BITS * i + j];
            }
            bytes[i] = from_bits_unsigned(byte_bits);
        }
        NonceDigestDto{bytes: bytes}
    }

}