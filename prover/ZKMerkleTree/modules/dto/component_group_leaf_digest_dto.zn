///Struct ComponentGroupLeafDigestDto is only used for input/output reading and writing purposes.
///In internal computations, the circuit only uses ComponentGroupLeafDigestBits type.
///
type ComponentGroupLeafDigestBytes = [u8; COMPONENT_GROUP_LEAF_DIGEST_BYTES];
type ComponentGroupLeafDigestBits = [bool; COMPONENT_GROUP_LEAF_DIGEST_BITS];

struct ComponentGroupLeafDigestDto {
    bytes : ComponentGroupLeafDigestBytes,
}

impl ComponentGroupLeafDigestDto{
    fn from_bytes_to_bits(this: ComponentGroupLeafDigestDto) -> ComponentGroupLeafDigestBits {
        let mut bits = [false; COMPONENT_GROUP_LEAF_DIGEST_BITS];

        for i in (0 as u16)..COMPONENT_GROUP_LEAF_DIGEST_BYTES {
            let byte_bits = to_bits(this.bytes[i]);
            for j in (0 as u16)..BYTE_BITS {
                bits[BYTE_BITS * i + j] = byte_bits[j];
            }
        }
        bits
    }

    fn from_bits_to_bytes(bits: ComponentGroupLeafDigestBits) -> ComponentGroupLeafDigestDto {
        let mut bytes = [0 as u8; COMPONENT_GROUP_LEAF_DIGEST_BYTES];

        for i in 0..COMPONENT_GROUP_LEAF_DIGEST_BYTES {
            let mut byte_bits = [false; BYTE_BITS];
            for j in 0..BYTE_BITS {
                byte_bits[j] = bits[BYTE_BITS * i + j];
            }
            bytes[i] = from_bits_unsigned(byte_bits);
        }
        ComponentGroupLeafDigestDto{ bytes: bytes}
    }
}