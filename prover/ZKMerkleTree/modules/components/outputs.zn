const OUTPUT_GROUP_SIZE: u16 = 2;

struct OutputsComponentGroup {
    components: [ZKStateAndRefPaddingWrapper; OUTPUT_GROUP_SIZE],
    group_hash: NodeDigest,
}

impl OutputsComponentGroup {
    fn compute_leaf_hashes(
        this: OutputsComponentGroup,
        privacy_salt: PrivacySaltFingerprintBits,
    ) -> [ComponentGroupLeafDigest; OUTPUT_GROUP_SIZE] {
        let mut component_leaf_hashes = [ComponentGroupLeafDigest { bits: [false; COMPONENT_GROUP_LEAF_DIGEST_BITS] }; OUTPUT_GROUP_SIZE];

        for i in (0 as u32)..(OUTPUT_GROUP_SIZE as u32) {
            component_leaf_hashes[i] = ZKStateRef::compute_leaf_hash(
                this.components[i].content.reference,
                privacy_salt,
                ComponentGroupEnum::OUTPUTS_GROUP as u32,
                i as u32,
            );
        }
        component_leaf_hashes
    }

    fn compute_component_group_hash(
        this: OutputsComponentGroup,
        privacy_salt: PrivacySaltFingerprintBits,
    ) -> NodeDigestBits {
        let component_leaf_hashes = compute_leaf_hashes(this, privacy_salt);

        get_merkle_tree_from_2_component_group_leaf_digests(component_leaf_hashes)
    }
}
