const COMMAND_GROUP_SIZE: u16 = 1;
const COMMAND_BITS: u16 = U32_BITS;

type CommandBits = [bool; U32_BITS];

enum CommandData {
    CREATE = 0,
    MOVE = 1,
}
impl CommandData {
    fn fingerprint(this: CommandData) -> CommandBits {
        to_bits(this as u32)
    }

    fn compute_leaf_hash(
        this: CommandData,
        privacy_salt: PrivacySalt,
        group_index: u32,
        internal_index: u32,
    ) -> HashDigestBits {
        //fingerprint
        let fingerprint_command_data = fingerprint(this);

        //compute nonce
        let mut nonce = compute_nonce(privacy_salt, group_index, internal_index);
        let mut message: [bool; HASH_BITS + U32_BITS] = [false; HASH_BITS + U32_BITS];

        //message = nonce || command
        for i in 0..HASH_BITS {
            message[i] = nonce[i];
        }
        for i in 0..U32_BITS {
            message[HASH_BITS + i] = fingerprint_command_data[i];
        }

        blake2s(message)
    }
}

struct CommandPaddingWrapper {
    content: CommandData,
    is_filler: bool,
}

struct CommandsComponentGroup {
    components: [CommandPaddingWrapper; COMMAND_GROUP_SIZE],
    group_hash: HashDigest,
}

impl CommandsComponentGroup {
    fn compute_leaf_hashes(
        this: CommandsComponentGroup,
        privacy_salt: PrivacySalt,
    ) -> [HashDigestBits; COMMAND_GROUP_SIZE] {
        let mut component_leaf_hashes = [[false; HASH_BITS]; COMMAND_GROUP_SIZE];

        for i in (0 as u32)..(COMMAND_GROUP_SIZE as u32) {
            component_leaf_hashes[i] = CommandData::compute_leaf_hash(
                this.components[i].content,
                privacy_salt,
                ComponentGroupEnum::COMMANDS_GROUP as u32,
                i as u32,
            );
        }
        component_leaf_hashes
    }

    fn compute_component_group_hash(
        this: CommandsComponentGroup,
        privacy_salt: PrivacySalt,
    ) -> HashDigestBits {
        let component_leaf_hashes = compute_leaf_hashes(this, privacy_salt);

        //When the number of leaves is one, we pad the leaf with zeros from the right first
        //and use padded input in the merkle_root computation.
        let mut padded_leaves = [[false; HASH_BITS]; 2];
        padded_leaves[0] = component_leaf_hashes[0];

        merkle_2_leaves(padded_leaves)
    }
}
