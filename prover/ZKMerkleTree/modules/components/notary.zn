struct NotaryPaddingWrapper {
    content: Party,
    is_filler: bool,
}

struct NotaryComponentGroup {
    component: NotaryPaddingWrapper,
    group_hash: NodeDigestDto,
}

impl NotaryComponentGroup {
    fn compute_component_group_hash(
        this: NotaryComponentGroup,
        privacy_salt: PrivacySaltBits,
    ) -> NodeDigestBits {
        let component_leaf_hash = PubKey::compute_leaf_hash(
            this.component.content.owning_key,
            privacy_salt,
            ComponentGroupEnum::NOTARY_GROUP as u32,
            0 as u32,
        );

        //When the number of leaves is one, we pad the leaf with zeros from the right first
        //and use padded input in the merkle_root computation.
        let mut padded_leaves = [[false; COMPONENT_GROUP_LEAF_DIGEST_BITS]; 2];
        padded_leaves[0] = component_leaf_hash;

        get_merkle_tree_from_2_component_group_leaf_digests(padded_leaves)
    }
}
