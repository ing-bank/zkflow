struct NotaryPaddingWrapper {
    content: Party,
    is_filler: bool,
}

struct Notary {
    value: NotaryPaddingWrapper,
    group_hash: ComponentGroupHashBytes,
}

impl Notary {
    fn fingerprint_content(content: PubKey) -> [bool; PUBKEY_BITS] {
        convert_pub_key_to_bits(content)
    }

    fn compute_leaf_hashes(notary: Notary, privacy_salt: PrivacySalt) -> HashDigestBits {
        let mut component_leaf_hashes = [false; HASH_BITS];
        component_leaf_hashes = compute_leaf_hash_pub_key(
            fingerprint_content(notary.value.content.owning_key),
            privacy_salt,
            ComponentGroupEnum::NOTARY_GROUP as u32,
            0 as u32,
        );
        component_leaf_hashes
    }

    fn compute_component_group_hash(
        notary: Notary,
        privacy_salt: PrivacySalt,
    ) -> ComponentGroupHashBits {
        let component_leaf_hashes = compute_leaf_hashes(notary, privacy_salt);

        //When the number of leaves is one, we pad the leaf with zeros from the right first
        //and use padded input in the merkle_root computation.
        let mut padded_leaves = [[false; HASH_BITS]; 2];
        padded_leaves[0] = component_leaf_hashes;

        merkle_2_leaves(padded_leaves)
    }
}
