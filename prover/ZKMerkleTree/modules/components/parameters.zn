const PARAMETERS_HASH_BYTES: u16 = 32;

const PARAMETERS_HASH_FINGERPRINT_BYTES: u16 = 32;

const PARAMETERS_HASH_FINGERPRINT_BITS: u16 = PARAMETERS_HASH_FINGERPRINT_BYTES * BYTE_BITS;

type ParametersHashBytes = [u8; PARAMETERS_HASH_BYTES];
type ParametersHashFingerprintBits = [bool; PARAMETERS_HASH_FINGERPRINT_BITS];

struct ParametersHash {
    bytes: ParametersHashBytes,
}

impl ParametersHash {
    fn fingerprint(this: ParametersHash) -> ParametersHashFingerprintBits {
        let mut fingerprint_bits = [false; PARAMETERS_HASH_FINGERPRINT_BITS];

        for i in (0 as u16)..PARAMETERS_HASH_FINGERPRINT_BYTES {
            let bits = to_bits(this.bytes[i]);
            for j in (0 as u16)..BYTE_BITS {
                fingerprint_bits[BYTE_BITS * i + j] =  bits[j];
            }
        }
        fingerprint_bits
    }

    // Method to compute leaf hash on public key values.
    fn compute_leaf_hash(
        this: ParametersHash,
        privacy_salt: PrivacySaltFingerprintBits,
        group_index: u32,
        internal_index: u32,
    ) -> ComponentGroupLeafDigest {
        //fingerprint
        let fingerprint_parameters_hash = fingerprint(this);

        //compute nonce
        let mut nonce = compute_nonce(privacy_salt, group_index, internal_index);
        let mut message= [false; NONCE_DIGEST_BITS + PARAMETERS_HASH_FINGERPRINT_BITS];

        //message = nonce || signature
        for i in 0..NONCE_DIGEST_BITS {
            message[i] = nonce[i];
        }

        for i in 0..PARAMETERS_HASH_FINGERPRINT_BITS {
            message[NONCE_DIGEST_BITS + i] = fingerprint_parameters_hash[i];
        }

        ComponentGroupLeafDigest{bits: blake2s(message),}
    }
}

struct ParameterPaddingWrapper {
    content: ParametersHash,
    is_filler: bool,
}

struct ParametersComponentGroup {
    component: ParameterPaddingWrapper,
    group_hash: NodeDigest,
}

impl ParametersComponentGroup {
    fn compute_component_group_hash(
        this: ParametersComponentGroup,
        privacy_salt: PrivacySaltFingerprintBits,
    ) -> NodeDigestBits {
        let component_leaf_hash = ParametersHash::compute_leaf_hash(
            this.component.content,
            privacy_salt,
            ComponentGroupEnum::PARAMETERS_GROUP as u32,
            0 as u32,
        );

        //When the number of leaves is one, we pad the leaf with zeros from the right first
        //and use padded input in the merkle_root computation.
        let mut padded_leaves = [ComponentGroupLeafDigest { bits: [false; COMPONENT_GROUP_LEAF_DIGEST_BITS] }; 2];
        padded_leaves[0] = component_leaf_hash;

        get_merkle_tree_from_2_component_group_leaf_digests(padded_leaves)
    }
}
