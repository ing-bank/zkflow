const TIME_WINDOW_BYTES: u16 = 24;

const TIME_WINDOW_FINGERPRINT_WORDS: u16 = 24;
const TIME_WINDOW_FINGERPRINT_WORD_BITS: u16 = BYTE_BITS;

const TIME_WINDOW_FINGERPRINT_BITS: u16 = TIME_WINDOW_FINGERPRINT_WORD_BITS * TIME_WINDOW_FINGERPRINT_WORDS;

type TimeWindowBytes = [u8; TIME_WINDOW_BYTES];
type TimeWindowFingerprintBits = [bool; TIME_WINDOW_FINGERPRINT_BITS];

struct TimeWindow {
    bytes: TimeWindowBytes,
}

impl TimeWindow {
    fn fingerprint(this: TimeWindow) -> TimeWindowFingerprintBits {
        let mut fingerprint_bits = [false; TIME_WINDOW_FINGERPRINT_BITS];

        for i in (0 as u16)..TIME_WINDOW_FINGERPRINT_WORDS {
            let bits = to_bits(this.bytes[i]);
            for j in (0 as u16)..TIME_WINDOW_FINGERPRINT_WORD_BITS {
                fingerprint_bits[TIME_WINDOW_FINGERPRINT_WORD_BITS * i + j] =  bits[j];
            }
        }
        fingerprint_bits
    }

    fn compute_leaf_hash(
        this: TimeWindow,
        privacy_salt: PrivacySaltFingerprintBits,
        group_index: u32,
        internal_index: u32,
    ) -> ComponentGroupLeafDigest {
        //fingerprint
        let fingerprint_time_window = fingerprint(this);

        //compute nonce
        let mut nonce = compute_nonce(privacy_salt, group_index, internal_index);
        let mut message = [false; NONCE_DIGEST_BITS + TIME_WINDOW_FINGERPRINT_BITS];

        //message = nonce || signature
        for i in 0..NONCE_DIGEST_BITS {
            message[i] = nonce[i];
        }
        for i in 0..TIME_WINDOW_FINGERPRINT_BITS {
            message[NONCE_DIGEST_BITS + i] = fingerprint_time_window[i];
        }

        ComponentGroupLeafDigest{bits: blake2s(message),}
    }
}

struct TimeWindowPaddingWrapper {
    content: TimeWindow,
    is_filler: bool,
}

struct TimeWindowComponentGroup {
    component: TimeWindowPaddingWrapper,
    group_hash: NodeDigest,
}

impl TimeWindowComponentGroup {
    fn compute_component_group_hash(
        this: TimeWindowComponentGroup,
        privacy_salt: PrivacySaltFingerprintBits,
    ) -> NodeDigestBits {
        let component_leaf_hash = TimeWindow::compute_leaf_hash(
            this.component.content,
            privacy_salt,
            ComponentGroupEnum::TIMEWINDOW_GROUP as u32,
            0 as u32,
        );

        //When the number of leaves is one, we pad the leaf with zeros from the right first
        //and use padded input in the merkle_root computation.
        let mut padded_leaves = [ComponentGroupLeafDigest { bits: [false; COMPONENT_GROUP_LEAF_DIGEST_BITS] }; 2];
        padded_leaves[0] = component_leaf_hash;

        get_merkle_tree_from_2_component_group_leaf_digests(padded_leaves)
    }
}
