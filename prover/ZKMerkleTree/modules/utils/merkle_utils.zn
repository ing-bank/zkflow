//! Limited-depth recursion for Merkle tree construction

fn merkle_2_leaves(leaves: [[bool; HASH_BITS]; 2]) -> [bool; HASH_BITS] {
    dbg!("Consuming 2 leaves");
    dbg!("0: {}", digest_to_bytes(leaves[0]));
    dbg!("1: {}", digest_to_bytes(leaves[1]));
    pedersen_to_padded_bits(
        pedersen(concatenate_hashes(leaves[0], leaves[1])).0,
    )
}            

fn merkle_4_leaves(leaves: [[bool; HASH_BITS]; 4]) -> [bool; HASH_BITS] {
    dbg!("Consuming 4 leaves");
    let mut new_leaves = [[false; HASH_BITS]; 2];
    for i in 0..2 {
        new_leaves[i] = pedersen_to_padded_bits(
            pedersen(concatenate_hashes(leaves[2 * i], leaves[2 * i + 1])).0,
        );
        dbg!("{}: {}", 2 * i, digest_to_bytes(leaves[2 * i]));
        dbg!("{}: {}", 2 * i + 1, digest_to_bytes(leaves[2 * i + 1]));
        dbg!("Digest: {}", digest_to_bytes(new_leaves[i]));
    }
    dbg!("");
    merkle_2_leaves(new_leaves)
}

fn merkle_8_leaves(leaves: [[bool; HASH_BITS]; 8]) -> [bool; HASH_BITS] {
    dbg!("Consuming 8 leaves");
    let mut new_leaves = [[false; HASH_BITS]; 4];
    for i in 0..4 {
        new_leaves[i] = pedersen_to_padded_bits(
            pedersen(concatenate_hashes(leaves[2 * i], leaves[2 * i + 1])).0,
        );
        dbg!("{}: {}", 2 * i, digest_to_bytes(leaves[2 * i]));
        dbg!("{}: {}", 2 * i + 1, digest_to_bytes(leaves[2 * i + 1]));
        dbg!("Digest: {}", digest_to_bytes(new_leaves[i]));
    }
    dbg!("");
    merkle_4_leaves(new_leaves)
}

fn merkle_16_leaves(leaves: [[bool; HASH_BITS]; 16]) -> [bool; HASH_BITS] {
    dbg!("Consuming 16 leaves");
    let mut new_leaves = [[false; HASH_BITS]; 8];
    for i in 0..8 {
        new_leaves[i] = pedersen_to_padded_bits(
            pedersen(concatenate_hashes(leaves[2 * i], leaves[2 * i + 1])).0,
        );
        dbg!("{}: {}", 2 * i, digest_to_bytes(leaves[2 * i]));
        dbg!("{}: {}", 2 * i + 1, digest_to_bytes(leaves[2 * i + 1]));
        dbg!("Digest: {}", digest_to_bytes(new_leaves[i]));
    }
    dbg!("");
    merkle_8_leaves(new_leaves)
}

//! Top-level function to be called.
//! Pads the configure number of leaves to the right amount with zero hashes from the right
//! and calls appropriate tree-constructing procedure            
fn merkle_root(leaves: [[bool; HASH_BITS]; 9]) -> [bool; HASH_BITS] {
    dbg!("Building a tree from 9 leaves");
    
    dbg!("Padding from the right with 7 zero leaves");
    let mut full_leaves = [[false; HASH_BITS]; 16];
    for i in 0..9 {
        full_leaves[i] = leaves[i];
    }
    
    dbg!("Constructing the root");
    merkle_16_leaves(full_leaves)
}
