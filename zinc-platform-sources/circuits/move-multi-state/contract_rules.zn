mod platform_witness;
mod signers_anonymous_party_ed_dsa;
mod tx_state_test_state1;
mod tx_state_test_state2;

use platform_witness::Witness;
use signers_anonymous_party_ed_dsa::Signers;
use tx_state_test_state1::TxStateTestState1;
use tx_state_test_state2::TxStateTestState2;

fn check_contract_rules(witness: Witness) {
    // // Transaction structure
    // if (tx.outputs.size != 2) throw IllegalArgumentException("Failed requirement: the tx has exactly two outputs")
    // if (tx.inputs.size != 2) throw IllegalArgumentException("Failed requirement: the tx has exactly two inputs")

    // // Transaction contents
    // val output1 = tx.getOutput(0) as TestState1
    // val output2 = tx.getOutput(1) as TestState2

    // val input1 = tx.getInput(0) as TestState1
    // val input2 = tx.getInput(1) as TestState2

    // if (input1.owner.owningKey !in command.signers) throw IllegalArgumentException("Failed requirement: the first input state is owned by a required command signer")
    // if (input2.owner.owningKey !in command.signers) throw IllegalArgumentException("Failed requirement: the second input state is owned by a required command signer")
    // if (input1.value != output1.value) throw IllegalArgumentException("Failed requirement: the value of the input and output should be equal")
    // if (input2.value != output2.value) throw IllegalArgumentException("Failed requirement: the value of the input and output should be equal")

    // Transaction structure is ensured by construction of witness.

    // Transaction contents.
    let input1 = TxStateTestState1::deserialize(witness.serialized_input_utxos.test_state1[0]);
    let input2 = TxStateTestState2::deserialize(witness.serialized_input_utxos.test_state2[0]);

    let output1 = TxStateTestState1::deserialize(witness.outputs.test_state1[0]);
    let output2 = TxStateTestState2::deserialize(witness.outputs.test_state2[0]);


    assert!(input1.data.value == output1.data.value, "[Move] Values of input and output must equal");
    assert!(input2.data.value == output2.data.value, "[Move] Values of input and output must equal");
    dbg!("[Move] Value of moved value verified");

    let signers = Signers::deserialize(witness.signers[0]);
    dbg!("[Move] Signers {}", signers);

    assert!(Signers::contains(signers, input1.data.owner), "[Move] Owner must sign");
    assert!(Signers::contains(signers, input2.data.owner), "[Move] Owner must sign");
    dbg!("[Move] Owners of consumed states signed");

    dbg!("[Move] Contract rules are verified");
}