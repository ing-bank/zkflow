const ATTACHMENT_ID_BYTES: u16 = 32;

const ATTACHMENT_ID_FINGERPRINT_BYTES: u16 = 32;

const ATTACHMENT_ID_FINGERPRINT_BITS: u16 = ATTACHMENT_ID_FINGERPRINT_BYTES * BYTE_BITS;

type AttachmentIdBytes = [u8; ATTACHMENT_ID_BYTES];
type AttachmentIdFingerprintBits = [bool; ATTACHMENT_ID_FINGERPRINT_BITS];

struct AttachmentId {
    bytes: AttachmentIdBytes,
}

impl AttachmentId {
    fn fingerprint(this: AttachmentId) -> AttachmentIdFingerprintBits {
        let mut fingerprint_bits = [false; ATTACHMENT_ID_FINGERPRINT_BITS];

        for i in (0 as u16)..ATTACHMENT_ID_FINGERPRINT_BYTES {
            let bits = to_bits(this.bytes[i]);
            for j in (0 as u16)..BYTE_BITS {
                fingerprint_bits[BYTE_BITS * i + j] = bits[j];
            }
        }
        fingerprint_bits
    }

    // Method to compute leaf hash on public key values.
    fn compute_leaf_hash(
        this: AttachmentId,
        privacy_salt: PrivacySaltBits,
        group_index: u32,
        internal_index: u32,
    ) -> ComponentGroupLeafDigestBits {
        //fingerprint
        let fingerprint_attachment_id = fingerprint(this);

        //compute nonce
        let mut nonce = compute_nonce(privacy_salt, group_index, internal_index);
        let mut message = [false; NONCE_DIGEST_BITS + ATTACHMENT_ID_FINGERPRINT_BITS];

        //message = nonce || signature
        for i in 0..NONCE_DIGEST_BITS {
            message[i] = nonce[i];
        }

        for i in 0..ATTACHMENT_ID_FINGERPRINT_BITS {
            message[NONCE_DIGEST_BITS + i] = fingerprint_attachment_id[i];
        }

        blake2s(message)
    }
}

struct AttachmentPaddingWrapper {
    content: AttachmentId,
    is_filler: bool,
}

struct AttachmentsComponentGroup {
    components: [AttachmentPaddingWrapper; ATTACHMENT_GROUP_SIZE],
    group_hash: NodeDigestDto,
}

impl AttachmentsComponentGroup {
    fn compute_leaf_hashes(
        this: AttachmentsComponentGroup,
        privacy_salt: PrivacySaltBits,
    ) -> [ComponentGroupLeafDigestBits; ATTACHMENT_GROUP_SIZE] {
        let mut component_leaf_hashes =
            [[false; COMPONENT_GROUP_LEAF_DIGEST_BITS]; ATTACHMENT_GROUP_SIZE];

        for i in (0 as u32)..(ATTACHMENT_GROUP_SIZE as u32) {
            component_leaf_hashes[i] = AttachmentId::compute_leaf_hash(
                this.components[i].content,
                privacy_salt,
                ComponentGroupEnum::ATTACHMENTS_GROUP as u32,
                i as u32,
            );
        }

        component_leaf_hashes
    }

    fn compute_component_group_hash(
        this: AttachmentsComponentGroup,
        privacy_salt: PrivacySaltBits,
    ) -> NodeDigestBits {
        // ### CALL APPROPRIATE MERKLE TREE FUNCTION ###
    }
}
