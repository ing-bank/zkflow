// Input parameters:
//   - ARRAY_LENGTH: u16 = The number of bytes in the source array

mod platform_consts;
mod platform_integer;

use platform_consts::BYTE_BITS;
use platform_consts::U32_BYTES;
use platform_consts::U32_BITS;

//! ByteArray lengths
const BYTE_ARRAY_${ARRAY_LENGTH}_SIZE_LENGTH: u16 = U32_BYTES;
const BYTE_ARRAY_${ARRAY_LENGTH}_BYTES_LENGTH: u16 = ${ARRAY_LENGTH};

//! ByteArray offsets
const BYTE_ARRAY_${ARRAY_LENGTH}_SIZE_OFFSET: u16 = 0;
const BYTE_ARRAY_${ARRAY_LENGTH}_BYTES_OFFSET: u16
    = BYTE_ARRAY_${ARRAY_LENGTH}_SIZE_OFFSET
    + BYTE_ARRAY_${ARRAY_LENGTH}_SIZE_LENGTH;
const BYTE_ARRAY_${ARRAY_LENGTH}_LENGTH: u16
    = BYTE_ARRAY_${ARRAY_LENGTH}_BYTES_OFFSET
    + BYTE_ARRAY_${ARRAY_LENGTH}_BYTES_LENGTH;

type SerializedByteArray_${ARRAY_LENGTH} = [u8; BYTE_ARRAY_${ARRAY_LENGTH}_LENGTH];

struct ByteArray_${ARRAY_LENGTH} {
    size: u32,
    bytes: [u8; BYTE_ARRAY_${ARRAY_LENGTH}_BYTES_LENGTH],
}

impl ByteArray_${ARRAY_LENGTH} {
    fn _parse_u32(bytes: SerializedByteArray_${ARRAY_LENGTH}, offset: u16) -> u32 {
        let mut bits = [false; U32_BITS];
        for i in 0..U32_BYTES {
            let pre_bits = std::convert::to_bits(bytes[i + offset]);

            for j in 0..BYTE_BITS {
                bits[i * BYTE_BITS + j] = pre_bits[j];
            }
        }
        std::convert::from_bits_unsigned(bits)
    }

    fn deserialize(bytes: SerializedByteArray_${ARRAY_LENGTH}) -> ByteArray_${ARRAY_LENGTH} {
        let size = _parse_u32(bytes, BYTE_ARRAY_${ARRAY_LENGTH}_SIZE_OFFSET);

        let mut byte_array = [0; BYTE_ARRAY_${ARRAY_LENGTH}_BYTES_LENGTH];
        for i in 0..BYTE_ARRAY_${ARRAY_LENGTH}_BYTES_LENGTH {
            byte_array[i] = bytes[i + BYTE_ARRAY_${ARRAY_LENGTH}_BYTES_OFFSET];
        }

        ByteArray_${ARRAY_LENGTH} {
            size: size,
            bytes: byte_array,
        }
    }
}
