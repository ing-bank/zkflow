// Input parameters:
//   - ARRAY_LENGTH: u16 = The number of bytes in the source array

mod platform_consts;
mod platform_integer;

use platform_consts::U32_BYTES;

//! ByteArray lengths
const BYTE_ARRAY_${ARRAY_LENGTH}_SIZE_LENGTH: u16 = U32_BYTES;
const BYTE_ARRAY_${ARRAY_LENGTH}_BYTES_LENGTH: u16 = ${ARRAY_LENGTH};

//! ByteArray offsets
const BYTE_ARRAY_${ARRAY_LENGTH}_SIZE_OFFSET: u16 = 0;
const BYTE_ARRAY_${ARRAY_LENGTH}_BYTES_OFFSET: u16
    = BYTE_ARRAY_${ARRAY_LENGTH}_SIZE_OFFSET
    + BYTE_ARRAY_${ARRAY_LENGTH}_SIZE_LENGTH;
const BYTE_ARRAY_${ARRAY_LENGTH}_LENGTH: u16
    = BYTE_ARRAY_${ARRAY_LENGTH}_BYTES_OFFSET
    + BYTE_ARRAY_${ARRAY_LENGTH}_BYTES_LENGTH;

type SerializedByteArray_${ARRAY_LENGTH} = [u8; BYTE_ARRAY_${ARRAY_LENGTH}_LENGTH];

struct ByteArray_${ARRAY_LENGTH} {
    size: u32,
    bytes: [u8; BYTE_ARRAY_${ARRAY_LENGTH}_BYTES_LENGTH],
}

impl ByteArray_${ARRAY_LENGTH} {
    fn equals(this: ByteArray_${ARRAY_LENGTH}, that: ByteArray_${ARRAY_LENGTH}) -> bool {
        let mut still_equal = this.size == that.size;
        for i in 0..BYTE_ARRAY_${ARRAY_LENGTH}_BYTES_LENGTH while still_equal {
            still_equal = this.bytes[i] == that.bytes[i];
        }
        still_equal
    }

    fn deserialize(serialized_byte_array: SerializedByteArray_${ARRAY_LENGTH}) -> ByteArray_${ARRAY_LENGTH} {
        let size = {
            let mut size_bytes = [0; BYTE_ARRAY_${ARRAY_LENGTH}_SIZE_LENGTH];
            for i in 0..BYTE_ARRAY_${ARRAY_LENGTH}_SIZE_LENGTH {
                size_bytes[i] = serialized_byte_array[i + BYTE_ARRAY_${ARRAY_LENGTH}_SIZE_OFFSET];
            }
            platform_integer::parse_u32(size_bytes)
        };

        let bytes = {
            let mut byte_array = [0; BYTE_ARRAY_${ARRAY_LENGTH}_BYTES_LENGTH];
            for i in 0..BYTE_ARRAY_${ARRAY_LENGTH}_BYTES_LENGTH {
                byte_array[i] = serialized_byte_array[i + BYTE_ARRAY_${ARRAY_LENGTH}_BYTES_OFFSET];
            }
            byte_array
        };

        ByteArray_${ARRAY_LENGTH} {
            size: size,
            bytes: bytes,
        }
    }
}
