mod consts;
mod merkle_utils;
mod platform_node_digest_dto;
mod platform_privacy_salt;
mod platform_component_group_leaf_digest_dto;
mod platform_component_group_enum;
mod platform_crypto_utils;
mod platform_consts;
${MODULE_PLACEHOLDER}

use merkle_utils::get_merkle_tree_from_${GROUP_SIZE_PLACEHOLDER}_component_group_leaf_digests;
use platform_node_digest_dto::NodeDigestBits;
use platform_component_group_enum::ComponentGroupEnum;
use platform_component_group_leaf_digest_dto::COMPONENT_GROUP_LEAF_DIGEST_BITS;
use platform_component_group_leaf_digest_dto::ComponentGroupLeafDigestBits;
use platform_privacy_salt::PrivacySaltBits;
use platform_node_digest_dto::NodeDigestDto;
use platform_node_digest_dto::NODE_DIGEST_BITS;
use platform_crypto_utils::compute_nonce;
use consts::OUTPUT_GROUP_SIZE;
use platform_consts::BYTE_BITS;
use std::convert::to_bits;
use std::crypto::blake2s_multi_input;
${USE_DECLARATION_PLACEHOLDER}

${TYPE_PLACEHOLDER}

fn compute_leaf_hashes(
    components: SerializedOutputGroup,
    privacy_salt: PrivacySaltBits,
) -> [ComponentGroupLeafDigestBits; OUTPUT_GROUP_SIZE] {
    let mut component_leaf_hashes =
        [[false; COMPONENT_GROUP_LEAF_DIGEST_BITS]; OUTPUT_GROUP_SIZE];

    let mut element_index: u32 = 0;
    ${HASH_COMPUTATION_PLACEHOLDER}
    component_leaf_hashes
}

fn compute_outputs_group_hash(
    components: SerializedOutputGroup,
    privacy_salt: PrivacySaltBits,
) -> NodeDigestBits {
    // ### CALL APPROPRIATE MERKLE TREE FUNCTION ###
}