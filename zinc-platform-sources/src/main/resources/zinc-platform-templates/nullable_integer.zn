// Input parameters:
//   - INNER_MODULE_NAME: String = module name of the inner (signed or unsigned) integer, e.g. i16, u16, etc
//   - INNER_CONSTANT_PREFIX: String = prefix used for constant names of the inner (signed or unsigned) integer
//   - INNER_TYPE_NAME: String = name of the inner (signed or unsigned) integer, e.g. I16, U16, e.g.

mod platform_consts;
mod platform_integer;

use platform_consts::${INNER_CONSTANT_PREFIX}_BYTES;

const NULLABLE_${INNER_CONSTANT_PREFIX}_LENGTH: u16 = 1 as u16 + ${INNER_CONSTANT_PREFIX}_BYTES;

type SerializedNullable${INNER_TYPE_NAME} = [u8; NULLABLE_${INNER_CONSTANT_PREFIX}_LENGTH];

struct Nullable${INNER_TYPE_NAME} {
    is_null: bool,
    inner: ${INNER_MODULE_NAME},
}

impl Nullable${INNER_TYPE_NAME} {
    fn null() -> Nullable${INNER_TYPE_NAME} {
        Nullable${INNER_TYPE_NAME} {
            is_null: true,
            inner: 0 as ${INNER_MODULE_NAME},
        }
    }

    fn non_null(value: ${INNER_MODULE_NAME}) -> Nullable${INNER_TYPE_NAME} {
        Nullable${INNER_TYPE_NAME} {
            is_null: false,
            inner: value,
        }
    }

    fn equals(this: Nullable${INNER_TYPE_NAME}, that: Nullable${INNER_TYPE_NAME}) -> bool {
        if this.is_null == that.is_null {
            if this.is_null {
                true
            } else {
                this.inner == that.inner
            }
        } else {
            false
        }
    }

    fn deserialize(serialized: SerializedNullable${INNER_TYPE_NAME}) -> Nullable${INNER_TYPE_NAME} {
        let is_null = serialized[0] == 0;

        let inner = if !is_null {
            let mut inner_bytes = [0 as u8; ${INNER_CONSTANT_PREFIX}_BYTES];
            for i in 0..${INNER_CONSTANT_PREFIX}_BYTES {
                inner_bytes[i] = serialized[1 as u16 + i];
            }
            platform_integer::parse_${INNER_MODULE_NAME}(inner_bytes)
        } else {
            0 as ${INNER_MODULE_NAME}
        };

        Nullable${INNER_TYPE_NAME} {
            is_null: is_null,
            inner: inner,
        }
    }
}