// Input parameters:
//   - PRINCIPAL_NAME_STRING_SIZE: u16 = The string size of the principal name

mod string_${PRINCIPAL_NAME_STRING_SIZE};

use string_${PRINCIPAL_NAME_STRING_SIZE}::String_${PRINCIPAL_NAME_STRING_SIZE};
use string_${PRINCIPAL_NAME_STRING_SIZE}::SerializedString_${PRINCIPAL_NAME_STRING_SIZE};
use string_${PRINCIPAL_NAME_STRING_SIZE}::STRING_${PRINCIPAL_NAME_STRING_SIZE}_LENGTH;

const X500_PRINCIPAL_LENGTH: u16 = STRING_${PRINCIPAL_NAME_STRING_SIZE}_LENGTH;

type SerializedX500Principal = SerializedString_${PRINCIPAL_NAME_STRING_SIZE};

// Define type alias, to make the rest of the template cleaner
type PrincipalName = String_${PRINCIPAL_NAME_STRING_SIZE};

struct X500Principal {
    name: PrincipalName,
}

impl X500Principal {
    fn equals(this: X500Principal, that: X500Principal) -> bool {
        PrincipalName::equals(this.name, that.name)
    }

    fn deserialize(serialized_principal: SerializedX500Principal) -> X500Principal {
        X500Principal {
            name: PrincipalName::deserialize(serialized_principal),
        }
    }
}
