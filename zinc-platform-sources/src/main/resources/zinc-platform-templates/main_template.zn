mod consts;
mod contract_rules;
mod platform_component_group_leaf_digest_dto;
mod platform_merkle_tree;
mod platform_node_digest_dto;
mod platform_utxo_digests;
mod platform_witness;

use consts::INPUT_GROUP_SIZE;
use consts::REFERENCE_GROUP_SIZE;
use contract_rules::check_contract_rules;
use platform_component_group_leaf_digest_dto::ComponentGroupLeafDigestBytes;
use platform_component_group_leaf_digest_dto::COMPONENT_GROUP_LEAF_DIGEST_BYTES;
use platform_merkle_tree::build_merkle_tree;
use platform_node_digest_dto::NodeDigestDto;
use platform_node_digest_dto::NodeDigestBytes;
use platform_node_digest_dto::NODE_DIGEST_BYTES;
use platform_utxo_digests::compute_input_utxo_digests;
use platform_utxo_digests::compute_reference_utxo_digests;
use platform_witness::Witness;

struct PublicInput {
    transaction_id: NodeDigestBytes,
    input_hashes: [ComponentGroupLeafDigestBytes; INPUT_GROUP_SIZE],
    reference_hashes: [ComponentGroupLeafDigestBytes; REFERENCE_GROUP_SIZE],
}

fn main(witness: Witness) -> PublicInput  {
    // Check contract rules
    check_contract_rules(witness);

    // Compute the transaction id
    let root_hash = build_merkle_tree(witness);

    PublicInput {
        transaction_id: NodeDigestDto::from_bits_to_bytes(root_hash),
        input_hashes: ${INPUT_HASH_PLACEHOLDER},
        reference_hashes: ${REFERENCE_HASH_PLACEHOLDER},
    }
}