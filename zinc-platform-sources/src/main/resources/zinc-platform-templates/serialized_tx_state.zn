mod consts;
mod platform_consts;
mod platform_privacy_salt;
mod platform_component_group_leaf_digest_dto;
mod platform_crypto_utils;
mod platform_nonce_digest_dto;
mod tx_state_${STATE_NAME_MODULE_NAME};

use platform_component_group_leaf_digest_dto::COMPONENT_GROUP_LEAF_DIGEST_BITS;
use platform_component_group_leaf_digest_dto::ComponentGroupLeafDigestBits;
use platform_consts::BYTE_BITS;
${NONCE_USE_PLACEHOLDER}
use std::convert::to_bits;
use std::crypto::blake2s_multi_input;
use tx_state_${STATE_NAME_MODULE_NAME}::SerializedTxState${STATE_NAME_TYPE_NAME};
use tx_state_${STATE_NAME_MODULE_NAME}::TX_STATE_${STATE_NAME_CONSTANT_PREFIX}_LENGTH;

const ${COMPONENT_NAME_CONSTANT_PREFIX}_${STATE_NAME_CONSTANT_PREFIX}_GROUP_SIZE: u16 = ${GROUP_SIZE_PLACEHOLDER};
const ${COMPONENT_NAME_CONSTANT_PREFIX}_TX_STATE_${STATE_NAME_CONSTANT_PREFIX}_BITS: u16
    = TX_STATE_${STATE_NAME_CONSTANT_PREFIX}_LENGTH
    * BYTE_BITS;

type Serialized${COMPONENT_NAME_TYPE_NAME}${STATE_NAME_TYPE_NAME}${COMPONENT_TYPE_TYPE_NAME} = [SerializedTxState${STATE_NAME_TYPE_NAME}; ${COMPONENT_NAME_CONSTANT_PREFIX}_${STATE_NAME_CONSTANT_PREFIX}_GROUP_SIZE];

fn bytes_to_bits(bytes: [u8; TX_STATE_${STATE_NAME_CONSTANT_PREFIX}_LENGTH]) -> [bool; ${COMPONENT_NAME_CONSTANT_PREFIX}_TX_STATE_${STATE_NAME_CONSTANT_PREFIX}_BITS] {
    let mut bits = [false; ${COMPONENT_NAME_CONSTANT_PREFIX}_TX_STATE_${STATE_NAME_CONSTANT_PREFIX}_BITS];

    for i in (0 as u16)..TX_STATE_${STATE_NAME_CONSTANT_PREFIX}_LENGTH {
        let byte_bits = to_bits(bytes[i]);
        for j in (0 as u16)..BYTE_BITS {
            bits[BYTE_BITS * i + j] = byte_bits[j];
        }
    }
    bits
}

fn compute_${COMPONENT_TYPE_MODULE_NAME}_hashes(
    components: Serialized${COMPONENT_NAME_TYPE_NAME}${STATE_NAME_TYPE_NAME}${COMPONENT_TYPE_TYPE_NAME},
    ${NONCE_CALL_PLACEHOLDER},
    element_index: u32
) -> [ComponentGroupLeafDigestBits; ${COMPONENT_NAME_CONSTANT_PREFIX}_${STATE_NAME_CONSTANT_PREFIX}_GROUP_SIZE] {
    let mut ${COMPONENT_TYPE_MODULE_NAME}_hashes =
    [[false; COMPONENT_GROUP_LEAF_DIGEST_BITS]; ${COMPONENT_NAME_CONSTANT_PREFIX}_${STATE_NAME_CONSTANT_PREFIX}_GROUP_SIZE];

    for i in (0 as u32)..(${COMPONENT_NAME_CONSTANT_PREFIX}_${STATE_NAME_CONSTANT_PREFIX}_GROUP_SIZE as u32) {
            ${COMPONENT_TYPE_MODULE_NAME}_hashes[i] = blake2s_multi_input(
            ${NONCE_FUNCTION_PLACEHOLDER}
            bytes_to_bits(components[i])
        );
    }

    ${COMPONENT_TYPE_MODULE_NAME}_hashes
}