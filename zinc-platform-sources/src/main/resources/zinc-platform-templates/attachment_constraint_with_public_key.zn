// Input parameters:
//   - TYPE_NAME: String = Name of the main struct, and suffix for Serialized struct, use camelcase
//   - CONSTANT_PREFIX: String = prefix to use for constant names, use uppercase
//   - PK_TYPE_NAME: String = name of the PublicKey struct, and suffix for Serialized struct, use camelcase
//   - PK_CONSTANT_PREFIX: String = prefix used for constant names of PublicKey, use uppercase and snakecase
//   - PK_MODULE_NAME: String = module name of the PublicKey, use lowercase and snakecase

mod ${PK_MODULE_NAME};

use ${PK_MODULE_NAME}::${PK_TYPE_NAME};
use ${PK_MODULE_NAME}::${PK_CONSTANT_PREFIX}_LENGTH;

//! ${TYPE_NAME} field lengths
const ${CONSTANT_PREFIX}_PUBLIC_KEY_LENGTH: u16 = ${PK_CONSTANT_PREFIX}_LENGTH;

//! ${TYPE_NAME} field offsets
const ${CONSTANT_PREFIX}_PUBLIC_KEY_OFFSET: u16
    = 0;

//! ${TYPE_NAME} length
const ${CONSTANT_PREFIX}_LENGTH: u16
    = ${CONSTANT_PREFIX}_PUBLIC_KEY_OFFSET
    + ${CONSTANT_PREFIX}_PUBLIC_KEY_LENGTH;

type Serialized${TYPE_NAME} = [u8; ${CONSTANT_PREFIX}_LENGTH];

struct ${TYPE_NAME} {
    public_key: ${PK_TYPE_NAME},
}

impl ${TYPE_NAME} {
    fn empty() -> ${TYPE_NAME} {
        ${TYPE_NAME} {
            public_key: ${PK_TYPE_NAME}::empty(),
        }
    }

    fn equals(this: ${TYPE_NAME}, that: ${TYPE_NAME}) -> bool {
        ${PK_TYPE_NAME}::equals(this.public_key, that.public_key)
    }

    fn deserialize(serialized: Serialized${TYPE_NAME}) -> ${TYPE_NAME} {
        let public_key = {
            let mut public_key_bytes = [0; ${CONSTANT_PREFIX}_PUBLIC_KEY_LENGTH];
            for i in 0..${CONSTANT_PREFIX}_PUBLIC_KEY_LENGTH {
                public_key_bytes[i] = serialized[i + ${CONSTANT_PREFIX}_PUBLIC_KEY_OFFSET];
            }
            ${PK_TYPE_NAME}::deserialize(public_key_bytes)
        };

        ${TYPE_NAME} {
            public_key: public_key,
        }
    }
}
