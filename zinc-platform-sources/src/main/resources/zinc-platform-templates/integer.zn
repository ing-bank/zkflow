// Input parameters:
//   - TYPE_NAME: String = Name of the main struct, and suffix for Serialized struct, use camelcase
//   - CONSTANT_PREFIX: String = prefix to use for constant names, use uppercase
//   - INTEGER_TYPE_NAME: String = u8, i8, ... u128, i128
//   - INTEGER_CONSTANT_PREFIX: String = U8, I8, ... U128, I128

mod platform_consts;
mod platform_integer;

use platform_consts::${INTEGER_CONSTANT_PREFIX}_BYTES;
use platform_integer::parse_${INTEGER_TYPE_NAME};

// length
const ${CONSTANT_PREFIX}_LENGTH: u16 = ${INTEGER_CONSTANT_PREFIX}_BYTES;

type Serialized${TYPE_NAME} = [u8; ${CONSTANT_PREFIX}_LENGTH];

struct ${TYPE_NAME} {
    value: ${INTEGER_TYPE_NAME},
}

impl ${TYPE_NAME} {
    fn new(value: ${INTEGER_TYPE_NAME}) -> ${TYPE_NAME} {
        ${TYPE_NAME} {
            value: value,
        }
    }

    fn empty() -> ${TYPE_NAME} {
        ${TYPE_NAME}::new(0 as ${INTEGER_TYPE_NAME})
    }

    fn equals(this: ${TYPE_NAME}, that: ${TYPE_NAME}) -> bool {
        this.value == that.value
    }

    fn deserialize(serialized: Serialized${TYPE_NAME}) -> ${TYPE_NAME} {
        let value = parse_${INTEGER_TYPE_NAME}(serialized);

        ${TYPE_NAME} {
            value: value,
        }
    }
}
