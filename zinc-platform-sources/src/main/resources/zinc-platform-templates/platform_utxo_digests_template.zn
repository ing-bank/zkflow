mod consts;
mod platform_consts;
mod platform_node_digest_dto;
mod platform_nonce_digest_dto;
mod platform_privacy_salt;
mod platform_component_group_leaf_digest_dto;
mod platform_component_group_enum;
mod platform_components_${COMPONENT_NAME_MODULE_NAME}s;
${MODULE_PLACEHOLDER}

use consts::${COMPONENT_NAME_CONSTANT_PREFIX}_GROUP_SIZE;
use platform_component_group_enum::ComponentGroupEnum;
use platform_component_group_leaf_digest_dto::COMPONENT_GROUP_LEAF_DIGEST_BITS;
use platform_component_group_leaf_digest_dto::COMPONENT_GROUP_LEAF_DIGEST_BYTES;
use platform_component_group_leaf_digest_dto::ComponentGroupLeafDigestBits;
use platform_component_group_leaf_digest_dto::ComponentGroupLeafDigestBytes;
use platform_component_group_leaf_digest_dto::component_group_leaf_digest_from_bits_to_bytes;
use platform_components_${COMPONENT_NAME_MODULE_NAME}s::Serialized${COMPONENT_NAME_TYPE_NAME}Group;
use platform_node_digest_dto::NODE_DIGEST_BITS;
use platform_node_digest_dto::NodeDigestBits;
use platform_node_digest_dto::NodeDigestDto;
use platform_nonce_digest_dto::from_bytes_to_bits;
use platform_nonce_digest_dto::NonceDigestBytes;
use platform_privacy_salt::PrivacySaltBits;
use platform_consts::BYTE_BITS;
use std::crypto::blake2s_multi_input;
use std::convert::to_bits;
${USE_DECLARATION_PLACEHOLDER}

${TYPE_PLACEHOLDER}

// Verify that for each input and reference, when calculating the digest of its content with the nonce for the utxo
// it points to as provided in the public input (reference), matches the digest provided in the public input (reference).
// This proves that we did not change the contents of the inputs (references), compared to
// the VerifierTransaction known by the verifier, of which they were an output.
fn compute_${COMPONENT_NAME_MODULE_NAME}_utxo_digests(
    utxos: Serialized${COMPONENT_NAME_TYPE_NAME}Utxos,
    nonces: [NonceDigestBytes; ${COMPONENT_NAME_CONSTANT_PREFIX}_GROUP_SIZE]
) -> [ComponentGroupLeafDigestBytes; ${COMPONENT_NAME_CONSTANT_PREFIX}_GROUP_SIZE] {
    let mut utxo_hashes =
        [[0; COMPONENT_GROUP_LEAF_DIGEST_BYTES]; ${COMPONENT_NAME_CONSTANT_PREFIX}_GROUP_SIZE];

    let mut element_index: u32 = 0;
    ${HASH_COMPUTATION_PLACEHOLDER}

    utxo_hashes
}
