// Input parameters:
//   - TYPE_NAME: String = The type name of the generated file
//   - CONSTANT_PREFIX: String = The prefix to use for constants
//   - ENCODED_SIZE: u16 = Number of bytes in the encoded public key byte array

mod byte_array_${ENCODED_SIZE};
mod string_1;

use byte_array_${ENCODED_SIZE}::ByteArray_${ENCODED_SIZE};
use byte_array_${ENCODED_SIZE}::SerializedByteArray_${ENCODED_SIZE};
use byte_array_${ENCODED_SIZE}::BYTE_ARRAY_${ENCODED_SIZE}_LENGTH;

use string_1::String_1;
use string_1::SerializedString_1;
use string_1::STRING_1_LENGTH;

//! PublicKey lengths
const ${CONSTANT_PREFIX}_SERIAL_NAME_LENGTH: u16 = STRING_1_LENGTH;
const ${CONSTANT_PREFIX}_ENCODED_LENGTH: u16 = BYTE_ARRAY_${ENCODED_SIZE}_LENGTH;

//! PublicKey offsets
const ${CONSTANT_PREFIX}_SERIAL_NAME_OFFSET: u16 = 0;
const ${CONSTANT_PREFIX}_ENCODED_OFFSET: u16
    = ${CONSTANT_PREFIX}_SERIAL_NAME_OFFSET
    + ${CONSTANT_PREFIX}_SERIAL_NAME_LENGTH;
const ${CONSTANT_PREFIX}_LENGTH: u16
    = ${CONSTANT_PREFIX}_ENCODED_OFFSET
    + ${CONSTANT_PREFIX}_ENCODED_LENGTH;

type Serialized${TYPE_NAME} = [u8; ${CONSTANT_PREFIX}_LENGTH];
struct ${TYPE_NAME} {
    serial_name: String_1,
    encoded: ByteArray_${ENCODED_SIZE},
}

impl ${TYPE_NAME} {
    fn equals(this: ${TYPE_NAME}, that: ${TYPE_NAME}) -> bool {
        String_1::equals(this.serial_name, that.serial_name)
            && ByteArray_${ENCODED_SIZE}::equals(this.encoded, that.encoded)
    }

    fn deserialize(serialized: Serialized${TYPE_NAME}) -> ${TYPE_NAME} {
        let serial_name = {
            let mut serial_bytes = [0; ${CONSTANT_PREFIX}_SERIAL_NAME_LENGTH];
            for i in 0..${CONSTANT_PREFIX}_SERIAL_NAME_LENGTH {
                serial_bytes[i] = serialized[i + ${CONSTANT_PREFIX}_SERIAL_NAME_OFFSET];
            }
            String_1::deserialize(serial_bytes)
        };
        let encoded = {
            let mut encoded_bytes = [0; ${CONSTANT_PREFIX}_ENCODED_LENGTH];
            for i in 0..${CONSTANT_PREFIX}_ENCODED_LENGTH {
                encoded_bytes[i] = serialized[i + ${CONSTANT_PREFIX}_ENCODED_OFFSET];
            }
            ByteArray_${ENCODED_SIZE}::deserialize(encoded_bytes)
        };
        ${TYPE_NAME} {
            serial_name: serial_name,
            encoded: encoded,
        }
    }
}
