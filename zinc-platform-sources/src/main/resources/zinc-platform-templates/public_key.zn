// Input parameters:
//   - TYPE_NAME: String = The type name of the generated file
//   - CONSTANT_PREFIX: String = The prefix to use for constants
//   - ENCODED_SIZE: u16 = Number of bytes in the encoded public key byte array

mod byte_array_${ENCODED_SIZE};

use byte_array_${ENCODED_SIZE}::ByteArray_${ENCODED_SIZE};
use byte_array_${ENCODED_SIZE}::BYTE_ARRAY_${ENCODED_SIZE}_LENGTH;

//! PublicKey lengths
const ${CONSTANT_PREFIX}_ENCODED_LENGTH: u16 = BYTE_ARRAY_${ENCODED_SIZE}_LENGTH;

//! PublicKey offsets
const ${CONSTANT_PREFIX}_ENCODED_OFFSET: u16
    = 0;
const ${CONSTANT_PREFIX}_LENGTH: u16
    = ${CONSTANT_PREFIX}_ENCODED_OFFSET
    + ${CONSTANT_PREFIX}_ENCODED_LENGTH;

type Serialized${TYPE_NAME} = [u8; ${CONSTANT_PREFIX}_LENGTH];

struct ${TYPE_NAME} {
    encoded: ByteArray_${ENCODED_SIZE},
}

impl ${TYPE_NAME} {
    fn print_structure() {
        dbg!("[${TYPE_NAME}] LENGTH: {}", ${CONSTANT_PREFIX}_LENGTH);
        dbg!("[${TYPE_NAME}] STRUCTURE");
        dbg!("[${TYPE_NAME}] - ENCODED: {} (ByteArray_${ENCODED_SIZE})", ${CONSTANT_PREFIX}_ENCODED_LENGTH);
        dbg!("[${TYPE_NAME}]");
    }

    fn empty() -> ${TYPE_NAME} {
        ${TYPE_NAME} {
            encoded: ByteArray_${ENCODED_SIZE}::empty(),
        }
    }

    fn equals(this: ${TYPE_NAME}, that: ${TYPE_NAME}) -> bool {
        ByteArray_${ENCODED_SIZE}::equals(this.encoded, that.encoded)
    }

    fn deserialize(serialized: Serialized${TYPE_NAME}) -> ${TYPE_NAME} {
        let encoded = {
            let mut encoded_bytes = [0; ${CONSTANT_PREFIX}_ENCODED_LENGTH];
            for i in 0..${CONSTANT_PREFIX}_ENCODED_LENGTH {
                encoded_bytes[i] = serialized[i + ${CONSTANT_PREFIX}_ENCODED_OFFSET];
            }
            ByteArray_${ENCODED_SIZE}::deserialize(encoded_bytes)
        };
        ${TYPE_NAME} {
            encoded: encoded,
        }
    }
}
