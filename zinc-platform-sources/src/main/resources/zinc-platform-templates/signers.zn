mod platform_consts;
mod platform_components_signers;
mod ${PARTY_MODULE_NAME};
mod ${COLLECTION_MODULE_NAME};

use platform_consts::CORDA_SERDE_MAGIC_LENGTH;
use platform_components_signers::SerializedCommandSignersList;
use ${PARTY_MODULE_NAME}::${PARTY_TYPE_NAME};
use ${COLLECTION_MODULE_NAME}::${COLLECTION_TYPE_NAME};
use ${COLLECTION_MODULE_NAME}::${COLLECTION_CONSTANT_PREFIX}_LENGTH;

struct Signers {
    inner: ${COLLECTION_TYPE_NAME}
}

impl Signers {
    fn deserialize(serialized_command_signers_list: SerializedCommandSignersList) -> Signers {
        let inner = {
            let mut inner_bytes = [0; ${COLLECTION_CONSTANT_PREFIX}_LENGTH];
            for i in 0.. ${COLLECTION_CONSTANT_PREFIX}_LENGTH {
                inner_bytes[i] = serialized_command_signers_list[i + CORDA_SERDE_MAGIC_LENGTH];
            }
            ${COLLECTION_TYPE_NAME}::deserialize(inner_bytes)
        };

        Signers {
            inner: inner
        }
    }

    fn contains(this: Signers, signer: ${PARTY_TYPE_NAME}) -> bool {
        ${COLLECTION_TYPE_NAME}::contains(this.inner, signer)
    }
}