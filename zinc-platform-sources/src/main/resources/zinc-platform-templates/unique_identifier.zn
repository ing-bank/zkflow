// Input parameters:
//   - EXTERNAL_ID_STRING_SIZE: u16 = The size of external ID, MUST be UniqueIdentifierSurrogate.EXTERNAL_ID_LENGTH

mod string_${EXTERNAL_ID_STRING_SIZE};

use string_${EXTERNAL_ID_STRING_SIZE}::String_${EXTERNAL_ID_STRING_SIZE};
use string_${EXTERNAL_ID_STRING_SIZE}::SerializedString_${EXTERNAL_ID_STRING_SIZE};
use string_${EXTERNAL_ID_STRING_SIZE}::STRING_${EXTERNAL_ID_STRING_SIZE}_LENGTH;

// UniqueIdentifier lengths
const UNIQUE_IDENTIFIER_EXTERNAL_ID_PRESENT_LENGTH: u16 = 1;
const UNIQUE_IDENTIFIER_EXTERNAL_ID_LENGTH: u16 = STRING_${EXTERNAL_ID_STRING_SIZE}_LENGTH;
const UNIQUE_IDENTIFIER_ID_LENGTH: u16 = 16;

// UniqueIdentifier offsets
const UNIQUE_IDENTIFIER_EXTERNAL_ID_PRESENT_OFFSET: u16 = 0;
const UNIQUE_IDENTIFIER_EXTERNAL_ID_OFFSET: u16
    = UNIQUE_IDENTIFIER_EXTERNAL_ID_PRESENT_OFFSET
    + UNIQUE_IDENTIFIER_EXTERNAL_ID_PRESENT_LENGTH;
const UNIQUE_IDENTIFIER_ID_OFFSET: u16
    = UNIQUE_IDENTIFIER_EXTERNAL_ID_OFFSET
    + UNIQUE_IDENTIFIER_EXTERNAL_ID_LENGTH;
const UNIQUE_IDENTIFIER_LENGTH: u16
    = UNIQUE_IDENTIFIER_ID_OFFSET
    + UNIQUE_IDENTIFIER_ID_LENGTH;

type SerializedUniqueIdentifier = [u8; UNIQUE_IDENTIFIER_LENGTH];

struct UniqueIdentifier {
    has_external_id: bool,
    external_id: String_${EXTERNAL_ID_STRING_SIZE},
    id: u128,
}

impl UniqueIdentifier {
    fn zero() -> UniqueIdentifier {
        UniqueIdentifier {
            has_external_id: false,
            external_id: String_${EXTERNAL_ID_STRING_SIZE}::empty(),
            id: 0 as u128,
        }
    }
    
    fn equals(this: UniqueIdentifier, that: UniqueIdentifier) -> bool {
        this.id == that.id
    }

    fn _extract_external_id(serialized_uid: SerializedUniqueIdentifier) -> String_${EXTERNAL_ID_STRING_SIZE} {
        let mut result: SerializedString_${EXTERNAL_ID_STRING_SIZE} = [0; STRING_${EXTERNAL_ID_STRING_SIZE}_LENGTH];
        for i in 0..UNIQUE_IDENTIFIER_EXTERNAL_ID_LENGTH {
            result[i] = serialized_uid[i + UNIQUE_IDENTIFIER_EXTERNAL_ID_OFFSET];
        }
        String_${EXTERNAL_ID_STRING_SIZE}::deserialize(result)
    }

    fn _extract_uuid(serialized_uid: SerializedUniqueIdentifier) -> u128 {
        let mut result: u128 = 0;
        for i in 0..UNIQUE_IDENTIFIER_ID_LENGTH {
            result = result * 256 as u128
                + serialized_uid[UNIQUE_IDENTIFIER_ID_OFFSET + i] as u128;
        }
        result
    }

    fn deserialize(serialized_uid: SerializedUniqueIdentifier) -> UniqueIdentifier {
        let has_external_id = serialized_uid[UNIQUE_IDENTIFIER_EXTERNAL_ID_PRESENT_OFFSET] != 0;

        UniqueIdentifier {
            has_external_id: has_external_id,
            external_id: _extract_external_id(serialized_uid),
            id: _extract_uuid(serialized_uid),
        }
    }
}
