// Input parameters:
//   - EXTERNAL_ID_STRING_SIZE: u16 = The size of external ID, MUST be UniqueIdentifierSurrogate.EXTERNAL_ID_LENGTH

mod platform_consts;
mod nullable_string_${EXTERNAL_ID_STRING_SIZE};

use platform_consts::BYTE_BITS;
use platform_consts::U128_BITS;
use platform_consts::U128_BYTES;

use nullable_string_${EXTERNAL_ID_STRING_SIZE}::NullableString_${EXTERNAL_ID_STRING_SIZE};
use nullable_string_${EXTERNAL_ID_STRING_SIZE}::SerializedNullableString_${EXTERNAL_ID_STRING_SIZE};
use nullable_string_${EXTERNAL_ID_STRING_SIZE}::NULLABLE_STRING_${EXTERNAL_ID_STRING_SIZE}_LENGTH;

// UniqueIdentifier lengths
const UNIQUE_IDENTIFIER_EXTERNAL_ID_LENGTH: u16 = NULLABLE_STRING_${EXTERNAL_ID_STRING_SIZE}_LENGTH;
const UNIQUE_IDENTIFIER_ID_LENGTH: u16 = platform_consts::U128_BYTES;

// UniqueIdentifier offsets
const UNIQUE_IDENTIFIER_EXTERNAL_ID_OFFSET: u16 = 0;
const UNIQUE_IDENTIFIER_ID_OFFSET: u16
    = UNIQUE_IDENTIFIER_EXTERNAL_ID_OFFSET
    + UNIQUE_IDENTIFIER_EXTERNAL_ID_LENGTH;
const UNIQUE_IDENTIFIER_LENGTH: u16
    = UNIQUE_IDENTIFIER_ID_OFFSET
    + UNIQUE_IDENTIFIER_ID_LENGTH;

type SerializedUniqueIdentifier = [u8; UNIQUE_IDENTIFIER_LENGTH];

// Define type alias, to make the rest of the template cleaner
type ExternalId = NullableString_${EXTERNAL_ID_STRING_SIZE};

struct UniqueIdentifier {
    external_id: ExternalId,
    id: u128,
}

impl UniqueIdentifier {
    fn zero() -> UniqueIdentifier {
        UniqueIdentifier {
            external_id: ExternalId::empty(),
            id: 0 as u128,
        }
    }

    fn equals(this: UniqueIdentifier, that: UniqueIdentifier) -> bool {
        this.id == that.id
    }

    fn _extract_external_id(serialized_uid: SerializedUniqueIdentifier) -> ExternalId {
        let mut result = [0; UNIQUE_IDENTIFIER_EXTERNAL_ID_LENGTH];
        for i in 0..UNIQUE_IDENTIFIER_EXTERNAL_ID_LENGTH {
            result[i] = serialized_uid[i + UNIQUE_IDENTIFIER_EXTERNAL_ID_OFFSET];
        }
        ExternalId::deserialize(result)
    }

    fn _parse_u128(bytes: SerializedUniqueIdentifier, offset: u16) -> u128 {
        let mut bits = [false; U128_BITS];
        for i in 0..U128_BYTES {
            let pre_bits = std::convert::to_bits(bytes[i + offset]);

            for j in 0..BYTE_BITS {
                bits[i * BYTE_BITS + j] = pre_bits[j];
            }
        }
        std::convert::from_bits_unsigned(bits)
    }

    fn deserialize(serialized_uid: SerializedUniqueIdentifier) -> UniqueIdentifier {
        UniqueIdentifier {
            external_id: _extract_external_id(serialized_uid),
            id: _parse_u128(serialized_uid, UNIQUE_IDENTIFIER_ID_OFFSET),
        }
    }
}
