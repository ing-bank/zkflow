mod consts;
mod platform_consts;
mod platform_node_digest_dto;
mod platform_privacy_salt;
mod platform_component_group_leaf_digest_dto;
mod platform_component_group_enum;
mod platform_crypto_utils;
mod platform_nonce_digest_dto;
mod platform_party;
mod platform_pub_key;
mod platform_zk_prover_transaction;

use platform_zk_prover_transaction::ZKProverTransaction;
use platform_crypto_utils::pedersen_to_padded_bits;
use platform_crypto_utils::concatenate_node_digests;
use platform_crypto_utils::concatenate_component_group_leaf_digests;
use std::crypto::pedersen;
// use platform_pub_key::PubKey;
// use platform_party::Party;
// use platform_consts::U32_BITS;
// use platform_consts::BYTE_BITS;
use platform_consts::COMPONENT_GROUPS_SIZE;
use platform_node_digest_dto::NodeDigestBits;
// use std::convert::to_bits;
// use platform_component_group_enum::ComponentGroupEnum;
// use platform_component_group_leaf_digest_dto::COMPONENT_GROUP_LEAF_DIGEST_BITS;
use platform_component_group_leaf_digest_dto::ComponentGroupLeafDigestBits;
use platform_component_group_leaf_digest_dto::ComponentGroupLeafDigestDto;
// use platform_privacy_salt::PrivacySaltBits;
use platform_node_digest_dto::NodeDigestDto;
use platform_node_digest_dto::NODE_DIGEST_BITS;
// use consts::ATTACHMENT_GROUP_SIZE;
// use platform_crypto_utils::compute_nonce;
// use platform_nonce_digest_dto::NONCE_DIGEST_BITS;
// use std::crypto::blake2s;//! GENERATED CODE. DO NOT EDIT

//! Edit it in zinc-platform-sources/build.gradle.kts


//! Merkle tree construction for NodeDigestBits
fn get_merkle_tree_from_2_node_digests(leaves: [NodeDigestBits; 2]) -> NodeDigestBits {
    dbg!("Consuming 2 leaves");
    dbg!("0: {}", NodeDigestDto::from_bits_to_bytes(leaves[0]));
    dbg!("1: {}", NodeDigestDto::from_bits_to_bytes(leaves[1]));
    pedersen_to_padded_bits(pedersen(concatenate_node_digests(leaves[0], leaves[1])).0)
}

fn get_merkle_tree_from_4_node_digests(leaves: [NodeDigestBits; 4]) -> NodeDigestBits {
    dbg!("Consuming 4 leaves");
    let mut new_leaves = [[false; NODE_DIGEST_BITS]; 2];
    for i in 0..2 {
        new_leaves[i] = pedersen_to_padded_bits(
            pedersen(concatenate_node_digests(leaves[2 * i], leaves[2 * i + 1])).0,
        );
        dbg!(
            "{}: {}",                                         // dbg!
            2 * i,                                            // dbg!
            NodeDigestDto::from_bits_to_bytes(leaves[2 * i])  // dbg!
        ); //dbg!
        dbg!(
            "{}: {}",                                             // dbg!
            2 * i + 1,                                            // dbg!
            NodeDigestDto::from_bits_to_bytes(leaves[2 * i + 1])  // dbg!
        ); // dbg!
        dbg!(
            "Digest: {}",                                     // dbg!
            NodeDigestDto::from_bits_to_bytes(new_leaves[i])  // dbg!
        ); // dbg!
    }
    dbg!("");
    get_merkle_tree_from_2_node_digests(new_leaves)
}

fn get_merkle_tree_from_8_node_digests(leaves: [NodeDigestBits; 8]) -> NodeDigestBits {
    dbg!("Consuming 8 leaves");
    let mut new_leaves = [[false; NODE_DIGEST_BITS]; 4];
    for i in 0..4 {
        new_leaves[i] = pedersen_to_padded_bits(
            pedersen(concatenate_node_digests(leaves[2 * i], leaves[2 * i + 1])).0,
        );
        dbg!(
            "{}: {}",                                         // dbg!
            2 * i,                                            // dbg!
            NodeDigestDto::from_bits_to_bytes(leaves[2 * i])  // dbg!
        ); //dbg!
        dbg!(
            "{}: {}",                                             // dbg!
            2 * i + 1,                                            // dbg!
            NodeDigestDto::from_bits_to_bytes(leaves[2 * i + 1])  // dbg!
        ); // dbg!
        dbg!(
            "Digest: {}",                                     // dbg!
            NodeDigestDto::from_bits_to_bytes(new_leaves[i])  // dbg!
        ); // dbg!
    }
    dbg!("");
    get_merkle_tree_from_4_node_digests(new_leaves)
}

fn get_merkle_tree_from_16_node_digests(leaves: [NodeDigestBits; 16]) -> NodeDigestBits {
    dbg!("Consuming 16 leaves");
    let mut new_leaves = [[false; NODE_DIGEST_BITS]; 8];
    for i in 0..8 {
        new_leaves[i] = pedersen_to_padded_bits(
            pedersen(concatenate_node_digests(leaves[2 * i], leaves[2 * i + 1])).0,
        );
        dbg!(
            "{}: {}",                                         // dbg!
            2 * i,                                            // dbg!
            NodeDigestDto::from_bits_to_bytes(leaves[2 * i])  // dbg!
        ); //dbg!
        dbg!(
            "{}: {}",                                             // dbg!
            2 * i + 1,                                            // dbg!
            NodeDigestDto::from_bits_to_bytes(leaves[2 * i + 1])  // dbg!
        ); // dbg!
        dbg!(
            "Digest: {}",                                     // dbg!
            NodeDigestDto::from_bits_to_bytes(new_leaves[i])  // dbg!
        ); // dbg!
    }
    dbg!("");
    get_merkle_tree_from_8_node_digests(new_leaves)
}

/// Merkle tree construction for ComponentGroupLeafDigestBits.
/// Use it only for the computation of a component sub-Merkle tree from component group leaf hashes.
fn get_merkle_tree_from_2_component_group_leaf_digests(
    leaves: [ComponentGroupLeafDigestBits; 2],
) -> NodeDigestBits {
    dbg!("Consuming 2 leaves");
    dbg!(
        "0: {}",                                                    // dbg!
        ComponentGroupLeafDigestDto::from_bits_to_bytes(leaves[0])  // dbg!
    ); //dbg!
    dbg!(
        "1: {}",                                                    // dbg!
        ComponentGroupLeafDigestDto::from_bits_to_bytes(leaves[1])  // dbg!
    ); // dbg!
    pedersen_to_padded_bits(
        pedersen(concatenate_component_group_leaf_digests(
            leaves[0], leaves[1],
        ))
        .0,
    )
}

fn get_merkle_tree_from_4_component_group_leaf_digests(
    leaves: [ComponentGroupLeafDigestBits; 4],
) -> NodeDigestBits {
    dbg!("Consuming 4 leaves");
    let mut new_leaves = [[false; NODE_DIGEST_BITS]; 2];
    for i in 0..2 {
        new_leaves[i] = pedersen_to_padded_bits(
            pedersen(concatenate_component_group_leaf_digests(
                leaves[2 * i],
                leaves[2 * i + 1],
            ))
            .0,
        );
        dbg!(
            "{}: {}",                                                       // dbg!
            2 * i,                                                          // dbg!
            ComponentGroupLeafDigestDto::from_bits_to_bytes(leaves[2 * i])  // dbg!
        ); // dbg!
        dbg!(
            "{}: {}",                                                           // dbg!
            2 * i + 1,                                                          // dbg!
            ComponentGroupLeafDigestDto::from_bits_to_bytes(leaves[2 * i + 1])  // dbg!
        ); // dbg!
        dbg!(
            "Digest: {}",                                                   // dbg!
            ComponentGroupLeafDigestDto::from_bits_to_bytes(new_leaves[i])  // dbg!
        ); // dbg!
    }
    dbg!("");
    get_merkle_tree_from_2_node_digests(new_leaves)
}

fn get_merkle_tree_from_8_component_group_leaf_digests(
    leaves: [ComponentGroupLeafDigestBits; 8],
) -> NodeDigestBits {
    dbg!("Consuming 8 leaves");
    let mut new_leaves = [[false; NODE_DIGEST_BITS]; 4];
    for i in 0..4 {
        new_leaves[i] = pedersen_to_padded_bits(
            pedersen(concatenate_component_group_leaf_digests(
                leaves[2 * i],
                leaves[2 * i + 1],
            ))
            .0,
        );
        dbg!(
            "{}: {}",                                                       // dbg!
            2 * i,                                                          // dbg!
            ComponentGroupLeafDigestDto::from_bits_to_bytes(leaves[2 * i])  // dbg!
        ); // dbg!
        dbg!(
            "{}: {}",                                                           // dbg!
            2 * i + 1,                                                          // dbg!
            ComponentGroupLeafDigestDto::from_bits_to_bytes(leaves[2 * i + 1])  // dbg!
        ); // dbg!
        dbg!(
            "Digest: {}",                                                   // dbg!
            ComponentGroupLeafDigestDto::from_bits_to_bytes(new_leaves[i])  // dbg!
        ); // dbg!
    }
    dbg!("");
    get_merkle_tree_from_4_node_digests(new_leaves)
}

fn get_merkle_tree_from_16_component_group_leaf_digests(
    leaves: [ComponentGroupLeafDigestBits; 16],
) -> NodeDigestBits {
    dbg!("Consuming 16 leaves");
    let mut new_leaves = [[false; NODE_DIGEST_BITS]; 8];
    for i in 0..8 {
        new_leaves[i] = pedersen_to_padded_bits(
            pedersen(concatenate_component_group_leaf_digests(
                leaves[2 * i],
                leaves[2 * i + 1],
            ))
            .0,
        );
        dbg!(
            "{}: {}",                                                       // dbg!
            2 * i,                                                          // dbg!
            ComponentGroupLeafDigestDto::from_bits_to_bytes(leaves[2 * i])  // dbg!
        ); // dbg!
        dbg!(
            "{}: {}",                                                           // dbg!
            2 * i + 1,                                                          // dbg!
            ComponentGroupLeafDigestDto::from_bits_to_bytes(leaves[2 * i + 1])  // dbg!
        ); // dbg!
        dbg!(
            "Digest: {}",                                                   // dbg!
            ComponentGroupLeafDigestDto::from_bits_to_bytes(new_leaves[i])  // dbg!
        ); // dbg!
    }
    dbg!("");
    get_merkle_tree_from_8_node_digests(new_leaves)
}
