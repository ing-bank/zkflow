//!
//! EXAMPLE DOCUMENT FOR CONTRACT RULES VALIDATION
//! PLEASE IMPLEMENT NECESSARY CHECKS FOR THE ZKDAPP CONTRACT
//!

fn check_contract_rules(value: ZKProverTransaction) {
    // Validate the number of commands
    assert!(
        COMMAND_GROUP_SIZE == (1 as u16),
        "Failed requirement: the tx has only one command"
    );

    // Validate the number of outputs
    let mut input_size: u16 = 0;
    for i in 0..INPUT_GROUP_SIZE {
        if !value.inputs.components[i].is_filler {
            input_size = input_size + (1 as u16);
        }
    }

    assert!(
        input_size == (1 as u16),
        "Failed requirement: the tx has only one input"
    );

    // Validate the number of outputs
    let mut output_size: u16 = 0;
    for i in 0..OUTPUT_GROUP_SIZE {
        if !value.outputs.components[i].is_filler {
            output_size = output_size + (1 as u16);
        }
    }

    assert!(
        output_size == (1 as u16),
        "Failed requirement: the tx has only one output"
    );

    // Check if inputs total is equal to outputs total
    let mut input_value_sum: i32 = 0;
    let mut output_value_sum: i32 = 0;

    for i in 0..INPUT_GROUP_SIZE {
        if !value.inputs.components[i].is_filler {
            input_value_sum = input_value_sum + value.inputs.components[i].content.state.data.value;
        }
    }

    for i in 0..OUTPUT_GROUP_SIZE {
        if !value.outputs.components[i].is_filler {
            output_value_sum = output_value_sum + value.outputs.components[i].content.data.value;
        }
    }

    assert!(
        input_value_sum == output_value_sum,
        "Failed requirement: the total value of the inputs and outputs should be equal"
    );
}
