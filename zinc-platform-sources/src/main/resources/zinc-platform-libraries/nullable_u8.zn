const NULLABLE_U8_LENGTH: u16 = 2 as u16;

type SerializedNullableU8 = [u8; NULLABLE_U8_LENGTH];

struct NullableU8 {
    is_null: bool,
    inner: u8,
}

impl NullableU8 {
    fn null() -> NullableU8 {
        NullableU8 {
            is_null: true,
            inner: 0 as u8,
        }
    }

    fn non_null(value: u8) -> NullableU8 {
        NullableU8 {
            is_null: false,
            inner: value,
        }
    }

    fn equals(this: NullableU8, that: NullableU8) -> bool {
        if this.is_null == that.is_null {
            if this.is_null {
                true
            } else {
                this.inner == that.inner
            }
        } else {
            false
        }
    }

    fn deserialize(serialized: SerializedNullableU8) -> NullableU8 {
        let is_null = serialized[0] == 0;

        let inner = if !is_null {
            serialized[1]
        } else {
            0 as u8
        };

        NullableU8 {
            is_null: is_null,
            inner: inner,
        }
    }
}