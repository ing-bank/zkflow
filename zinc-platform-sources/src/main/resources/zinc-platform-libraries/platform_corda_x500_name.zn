// @FixedLength([CordaX500Name.MAX_LENGTH_COMMON_NAME])
// val commonName: String?,
// @FixedLength([CordaX500Name.MAX_LENGTH_ORGANISATION_UNIT])
// val organisationUnit: String?,
// @FixedLength([CordaX500Name.MAX_LENGTH_ORGANISATION])
// val organisation: String,
// @FixedLength([CordaX500Name.MAX_LENGTH_LOCALITY])
// val locality: String,
// @FixedLength([CordaX500Name.MAX_LENGTH_STATE])
// val state: String?,
// // Country codes are defined in ISO 3166 and are all 2-letter abbreviations.
// @FixedLength([LENGTH_COUNTRY = 2])
// val country: String

mod platform_consts;

use platform_consts::NULLABILITY_BYTES;
use platform_consts::CHAR_BYTES;
use platform_consts::LIST_LENGTH_PREFIX;

const MAX_LENGTH_COMMON_NAME: u16 = 64;
const MAX_LENGTH_ORGANISATION_UNIT: u16 = 64;
const MAX_LENGTH_ORGANISATION: u16 = 128;
const MAX_LENGTH_LOCALITY: u16 = 64;
const MAX_LENGTH_STATE: u16 = 64;
const LENGTH_COUNTRY: u16 = 2;
const CORDA_X500_NAME_LENGTH: u16 =
    LIST_LENGTH_PREFIX + MAX_LENGTH_ORGANISATION  +
    LIST_LENGTH_PREFIX + MAX_LENGTH_LOCALITY  +
    LIST_LENGTH_PREFIX + LENGTH_COUNTRY;

//! CordaX500Name is not deserialized into individual components, but only ensured
//! that the respective byte array is of the right size.
//! Deserialization to individual components will be added when required.
struct CordaX500Name {
    name: [u8; CORDA_X500_NAME_LENGTH]
}

impl CordaX500Name {
    fn empty() -> CordaX500Name {
        CordaX500Name {
            name: [0; CORDA_X500_NAME_LENGTH],
        }
    }

    fn equals(this: CordaX500Name, that: CordaX500Name) -> bool {
        let mut are_equal = true;
        for i in 0..CORDA_X500_NAME_LENGTH while are_equal {
            are_equal = this.name[i] == that.name[i];
        }
        are_equal
    }

    fn deserialize(serialized_name: [u8; CORDA_X500_NAME_LENGTH]) -> CordaX500Name {
        CordaX500Name {
            name: serialized_name,
        }
    }
}
