//    val seconds: Long,
//    val nanos: Int

mod platform_consts;

use platform_consts::U32_BYTES;
use platform_consts::U64_BYTES;

//! Duration field byte sizes
const DURATION_SECONDS_LENGTH: u16 = U64_BYTES;
const DURATION_NANOS_LENGTH: u16 = U32_BYTES;

//! Duration field offsets
const DURATION_SECONDS_OFFSET: u16 = 0;
const DURATION_NANOS_OFFSET: u16
    = DURATION_SECONDS_OFFSET
    + DURATION_SECONDS_LENGTH;
const DURATION_LENGTH: u16
    = DURATION_NANOS_OFFSET
    + DURATION_NANOS_LENGTH;

type SerializedDuration = [u8; DURATION_LENGTH];

struct Duration {
    seconds: u64,
    nanos: u32,
}

impl Duration {
    fn zero() -> Duration {
        Duration { seconds: 0 as u64, nanos: 0 as u32 }
    }

    fn _extract_u32(serialized_duration: SerializedDuration, offset: u16) -> u32 {
        let mut result: u32 = 0;
        for i in 0..U32_BYTES {
            result = result * 256 as u32 + serialized_duration[i + offset] as u32;
        }
        result
    }

    fn _extract_u64(serialized_duration: SerializedDuration, offset: u16) -> u64 {
        let mut result: u64 = 0;
        for i in 0..U64_BYTES {
            result = result * 256 as u64 + serialized_duration[i + offset] as u64;
        }
        result
    }

    fn deserialize(serialized_duration: SerializedDuration) -> Duration {
        Duration {
            seconds: _extract_u64(serialized_duration, DURATION_SECONDS_OFFSET),
            nanos: _extract_u32(serialized_duration, DURATION_NANOS_OFFSET),
        }
    }
}
