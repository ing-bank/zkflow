mod consts;
mod merkle_utils;
mod platform_consts;
mod platform_node_digest_dto;
mod platform_privacy_salt;
mod platform_component_group_leaf_digest_dto;
mod platform_component_group_enum;
mod platform_crypto_utils;
mod platform_nonce_digest_dto;
mod platform_party;
mod platform_pub_key;

use merkle_utils::get_merkle_tree_from_${GROUP_SIZE_PLACEHOLDER}_component_group_leaf_digests;
use platform_pub_key::PubKey;
use platform_party::Party;
use platform_consts::U32_BITS;
use platform_consts::BYTE_BITS;
use platform_node_digest_dto::NodeDigestBits;
use std::convert::to_bits;
use platform_component_group_enum::ComponentGroupEnum;
use platform_component_group_leaf_digest_dto::COMPONENT_GROUP_LEAF_DIGEST_BITS;
use platform_component_group_leaf_digest_dto::ComponentGroupLeafDigestBits;
use platform_privacy_salt::PrivacySaltBits;
use platform_node_digest_dto::NodeDigestDto;
use platform_node_digest_dto::NODE_DIGEST_BITS;
use consts::ATTACHMENT_GROUP_SIZE;
use platform_crypto_utils::compute_nonce;
use platform_nonce_digest_dto::NONCE_DIGEST_BITS;
use std::crypto::blake2s;

const TIME_WINDOW_BYTES: u16 = 24;

const TIME_WINDOW_FINGERPRINT_BYTES: u16 = 24;
const TIME_WINDOW_FINGERPRINT_BITS: u16 = TIME_WINDOW_FINGERPRINT_BYTES * BYTE_BITS;

type TimeWindowBytes = [u8; TIME_WINDOW_BYTES];
type TimeWindowFingerprintBits = [bool; TIME_WINDOW_FINGERPRINT_BITS];

struct TimeWindow {
    bytes: TimeWindowBytes,
}

impl TimeWindow {
    fn fingerprint(this: TimeWindow) -> TimeWindowFingerprintBits {
        let mut fingerprint_bits = [false; TIME_WINDOW_FINGERPRINT_BITS];

        for i in (0 as u16)..TIME_WINDOW_FINGERPRINT_BYTES {
            let bits = to_bits(this.bytes[i]);
            for j in (0 as u16)..BYTE_BITS {
                fingerprint_bits[BYTE_BITS * i + j] = bits[j];
            }
        }
        fingerprint_bits
    }

    fn compute_leaf_hash(
        this: TimeWindow,
        privacy_salt: PrivacySaltBits,
        group_index: u32,
        internal_index: u32,
    ) -> ComponentGroupLeafDigestBits {
        //fingerprint
        let fingerprint_time_window = fingerprint(this);

        //compute nonce
        let mut nonce = compute_nonce(privacy_salt, group_index, internal_index);
        let mut message = [false; NONCE_DIGEST_BITS + TIME_WINDOW_FINGERPRINT_BITS];

        //message = nonce || signature
        for i in 0..NONCE_DIGEST_BITS {
            message[i] = nonce[i];
        }
        for i in 0..TIME_WINDOW_FINGERPRINT_BITS {
            message[NONCE_DIGEST_BITS + i] = fingerprint_time_window[i];
        }

        blake2s(message)
    }
}

struct TimeWindowPaddingWrapper {
    content: TimeWindow,
    is_filler: bool,
}

struct TimeWindowComponentGroup {
    component: TimeWindowPaddingWrapper,
    group_hash: NodeDigestDto,
}

impl TimeWindowComponentGroup {
    fn compute_component_group_hash(
        this: TimeWindowComponentGroup,
        privacy_salt: PrivacySaltBits,
    ) -> NodeDigestBits {
        let component_leaf_hash = TimeWindow::compute_leaf_hash(
            this.component.content,
            privacy_salt,
            ComponentGroupEnum::TIMEWINDOW_GROUP as u32,
            0 as u32,
        );
        // ### CALL APPROPRIATE MERKLE TREE FUNCTION ###
    }
}
