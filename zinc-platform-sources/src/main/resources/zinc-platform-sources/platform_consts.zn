const BYTE_BITS: u16 = 8;

const U16_BYTES: u16 = 2;
const U16_BITS: u16 = U16_BYTES * BYTE_BITS;

const U32_BYTES: u16 = 4;
const U32_BITS: u16 = U32_BYTES * BYTE_BITS;

const U64_BYTES: u16 = 8;
const U64_BITS: u16 = U32_BYTES * BYTE_BITS;

const U128_BYTES: u16 = 16;
const U128_BITS: u16 = U128_BYTES * BYTE_BITS;

const BLAKE2S_DIGEST_BYTES: u16 = 32;

const COMPONENT_GROUP_LEAF_DIGEST_BYTES: u16 = BLAKE2S_DIGEST_BYTES;
const COMPONENT_GROUP_LEAF_DIGEST_BITS: u16 = COMPONENT_GROUP_LEAF_DIGEST_BYTES * BYTE_BITS;

const PEDERSEN_DIGEST_BYTES: u16 = 32;

const NODE_DIGEST_BYTES: u16 = PEDERSEN_DIGEST_BYTES;
const NODE_DIGEST_BITS: u16 = NODE_DIGEST_BYTES * BYTE_BITS;

const COMPONENT_GROUPS_SIZE: u16 = 9;

fn deserialize_u16(bytes: [u8; U16_BYTES]) -> u16 {
    let mut result: u16 = 0;
    for i in 0..U16_BYTES {
        result = result * 256 as u16 + bytes[i] as u16;
    }
    result
}


fn deserialize_u32(bytes: [u8; U32_BYTES]) -> u32 {
    let mut result: u32 = 0;
    for i in 0..U32_BYTES {
        result = result * 256 as u32 + bytes[i] as u32;
    }
    result
}


fn deserialize_u64(bytes: [u8; U64_BYTES]) -> u64 {
    let mut result: u64 = 0;
    for i in 0..U64_BYTES {
        result = result * 256 as u64 + bytes[i] as u64;
    }
    result
}

fn deserialize_u128(bytes: [u8; U128_BYTES]) -> u128 {
    let mut result: u128 = 0;
    for i in 0..U128_BYTES {
        result = result * 256 as u128 + bytes[i] as u128;
    }
    result
}
