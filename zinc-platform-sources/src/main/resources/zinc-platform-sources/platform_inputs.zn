mod platform_state_and_ref;
mod merkle_utils;
mod consts;
mod platform_node_digest_dto;
mod platform_privacy_salt;
mod platform_component_group_leaf_digest_dto;
mod platform_component_group_enum;

use merkle_utils::get_merkle_tree_from_${GROUP_SIZE_PLACEHOLDER}_component_group_leaf_digests;
use platform_node_digest_dto::NodeDigestBits;
use platform_component_group_enum::ComponentGroupEnum;
use platform_component_group_leaf_digest_dto::COMPONENT_GROUP_LEAF_DIGEST_BITS;
use platform_component_group_leaf_digest_dto::ComponentGroupLeafDigestBits;
use platform_privacy_salt::PrivacySaltBits;
use platform_node_digest_dto::NodeDigestDto;
use platform_node_digest_dto::NODE_DIGEST_BITS;
use consts::INPUT_GROUP_SIZE;
use platform_state_and_ref::StateAndRefPaddingWrapper;
use platform_state_and_ref::StateRef;

struct InputsComponentGroup {
    components: [StateAndRefPaddingWrapper; INPUT_GROUP_SIZE],
    group_hash: NodeDigestDto,
}

impl InputsComponentGroup {
    fn compute_leaf_hashes(
        this: InputsComponentGroup,
        privacy_salt: PrivacySaltBits,
    ) -> [ComponentGroupLeafDigestBits; INPUT_GROUP_SIZE] {
        let mut component_leaf_hashes =
            [[false; COMPONENT_GROUP_LEAF_DIGEST_BITS]; INPUT_GROUP_SIZE];

        for i in (0 as u32)..(INPUT_GROUP_SIZE as u32) {
            component_leaf_hashes[i] = StateRef::compute_leaf_hash(
                this.components[i].content.reference,
                privacy_salt,
                ComponentGroupEnum::INPUTS_GROUP as u32,
                i as u32,
            );
        }
        component_leaf_hashes
    }

    fn compute_component_group_hash(
        this: InputsComponentGroup,
        privacy_salt: PrivacySaltBits,
    ) -> NodeDigestBits {
        // ### CALL APPROPRIATE MERKLE TREE FUNCTION ###
    }
}
