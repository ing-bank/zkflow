mod consts;
mod merkle_utils;
mod platform_component_group_leaf_digest_dto;
mod platform_component_group_enum;
mod platform_consts;
mod platform_crypto_utils;
mod platform_node_digest_dto;
mod platform_privacy_salt;

use consts::SIGNER_COMPONENT_SIZE;
use merkle_utils::get_merkle_tree_from_${GROUP_SIZE_PLACEHOLDER}_component_group_leaf_digests;
use platform_component_group_enum::ComponentGroupEnum;
use platform_component_group_leaf_digest_dto::COMPONENT_GROUP_LEAF_DIGEST_BITS;
use platform_component_group_leaf_digest_dto::ComponentGroupLeafDigestBits;
use platform_consts::SIGNER_GROUP_SIZE;
use platform_consts::BYTE_BITS;
use platform_crypto_utils::compute_nonce;
use platform_node_digest_dto::NodeDigestBits;
use platform_node_digest_dto::NODE_DIGEST_BITS;
use platform_privacy_salt::PrivacySaltBits;
use std::convert::to_bits;
use std::crypto::blake2s_multi_input;

type SerializedSigner = [u8; SIGNER_COMPONENT_SIZE];
type SerializedSignerGroup = [SerializedSigner; SIGNER_GROUP_SIZE];

const SIGNER_COMPONENT_SIZE_BITS: u16 = SIGNER_COMPONENT_SIZE * BYTE_BITS;

fn bytes_to_bits(bytes: [u8; SIGNER_COMPONENT_SIZE]) -> [bool; SIGNER_COMPONENT_SIZE_BITS] {
    let mut bits = [false; SIGNER_COMPONENT_SIZE_BITS];

    for i in (0 as u16)..SIGNER_COMPONENT_SIZE {
        let byte_bits = to_bits(bytes[i]);
        for j in (0 as u16)..BYTE_BITS {
            bits[BYTE_BITS * i + j] = byte_bits[j];
        }
    }
    bits
}

fn compute_leaf_hashes(
    components: SerializedSignerGroup,
    privacy_salt: PrivacySaltBits,
) -> [ComponentGroupLeafDigestBits; SIGNER_GROUP_SIZE] {
    let mut component_leaf_hashes =
        [[false; COMPONENT_GROUP_LEAF_DIGEST_BITS]; SIGNER_GROUP_SIZE];

    for i in (0 as u32)..(SIGNER_GROUP_SIZE as u32) {
        component_leaf_hashes[i] = blake2s_multi_input(
            compute_nonce(privacy_salt, ComponentGroupEnum::SIGNERS_GROUP as u32, i as u32),
            bytes_to_bits(components[i]),
        )
    }
    component_leaf_hashes
}

fn compute_signers_group_hash(
    components: SerializedSignerGroup,
    privacy_salt: PrivacySaltBits,
) -> NodeDigestBits {
    // ### CALL APPROPRIATE MERKLE TREE FUNCTION ###
}