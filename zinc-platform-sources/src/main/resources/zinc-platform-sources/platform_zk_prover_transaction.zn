mod platform_components_inputs;
mod platform_components_outputs;
mod platform_components_references;
mod platform_components_commands;
mod platform_components_notary;
mod platform_components_attachments;
mod platform_components_time_window;
mod platform_components_parameters;
mod platform_components_signers;
mod platform_privacy_salt;
mod platform_nonce_digest_dto;
mod consts;

use consts::INPUT_GROUP_SIZE;
use consts::REFERENCE_GROUP_SIZE;
use platform_components_inputs::InputsComponentGroup;
use platform_components_outputs::OutputsComponentGroup;
use platform_components_references::ReferencesComponentGroup;
use platform_components_commands::CommandsComponentGroup;
use platform_components_notary::NotaryComponentGroup;
use platform_components_attachments::AttachmentsComponentGroup;
use platform_components_time_window::TimeWindowComponentGroup;
use platform_components_parameters::ParametersComponentGroup;
use platform_components_signers::SignersComponentGroup;
use platform_privacy_salt::PrivacySalt;
use platform_nonce_digest_dto::NonceDigestDto;

struct ZKProverTransaction {
    inputs: InputsComponentGroup,
    outputs: OutputsComponentGroup,
    references: ReferencesComponentGroup,
    commands: CommandsComponentGroup,
    attachments: AttachmentsComponentGroup,
    notary: NotaryComponentGroup,
    time_window: TimeWindowComponentGroup,
    parameters: ParametersComponentGroup,
    signers: SignersComponentGroup,
    privacy_salt: PrivacySalt,
}

struct Witness {
    transaction: ZKProverTransaction,
    input_nonces: [NonceDigestDto; INPUT_GROUP_SIZE],
    reference_nonces: [NonceDigestDto; REFERENCE_GROUP_SIZE],
}
