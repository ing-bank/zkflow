mod nullable_u8;
mod nullable_i8;
mod nullable_u16;
mod nullable_i16;
mod nullable_u32;
mod nullable_i32;
mod nullable_u64;
mod nullable_i64;
mod nullable_u128;
mod nullable_i128;

use nullable_u8::NULLABLE_U8_LENGTH;
use nullable_u16::NULLABLE_U16_LENGTH;
use nullable_u32::NULLABLE_U32_LENGTH;
use nullable_u64::NULLABLE_U64_LENGTH;
use nullable_u128::NULLABLE_U128_LENGTH;

use nullable_u8::NullableU8;
use nullable_u16::NullableU16;
use nullable_u32::NullableU32;
use nullable_u64::NullableU64;
use nullable_u128::NullableU128;

use nullable_i8::NullableI8;
use nullable_i16::NullableI16;
use nullable_i32::NullableI32;
use nullable_i64::NullableI64;
use nullable_i128::NullableI128;

struct Data {
    i_8: NullableI8,
    u_8: NullableU8,
    i_16: NullableI16,
    u_16: NullableU16,
    i_32: NullableI32,
    u_32: NullableU32,
    i_64: NullableI64,
    u_64: NullableU64,
    i_128: NullableI128,
    u_128: NullableU128,
}

const WITNESS_LENGTH: u16 = 72;
type Witness = [u8; WITNESS_LENGTH];

fn _extract_8_bit_bytes(witness: Witness, offset: u16) -> [u8; NULLABLE_U8_LENGTH] {
    let mut out = [0; NULLABLE_U8_LENGTH];
    for i in 0..NULLABLE_U8_LENGTH {
        out[i] = witness[i + offset];
    }
    out
}

fn _extract_16_bit_bytes(witness: Witness, offset: u16) -> [u8; NULLABLE_U16_LENGTH] {
    let mut out = [0; NULLABLE_U16_LENGTH];
    for i in 0..NULLABLE_U16_LENGTH {
        out[i] = witness[i + offset];
    }
    out
}

fn _extract_32_bit_bytes(witness: Witness, offset: u16) -> [u8; NULLABLE_U32_LENGTH] {
    let mut out = [0; NULLABLE_U32_LENGTH];
    for i in 0..NULLABLE_U32_LENGTH {
        out[i] = witness[i + offset];
    }
    out
}

fn _extract_64_bit_bytes(witness: Witness, offset: u16) -> [u8; NULLABLE_U64_LENGTH] {
    let mut out = [0; NULLABLE_U64_LENGTH];
    for i in 0..NULLABLE_U64_LENGTH {
        out[i] = witness[i + offset];
    }
    out
}

fn _extract_128_bit_bytes(witness: Witness, offset: u16) -> [u8; NULLABLE_U128_LENGTH] {
    let mut out = [0; NULLABLE_U128_LENGTH];
    for i in 0..NULLABLE_U128_LENGTH {
        out[i] = witness[i + offset];
    }
    out
}

fn main(witness: Witness) -> Data {
    Data {
        i_8: NullableI8::deserialize(_extract_8_bit_bytes(witness, 0 as u16)),
        u_8: NullableU8::deserialize(_extract_8_bit_bytes(witness, 2 as u16)),
        i_16: NullableI16::deserialize(_extract_16_bit_bytes(witness, 4 as u16)),
        u_16: NullableU16::deserialize(_extract_16_bit_bytes(witness, 7 as u16)),
        i_32: NullableI32::deserialize(_extract_32_bit_bytes(witness, 10 as u16)),
        u_32: NullableU32::deserialize(_extract_32_bit_bytes(witness, 15 as u16)),
        i_64: NullableI64::deserialize(_extract_64_bit_bytes(witness, 20 as u16)),
        u_64: NullableU64::deserialize(_extract_64_bit_bytes(witness, 29 as u16)),
        i_128: NullableI128::deserialize(_extract_128_bit_bytes(witness, 38 as u16)),
        u_128: NullableU128::deserialize(_extract_128_bit_bytes(witness, 55 as u16)),
    }
}
