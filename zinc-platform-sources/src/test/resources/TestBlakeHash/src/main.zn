//!
//! The 'TestBlakeHash' main module.
//!

use std::crypto::blake2s;
use std::convert::to_bits;
use std::array::pad;
use std::array::reverse;

const HASH_DIGEST_SIZE: u16 = 256;
const INT32_SIZE: u16 = 32;

//Return in bool to check big/little endianness
fn main(preimage: [u8; 4]) -> [u8; 32] {

    let mut preimage_bits = [false; 32];
    for i in 0..4 {
        let pre_bits = to_bits(preimage[i]);
        dbg!("pos = {}, byte = {}", i, std::convert::from_bits_unsigned(pre_bits));

        for j in 0..8 {
            preimage_bits[i * 8 + j] = pre_bits[j];
        }
    }

    let digest_bits = blake2s(preimage_bits);

    let mut digest = [0 as u8; 32];
    for i in 0..32 {
        let mut bits = [false; 8];
        for j in 0..8 {
            bits[j] = digest_bits[8 * i + j];
        }
        digest[i] = std::convert::from_bits_unsigned(bits);
    }

    digest
}