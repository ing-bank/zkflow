mod unique_identifier;

use unique_identifier::UniqueIdentifier;
use unique_identifier::UNIQUE_IDENTIFIER_LENGTH;
use unique_identifier::SerializedUniqueIdentifier;

const WITNESS_ITEMS_COUNT: u16 = 2;
const WITNESS_SIZE: u16 = WITNESS_ITEMS_COUNT * UNIQUE_IDENTIFIER_LENGTH;

fn extract_unique_identifier(witness: [u8; WITNESS_SIZE], offset: u16) -> UniqueIdentifier {
    let mut str: SerializedUniqueIdentifier = [0; UNIQUE_IDENTIFIER_LENGTH];
    for i in 0..UNIQUE_IDENTIFIER_LENGTH {
        str[i] = witness[i + offset];
    }
    UniqueIdentifier::deserialize(str)
}

fn main(witness: [u8; WITNESS_SIZE]) -> bool {
    let mut items: [UniqueIdentifier; WITNESS_ITEMS_COUNT] = [UniqueIdentifier::zero(); WITNESS_ITEMS_COUNT];
    for i in 0..WITNESS_ITEMS_COUNT {
        items[i] = extract_unique_identifier(witness, i * UNIQUE_IDENTIFIER_LENGTH);
    }
    UniqueIdentifier::equals(items[0], items[1])
}
