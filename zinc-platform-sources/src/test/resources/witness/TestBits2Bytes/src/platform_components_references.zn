mod consts;
mod merkle_tree_utils;
mod platform_component_group_leaf_digest_dto;
mod platform_component_group_enum;
mod platform_consts;
mod platform_crypto_utils;
mod platform_node_digest_dto;
mod platform_privacy_salt;

use consts::REFERENCE_GROUP_SIZE;
use merkle_tree_utils::get_merkle_tree_from_8_component_group_leaf_digests;
use platform_component_group_enum::ComponentGroupEnum;
use platform_component_group_leaf_digest_dto::COMPONENT_GROUP_LEAF_DIGEST_BITS;
use platform_component_group_leaf_digest_dto::ComponentGroupLeafDigestBits;
use platform_consts::REFERENCE_COMPONENT_SIZE;
use platform_consts::BYTE_BITS;
use platform_crypto_utils::compute_nonce;
use platform_node_digest_dto::NodeDigestBits;
use platform_node_digest_dto::NODE_DIGEST_BITS;
use platform_privacy_salt::PrivacySaltBits;
use std::convert::from_bits_unsigned;
use std::crypto::blake2s_multi_input;

const REFERENCE_COMPONENT_SIZE_BITS: u16 = REFERENCE_COMPONENT_SIZE * BYTE_BITS;

type SerializedReference = [bool; REFERENCE_COMPONENT_SIZE_BITS];
type SerializedReferenceGroup = [SerializedReference; REFERENCE_GROUP_SIZE];

fn bits_to_bytes(bits: SerializedReference) -> [u8; REFERENCE_COMPONENT_SIZE] {
    let mut bytes = [0 as u8; REFERENCE_COMPONENT_SIZE];

    for i in (0 as u16)..REFERENCE_COMPONENT_SIZE {
        let mut byte_bits = [false; BYTE_BITS];
        for j in (0 as u16)..BYTE_BITS {
            byte_bits[j] = bits[i * BYTE_BITS + j];
        }
        bytes[i] = from_bits_unsigned(byte_bits);
    }
    bytes
}

fn compute_leaf_hashes(
    components: SerializedReferenceGroup,
    privacy_salt: PrivacySaltBits,
) -> [ComponentGroupLeafDigestBits; REFERENCE_GROUP_SIZE] {
    let mut component_leaf_hashes = [[false; COMPONENT_GROUP_LEAF_DIGEST_BITS]; REFERENCE_GROUP_SIZE];

    for i in (0 as u32)..(REFERENCE_GROUP_SIZE as u32) {
        component_leaf_hashes[i] = blake2s_multi_input(
            compute_nonce(privacy_salt, ComponentGroupEnum::REFERENCES_GROUP as u32, i as u32),
            components[i]
        );
        //let a = bits_to_bytes(components[i]);
    }
    component_leaf_hashes
}

fn compute_references_group_hash(
    components: SerializedReferenceGroup,
    privacy_salt: PrivacySaltBits,
) -> NodeDigestBits {
    let component_leaf_hashes = compute_leaf_hashes(components, privacy_salt);

    let mut padded_leaves = [[false; COMPONENT_GROUP_LEAF_DIGEST_BITS]; 8];
    for i in 0..7 {
        padded_leaves[i] = component_leaf_hashes[i];
    }
    get_merkle_tree_from_8_component_group_leaf_digests(padded_leaves)
}
