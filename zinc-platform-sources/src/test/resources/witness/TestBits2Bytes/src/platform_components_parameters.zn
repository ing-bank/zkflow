mod merkle_tree_utils;
mod platform_component_group_leaf_digest_dto;
mod platform_component_group_enum;
mod platform_consts;
mod platform_crypto_utils;
mod platform_node_digest_dto;
mod platform_privacy_salt;

use merkle_tree_utils::get_merkle_tree_from_2_component_group_leaf_digests;
use platform_component_group_enum::ComponentGroupEnum;
use platform_component_group_leaf_digest_dto::COMPONENT_GROUP_LEAF_DIGEST_BITS;
use platform_component_group_leaf_digest_dto::ComponentGroupLeafDigestBits;
use platform_component_group_leaf_digest_dto::COMPONENT_GROUP_LEAF_DIGEST_BYTES;
use platform_component_group_leaf_digest_dto::ComponentGroupLeafDigestBytes;
use platform_consts::PARAMETERS_COMPONENT_SIZE;
use platform_consts::PARAMETERS_GROUP_SIZE;
use platform_consts::BYTE_BITS;
use platform_crypto_utils::compute_nonce;
use platform_crypto_utils::pedersen_to_padded_bits;
use platform_node_digest_dto::NodeDigestBits;
use platform_node_digest_dto::NODE_DIGEST_BITS;
use platform_privacy_salt::PrivacySaltBits;
use std::convert::from_bits_unsigned;
use std::crypto::blake2s_multi_input;
//use std::crypto::pedersen_multi_input;

const PARAMETERS_COMPONENT_SIZE_BITS: u16 = PARAMETERS_COMPONENT_SIZE * BYTE_BITS;

type SerializedParameters = [bool; PARAMETERS_COMPONENT_SIZE_BITS];
type SerializedParametersGroup = [SerializedParameters; PARAMETERS_GROUP_SIZE];

fn bits_to_bytes(bits: SerializedParameters) -> [u8; PARAMETERS_COMPONENT_SIZE] {
    let mut bytes = [0 as u8; PARAMETERS_COMPONENT_SIZE];

    for i in (0 as u16)..PARAMETERS_COMPONENT_SIZE {
        let mut byte_bits = [false; BYTE_BITS];
        for j in (0 as u16)..BYTE_BITS {
            byte_bits[j] = bits[i * BYTE_BITS + j];
        }
        bytes[i] = from_bits_unsigned(byte_bits);
    }
    bytes
}

fn deserialize_parameters(components: SerializedParametersGroup) -> [[u8; PARAMETERS_COMPONENT_SIZE]; PARAMETERS_GROUP_SIZE]{
    let mut deserialized_components = [[0 as u8; PARAMETERS_COMPONENT_SIZE]; PARAMETERS_GROUP_SIZE];

    for i in 0..PARAMETERS_GROUP_SIZE{
        deserialized_components[i] = bits_to_bytes(components[i]);
    }
    deserialized_components
}

fn compute_leaf_hashes(
    components: SerializedParametersGroup,
    privacy_salt: PrivacySaltBits,
) -> [ComponentGroupLeafDigestBits; PARAMETERS_GROUP_SIZE] {
    let mut component_leaf_hashes = [[false; COMPONENT_GROUP_LEAF_DIGEST_BITS]; PARAMETERS_GROUP_SIZE];

    for i in (0 as u32)..(PARAMETERS_GROUP_SIZE as u32) {
        // //compute the leaf hash with Pedersen
        // component_leaf_hashes[i] = pedersen_to_padded_bits(
        //     pedersen_multi_input(
        //     compute_nonce(privacy_salt, ComponentGroupEnum::PARAMETERS_GROUP as u32, i as u32),
        //     components[i]
        // ).0);

        //compute the leaf hash with Blake2s
        component_leaf_hashes[i] = blake2s_multi_input(
            compute_nonce(privacy_salt, ComponentGroupEnum::PARAMETERS_GROUP as u32, i as u32),
            components[i]
        );
    }
    component_leaf_hashes
}

fn compute_parameters_group_hash(
    components: SerializedParametersGroup,
    privacy_salt: PrivacySaltBits,
) -> NodeDigestBits {
    let component_leaf_hashes = compute_leaf_hashes(components, privacy_salt);

    let mut padded_leaves = [[false; COMPONENT_GROUP_LEAF_DIGEST_BITS]; 2];
    for i in 0..1 {
        padded_leaves[i] = component_leaf_hashes[i];
    }
    get_merkle_tree_from_2_component_group_leaf_digests(padded_leaves)
}
