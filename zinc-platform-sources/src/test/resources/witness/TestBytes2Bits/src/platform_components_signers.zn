mod consts;
mod merkle_tree_utils;
mod platform_component_group_leaf_digest_dto;
mod platform_component_group_enum;
mod platform_consts;
mod platform_crypto_utils;
mod platform_node_digest_dto;
mod platform_privacy_salt;

use consts::COMMAND_SIGNER_LIST_SIZE;
use consts::COMMAND_SIGNER_SIZE;
use merkle_tree_utils::get_merkle_tree_from_2_component_group_leaf_digests;
use platform_component_group_enum::ComponentGroupEnum;
use platform_component_group_leaf_digest_dto::COMPONENT_GROUP_LEAF_DIGEST_BITS;
use platform_component_group_leaf_digest_dto::ComponentGroupLeafDigestBits;
use platform_consts::SIGNER_GROUP_SIZE;
use platform_consts::BYTE_BITS;
use platform_consts::LIST_LENGTH_PREFIX;
use platform_consts::CORDA_SERDE_MAGIC_LENGTH;
use platform_crypto_utils::compute_nonce;
use platform_crypto_utils::pedersen_to_padded_bits;
use platform_node_digest_dto::NodeDigestBits;
use platform_node_digest_dto::NODE_DIGEST_BITS;
use platform_privacy_salt::PrivacySaltBits;
use std::convert::to_bits;
use std::crypto::blake2s_multi_input;
//use std::crypto::pedersen_multi_input;

const COMMAND_SIGNER_LIST_SIZE_BYTES: u16
    = CORDA_SERDE_MAGIC_LENGTH
    + LIST_LENGTH_PREFIX
    + (COMMAND_SIGNER_SIZE * COMMAND_SIGNER_LIST_SIZE);
const COMMAND_SIGNER_LIST_SIZE_BITS: u16 = COMMAND_SIGNER_LIST_SIZE_BYTES * BYTE_BITS;

type SerializedCommandSignersList = [u8; COMMAND_SIGNER_LIST_SIZE_BYTES];
type SerializedSignersGroup = [SerializedCommandSignersList; SIGNER_GROUP_SIZE];

fn bytes_to_bits(bytes: SerializedCommandSignersList) -> [bool; COMMAND_SIGNER_LIST_SIZE_BITS] {
    let mut bits = [false; COMMAND_SIGNER_LIST_SIZE_BITS];

    for i in (0 as u16)..COMMAND_SIGNER_LIST_SIZE_BYTES {
        let byte_bits = to_bits(bytes[i]);
        for j in (0 as u16)..BYTE_BITS {
            bits[BYTE_BITS * i + j] = byte_bits[j];
        }
    }
    bits
}

fn compute_leaf_hashes(
    components: SerializedSignersGroup,
    privacy_salt: PrivacySaltBits,
) -> [ComponentGroupLeafDigestBits; SIGNER_GROUP_SIZE] {
    let mut component_leaf_hashes =
        [[false; COMPONENT_GROUP_LEAF_DIGEST_BITS]; SIGNER_GROUP_SIZE];

    for i in (0 as u32)..(SIGNER_GROUP_SIZE as u32) {
        // //compute the leaf hash with Pedersen
        // component_leaf_hashes[i] = pedersen_to_padded_bits(pedersen_multi_input(
        //     compute_nonce(privacy_salt, ComponentGroupEnum::SIGNERS_GROUP as u32, i as u32),
        //     bytes_to_bits(components[i])
        // ).0);

        //compute the leaf hash with Blake2s
        component_leaf_hashes[i] = blake2s_multi_input(
            compute_nonce(privacy_salt, ComponentGroupEnum::SIGNERS_GROUP as u32, i as u32),
            bytes_to_bits(components[i])
        );
    }
    component_leaf_hashes
}

fn compute_signers_group_hash(
    components: SerializedSignersGroup,
    privacy_salt: PrivacySaltBits,
) -> NodeDigestBits {
    let component_leaf_hashes = compute_leaf_hashes(components, privacy_salt);

    let mut padded_leaves = [[false; COMPONENT_GROUP_LEAF_DIGEST_BITS]; 2];
    for i in 0..1 {
        padded_leaves[i] = component_leaf_hashes[i];
    }

    get_merkle_tree_from_2_component_group_leaf_digests(padded_leaves)
}