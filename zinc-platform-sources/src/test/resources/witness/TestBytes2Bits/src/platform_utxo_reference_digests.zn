//! GENERATED CODE. DO NOT EDIT
//! Edit the template in zinc-platform-sources/src/main/resources/zinc-platform-templates/platform_utxo_digests_template.zn
//
mod consts;
mod platform_consts;
mod platform_node_digest_dto;
mod platform_nonce_digest_dto;
mod platform_privacy_salt;
mod platform_component_group_leaf_digest_dto;
mod platform_component_group_enum;
mod platform_components_references;

use consts::REFERENCE_GROUP_SIZE;
use platform_component_group_enum::ComponentGroupEnum;
use platform_component_group_leaf_digest_dto::COMPONENT_GROUP_LEAF_DIGEST_BITS;
use platform_component_group_leaf_digest_dto::COMPONENT_GROUP_LEAF_DIGEST_BYTES;
use platform_component_group_leaf_digest_dto::ComponentGroupLeafDigestBits;
use platform_component_group_leaf_digest_dto::ComponentGroupLeafDigestBytes;
use platform_component_group_leaf_digest_dto::component_group_leaf_digest_from_bits_to_bytes;
use platform_components_references::SerializedReferenceGroup;
use platform_node_digest_dto::NODE_DIGEST_BITS;
use platform_node_digest_dto::NodeDigestBits;
use platform_node_digest_dto::NodeDigestDto;
use platform_nonce_digest_dto::from_bytes_to_bits;
use platform_nonce_digest_dto::NonceDigestBytes;
use platform_privacy_salt::PrivacySaltBits;
use platform_consts::BYTE_BITS;
use std::crypto::blake2s_multi_input;
use std::convert::to_bits;

const REFERENCE_STATE_1_COMPONENT_SIZE: u32 = 1393;
const REFERENCE_STATE_2_COMPONENT_SIZE: u32 = 1682;
const REFERENCE_STATE_3_COMPONENT_SIZE: u32 = 1368;

const REFERENCE_STATE_1_COMPONENT_SIZE_IN_BITS: u32 = REFERENCE_STATE_1_COMPONENT_SIZE * BYTE_BITS as u32;
const REFERENCE_STATE_2_COMPONENT_SIZE_IN_BITS: u32 = REFERENCE_STATE_2_COMPONENT_SIZE * BYTE_BITS as u32;
const REFERENCE_STATE_3_COMPONENT_SIZE_IN_BITS: u32 = REFERENCE_STATE_3_COMPONENT_SIZE * BYTE_BITS as u32;

const REFERENCE_STATE_1_GROUP_SIZE: u32 = 3;
const REFERENCE_STATE_2_GROUP_SIZE: u32 = 3;
const REFERENCE_STATE_3_GROUP_SIZE: u32 = 1;


struct SerializedReferenceUtxos{
    reference_state_1: [[u8; REFERENCE_STATE_1_COMPONENT_SIZE]; REFERENCE_STATE_1_GROUP_SIZE],
    reference_state_2: [[u8; REFERENCE_STATE_2_COMPONENT_SIZE]; REFERENCE_STATE_2_GROUP_SIZE],
    reference_state_3: [[u8; REFERENCE_STATE_3_COMPONENT_SIZE]; REFERENCE_STATE_3_GROUP_SIZE],
 }

fn bytes_to_bits_state_1(bytes: [u8; REFERENCE_STATE_1_COMPONENT_SIZE]) -> [bool; REFERENCE_STATE_1_COMPONENT_SIZE_IN_BITS] {
    let mut bits = [false; REFERENCE_STATE_1_COMPONENT_SIZE_IN_BITS];

    for i in (0 as u16)..REFERENCE_STATE_1_COMPONENT_SIZE {
        let byte_bits = to_bits(bytes[i]);
        for j in (0 as u32)..(BYTE_BITS as u32) {
            bits[BYTE_BITS as u32 * i + j] = byte_bits[j];
        }
    }
    bits
}

fn bytes_to_bits_state_2(bytes: [u8; REFERENCE_STATE_2_COMPONENT_SIZE]) -> [bool; REFERENCE_STATE_2_COMPONENT_SIZE_IN_BITS] {
    let mut bits = [false; REFERENCE_STATE_2_COMPONENT_SIZE_IN_BITS];

    for i in (0 as u16)..REFERENCE_STATE_2_COMPONENT_SIZE {
        let byte_bits = to_bits(bytes[i]);
        for j in (0 as u32)..(BYTE_BITS as u32) {
            bits[BYTE_BITS as u32 * i + j] = byte_bits[j];
        }
    }
    bits
}

fn bytes_to_bits_state_3(bytes: [u8; REFERENCE_STATE_3_COMPONENT_SIZE]) -> [bool; REFERENCE_STATE_3_COMPONENT_SIZE_IN_BITS] {
    let mut bits = [false; REFERENCE_STATE_3_COMPONENT_SIZE_IN_BITS];

    for i in (0 as u16)..REFERENCE_STATE_3_COMPONENT_SIZE {
        let byte_bits = to_bits(bytes[i]);
        for j in (0 as u32)..(BYTE_BITS as u32) {
            bits[BYTE_BITS as u32 * i + j] = byte_bits[j];
        }
    }
    bits
}

// Verify that for each input and reference, when calculating the digest of its content with the nonce for the utxo
// it points to as provided in the public input (reference), matches the digest provided in the public input (reference).
// This proves that we did not change the contents of the inputs (references), compared to
// the VerifierTransaction known by the verifier, of which they were an output.
fn compute_reference_utxo_digests(
    utxos: SerializedReferenceUtxos,
    nonces: [NonceDigestBytes; REFERENCE_GROUP_SIZE]
) -> [ComponentGroupLeafDigestBytes; REFERENCE_GROUP_SIZE] {
    let mut utxo_hashes =
        [[0; COMPONENT_GROUP_LEAF_DIGEST_BYTES]; REFERENCE_GROUP_SIZE];

    let mut element_index: u32 = 0;

    for i in (0 as u32)..(REFERENCE_STATE_1_GROUP_SIZE as u32) {
        utxo_hashes[i] = component_group_leaf_digest_from_bits_to_bytes(blake2s_multi_input(
            from_bytes_to_bits(nonces[element_index + i]),
            bytes_to_bits_state_1(utxos.reference_state_1[i])
        ));
    }

    element_index += REFERENCE_STATE_1_GROUP_SIZE;

    for i in 0 as u32..REFERENCE_STATE_2_GROUP_SIZE as u32{
        utxo_hashes[element_index + i] = component_group_leaf_digest_from_bits_to_bytes(blake2s_multi_input(
            from_bytes_to_bits(nonces[element_index + i]),
            bytes_to_bits_state_2(utxos.reference_state_2[i])
        ));
    }
    element_index += REFERENCE_STATE_2_GROUP_SIZE as u32;

    for i in 0 as u32..REFERENCE_STATE_3_GROUP_SIZE as u32{
        utxo_hashes[element_index + i] = component_group_leaf_digest_from_bits_to_bytes(blake2s_multi_input(
            from_bytes_to_bits(nonces[element_index + i]),
            bytes_to_bits_state_3(utxos.reference_state_3[i])
        ));
    }

    utxo_hashes
}
