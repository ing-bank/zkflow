mod consts;

use consts::HASH_BITS;
use std::crypto::pedersen;
use std::convert::to_bits;

// Method to pad pedersen digest with zeros to assure 256 bits digest size globally.
const PEDERSEN_FIELD_BITS: u16 = 254;
fn pedersen_to_padded_bits(digest: field) -> [bool; HASH_BITS] {
    let mut digest_bits = [false; HASH_BITS];
    let pedersen_bits = to_bits(digest);

    for i in 0..PEDERSEN_FIELD_BITS {
        digest_bits[(2 as u16) + i] = pedersen_bits[i];
    }
    digest_bits
}

fn concatenate_digests(
    hash1: [bool; HASH_BITS],
    hash2: [bool; HASH_BITS],
) -> [bool; HASH_BITS + HASH_BITS] {
    let mut data = [false; HASH_BITS + HASH_BITS];

    for i in (0 as u16)..HASH_BITS {
        data[i] = hash1[i];
        data[HASH_BITS + i] = hash2[i];
    }
    data
}

fn get_merkle_tree_from_2_digests(leaves: [[bool; HASH_BITS]; 2]) -> [bool; HASH_BITS] {
    pedersen_to_padded_bits(pedersen(concatenate_digests(leaves[0], leaves[1])).0)
}

fn get_merkle_tree_from_4_digests(leaves: [[bool; HASH_BITS]; 4]) -> [bool; HASH_BITS] {
    let mut new_leaves = [[false; HASH_BITS]; 2];
    for i in 0..2 {
        new_leaves[i] = pedersen_to_padded_bits(
            pedersen(concatenate_digests(leaves[2 * i], leaves[2 * i + 1])).0,
        );
    }
    get_merkle_tree_from_2_digests(new_leaves)
}

fn get_merkle_tree_from_8_digests(leaves: [[bool; HASH_BITS]; 8]) -> [bool; HASH_BITS] {
    let mut new_leaves = [[false; HASH_BITS]; 4];
    for i in 0..4 {
        new_leaves[i] = pedersen_to_padded_bits(
            pedersen(concatenate_digests(leaves[2 * i], leaves[2 * i + 1])).0,
        );
    }
    get_merkle_tree_from_4_digests(new_leaves)
}

fn get_merkle_tree_from_16_digests(leaves: [[bool; HASH_BITS]; 16]) -> [bool; HASH_BITS] {
    let mut new_leaves = [[false; HASH_BITS]; 8];
    for i in 0..8 {
        new_leaves[i] = pedersen_to_padded_bits(
            pedersen(concatenate_digests(leaves[2 * i], leaves[2 * i + 1])).0,
        );
    }
    get_merkle_tree_from_8_digests(new_leaves)
}
