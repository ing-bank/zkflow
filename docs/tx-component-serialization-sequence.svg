<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="2076px" preserveAspectRatio="none" style="width:1836px;height:2076px;" version="1.1" viewBox="0 0 1836 2076" width="1836px" zoomAndPan="magnify"><defs><filter height="300%" id="f1udnt2ruz0p09" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><text fill="#FF0000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="85" x="746.75" y="23.5352">Transaction</text><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="836.75" y="23.5352"/><text fill="#FFA500" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="80" x="836.75" y="23.5352">component</text><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="921.75" y="23.5352"/><text fill="#FFFF00" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="90" x="921.75" y="23.5352">serialization</text><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="1016.75" y="23.5352"/><text fill="#008000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="26" x="1016.75" y="23.5352">and</text><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="1047.75" y="23.5352"/><text fill="#800080" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="44" x="1047.75" y="23.5352">sizing</text><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="921.75" y="40.0234"/><rect fill="#ADD8E6" height="2014.8887" style="stroke: #A80036; stroke-width: 1.0;" width="909.5" x="19" y="50.9766"/><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="103" x="422.25" y="63.5449">In Corda/Kotlin</text><rect fill="#FFFFFF" filter="url(#f1udnt2ruz0p09)" height="131.2422" style="stroke: #000000; stroke-width: 2.0;" width="530" x="13" y="165.0859"/><rect fill="#FFFFFF" filter="url(#f1udnt2ruz0p09)" height="101.9316" style="stroke: #000000; stroke-width: 2.0;" width="578" x="394" y="310.3281"/><rect fill="#FFFFFF" filter="url(#f1udnt2ruz0p09)" height="173.5527" style="stroke: #000000; stroke-width: 2.0;" width="540.5" x="394" y="426.2598"/><rect fill="#FFFFFF" filter="url(#f1udnt2ruz0p09)" height="639.248" style="stroke: #000000; stroke-width: 2.0;" width="1409.5" x="394" y="613.8125"/><rect fill="#FFFFFF" filter="url(#f1udnt2ruz0p09)" height="743.3164" style="stroke: #000000; stroke-width: 2.0;" width="778" x="1047.5" y="1267.0605"/><rect fill="#FFFFFF" filter="url(#f1udnt2ruz0p09)" height="244.7949" style="stroke: #000000; stroke-width: 2.0;" width="678" x="1057.5" y="1291.3711"/><rect fill="#FFFFFF" filter="url(#f1udnt2ruz0p09)" height="214.1738" style="stroke: #000000; stroke-width: 2.0;" width="758" x="1057.5" y="1550.166"/><rect fill="#FFFFFF" filter="url(#f1udnt2ruz0p09)" height="225.0371" style="stroke: #000000; stroke-width: 2.0;" width="635" x="1057.5" y="1778.3398"/><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 5.0,5.0;" x1="96" x2="96" y1="105.7754" y2="2027.377"/><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 5.0,5.0;" x1="468" x2="468" y1="105.7754" y2="2027.377"/><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 5.0,5.0;" x1="851.5" x2="851.5" y1="105.7754" y2="2027.377"/><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 5.0,5.0;" x1="1090.5" x2="1090.5" y1="105.7754" y2="2027.377"/><rect fill="#FEFECE" filter="url(#f1udnt2ruz0p09)" height="30.4883" style="stroke: #A80036; stroke-width: 1.5;" width="143" x="23" y="70.2871"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="129" x="30" y="90.8223">TransactionBuilder</text><rect fill="#FEFECE" filter="url(#f1udnt2ruz0p09)" height="30.4883" style="stroke: #A80036; stroke-width: 1.5;" width="143" x="23" y="2026.377"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="129" x="30" y="2046.9121">TransactionBuilder</text><rect fill="#FEFECE" filter="url(#f1udnt2ruz0p09)" height="30.4883" style="stroke: #A80036; stroke-width: 1.5;" width="125" x="404" y="70.2871"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="111" x="411" y="90.8223">WireTransaction</text><rect fill="#FEFECE" filter="url(#f1udnt2ruz0p09)" height="30.4883" style="stroke: #A80036; stroke-width: 1.5;" width="125" x="404" y="2026.377"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="111" x="411" y="2046.9121">WireTransaction</text><rect fill="#FEFECE" filter="url(#f1udnt2ruz0p09)" height="30.4883" style="stroke: #A80036; stroke-width: 1.5;" width="142" x="778.5" y="70.2871"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="128" x="785.5" y="90.8223">LedgerTransaction</text><rect fill="#FEFECE" filter="url(#f1udnt2ruz0p09)" height="30.4883" style="stroke: #A80036; stroke-width: 1.5;" width="142" x="778.5" y="2026.377"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="128" x="785.5" y="2046.9121">LedgerTransaction</text><rect fill="#FEFECE" filter="url(#f1udnt2ruz0p09)" height="30.4883" style="stroke: #A80036; stroke-width: 1.5;" width="42" x="1067.5" y="70.2871"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="28" x="1074.5" y="90.8223">Zinc</text><rect fill="#FEFECE" filter="url(#f1udnt2ruz0p09)" height="30.4883" style="stroke: #A80036; stroke-width: 1.5;" width="42" x="1067.5" y="2026.377"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacingAndGlyphs" textLength="28" x="1074.5" y="2046.9121">Zinc</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="96.5" x2="138.5" y1="137.0859" y2="137.0859"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="138.5" x2="138.5" y1="137.0859" y2="150.0859"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="97.5" x2="138.5" y1="150.0859" y2="150.0859"/><polygon fill="#A80036" points="107.5,146.0859,97.5,150.0859,107.5,154.0859,103.5,150.0859" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="162" x="103.5" y="132.3438">withItems(*): components</text><path d="M13,165.0859 L153,165.0859 L153,172.0859 L143,182.0859 L13,182.0859 L13,165.0859 " fill="#EEEEEE" style="stroke: #000000; stroke-width: 1.0;"/><rect fill="none" height="131.2422" style="stroke: #000000; stroke-width: 2.0;" width="530" x="13" y="165.0859"/><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="45" x="28" y="178.6543">build()</text><text fill="#000000" font-family="sans-serif" font-size="13" font-style="italic" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="46" x="77" y="178.6543">(sized)</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="96.5" x2="138.5" y1="203.707" y2="203.707"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="138.5" x2="138.5" y1="203.707" y2="216.707"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="97.5" x2="138.5" y1="216.707" y2="216.707"/><polygon fill="#A80036" points="107.5,212.707,97.5,216.707,107.5,220.707,103.5,216.707" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="236" x="103.5" y="198.9648">components.size(): sizedComponents</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="96.5" x2="138.5" y1="246.0176" y2="246.0176"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="138.5" x2="138.5" y1="246.0176" y2="259.0176"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="97.5" x2="138.5" y1="259.0176" y2="259.0176"/><polygon fill="#A80036" points="107.5,255.0176,97.5,259.0176,107.5,263.0176,103.5,259.0176" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="358" x="103.5" y="241.2754">sizedComponents.serialize(): serializedSizedComponents</text><polygon fill="#A80036" points="456.5,284.3281,466.5,288.3281,456.5,292.3281,460.5,288.3281" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="96.5" x2="462.5" y1="288.3281" y2="288.3281"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="347" x="103.5" y="283.5859">WireTransaction(serializedSizedComponents, serializer)</text><path d="M394,310.3281 L967,310.3281 L967,317.3281 L957,327.3281 L394,327.3281 L394,310.3281 " fill="#EEEEEE" style="stroke: #000000; stroke-width: 1.0;"/><rect fill="none" height="101.9316" style="stroke: #000000; stroke-width: 2.0;" width="578" x="394" y="310.3281"/><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="460" x="409" y="323.8965">deserialiseComponentGroup(serializedSizedComponents, serializer)</text><text fill="#000000" font-family="sans-serif" font-size="13" font-style="italic" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="64" x="873" y="323.8965">(unsized)</text><path d="M977,315.3281 L977,646.3281 L1640,646.3281 L1640,325.3281 L1630,315.3281 L977,315.3281 " fill="#FBFB77" filter="url(#f1udnt2ruz0p09)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1630,315.3281 L1630,325.3281 L1640,325.3281 L1630,315.3281 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="487" x="983" y="332.8965">Unfortunately, we can't influence the call site of deserialiseComponentGroup.</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="467" x="983" y="348.207">This means we can't influence as what types components are deserialised.</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="280" x="983" y="363.5176">Example: inputs are deserialized as StateRef.</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="471" x="983" y="378.8281">As a result, we can't store SizedStateRef in the serializedSizedComponents,</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="233" x="983" y="394.1387">because then deserialization will fail.</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="355" x="983" y="409.4492">This is even not going to work if SizedStateRef extended</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="287" x="983" y="424.7598">StateRef: unfortunately all Corda type such as</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="141" x="983" y="440.0703">StateRef, etc. are final.</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="987" y="455.3809"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="519" x="983" y="470.6914">So we solve this by adding unsizing metadata to the transaction as an attachment.</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="511" x="983" y="486.002">Our serializer will be made aware of this attachment, so during deserialization on</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="496" x="983" y="501.3125">the Corda side, it will always also unsize the components to their original size.</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="249" x="983" y="516.623">This way, sizing is invisible to the user.</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="987" y="531.9336"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="642" x="983" y="547.2441">This can be done by providing this metadata as extra properties on the serializationContext passed to</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="622" x="983" y="562.5547">deserialiseComponentGroups(). This should be possible, because it is the "TransactionBuilder" that</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="632" x="983" y="577.8652">constructs the WireTransaction, its component groups and passes it the serializationContext to use.</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="987" y="593.1758"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="529" x="983" y="608.4863">BUT: how does tx receiver know that this metadata is valid and actually matches the</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="624" x="983" y="623.7969">metadata attachment? It will receive an AMQP-serialized WireTransaction, with serializationContext</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="585" x="983" y="639.1074">and should check after the fact that the metadata matched the deserialized attachment hash.</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="468.5" x2="510.5" y1="348.9492" y2="348.9492"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="510.5" x2="510.5" y1="348.9492" y2="361.9492"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="469.5" x2="510.5" y1="361.9492" y2="361.9492"/><polygon fill="#A80036" points="479.5,357.9492,469.5,361.9492,479.5,365.9492,475.5,361.9492" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="369" x="475.5" y="344.207">deserialize(serializedSizedComponents): sizedComponents</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="468.5" x2="510.5" y1="391.2598" y2="391.2598"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="510.5" x2="510.5" y1="391.2598" y2="404.2598"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="469.5" x2="510.5" y1="404.2598" y2="404.2598"/><polygon fill="#A80036" points="479.5,400.2598,469.5,404.2598,479.5,408.2598,475.5,404.2598" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="248" x="475.5" y="386.5176">unsize(sizedComponents): components</text><path d="M394,426.2598 L658,426.2598 L658,433.2598 L648,443.2598 L394,443.2598 L394,426.2598 " fill="#EEEEEE" style="stroke: #000000; stroke-width: 1.0;"/><rect fill="none" height="173.5527" style="stroke: #000000; stroke-width: 2.0;" width="540.5" x="394" y="426.2598"/><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="151" x="409" y="439.8281">toLedgerTransaction()</text><text fill="#000000" font-family="sans-serif" font-size="13" font-style="italic" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="64" x="564" y="439.8281">(unsized)</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="468.5" x2="510.5" y1="464.8809" y2="464.8809"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="510.5" x2="510.5" y1="464.8809" y2="477.8809"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="469.5" x2="510.5" y1="477.8809" y2="477.8809"/><polygon fill="#A80036" points="479.5,473.8809,469.5,477.8809,479.5,481.8809,475.5,477.8809" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="285" x="475.5" y="460.1387">deserialiseComponentGroups(*): components</text><text fill="#000000" font-family="sans-serif" font-size="13" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="57" x="764.5" y="460.1387">(unsized)</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="468.5" x2="510.5" y1="507.1914" y2="507.1914"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="510.5" x2="510.5" y1="507.1914" y2="520.1914"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="469.5" x2="510.5" y1="520.1914" y2="520.1914"/><polygon fill="#A80036" points="479.5,516.1914,469.5,520.1914,479.5,524.1914,475.5,520.1914" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="352" x="475.5" y="502.4492">resolveComponents(components): resolvedComponents</text><polygon fill="#A80036" points="839.5,545.502,849.5,549.502,839.5,553.502,843.5,549.502" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="468.5" x2="845.5" y1="549.502" y2="549.502"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="257" x="475.5" y="544.7598">LedgerTransaction(resolvedComponents)</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="851.5" x2="893.5" y1="578.8125" y2="578.8125"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="893.5" x2="893.5" y1="578.8125" y2="591.8125"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="852.5" x2="893.5" y1="591.8125" y2="591.8125"/><polygon fill="#A80036" points="862.5,587.8125,852.5,591.8125,862.5,595.8125,858.5,591.8125" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="43" x="858.5" y="574.0703">verify()</text><path d="M394,613.8125 L592,613.8125 L592,620.8125 L582,630.8125 L394,630.8125 L394,613.8125 " fill="#EEEEEE" style="stroke: #000000; stroke-width: 1.0;"/><rect fill="none" height="639.248" style="stroke: #000000; stroke-width: 2.0;" width="1409.5" x="394" y="613.8125"/><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="103" x="409" y="627.3809">toZincWitness()</text><text fill="#000000" font-family="sans-serif" font-size="13" font-style="italic" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="46" x="516" y="627.3809">(sized)</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="468.5" x2="510.5" y1="652.4336" y2="652.4336"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="510.5" x2="510.5" y1="652.4336" y2="665.4336"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="469.5" x2="510.5" y1="665.4336" y2="665.4336"/><polygon fill="#A80036" points="479.5,661.4336,469.5,665.4336,479.5,669.4336,475.5,665.4336" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="274" x="475.5" y="647.6914">resolveComponents(inputs): resolvedInputs</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="468.5" x2="510.5" y1="694.7441" y2="694.7441"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="510.5" x2="510.5" y1="694.7441" y2="707.7441"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="469.5" x2="510.5" y1="707.7441" y2="707.7441"/><polygon fill="#A80036" points="479.5,703.7441,469.5,707.7441,479.5,711.7441,475.5,707.7441" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="327" x="475.5" y="690.002">resolveComponents(references): resolvedReferences</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="468.5" x2="510.5" y1="737.0547" y2="737.0547"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="510.5" x2="510.5" y1="737.0547" y2="750.0547"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="469.5" x2="510.5" y1="750.0547" y2="750.0547"/><polygon fill="#A80036" points="479.5,746.0547,469.5,750.0547,479.5,754.0547,475.5,750.0547" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="285" x="475.5" y="732.3125">collectUtxoNonces(inputs): inputUtxoNonces</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="468.5" x2="510.5" y1="779.3652" y2="779.3652"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="510.5" x2="510.5" y1="779.3652" y2="792.3652"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="469.5" x2="510.5" y1="792.3652" y2="792.3652"/><polygon fill="#A80036" points="479.5,788.3652,469.5,792.3652,479.5,796.3652,475.5,792.3652" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="335" x="475.5" y="774.623">collectUtxoNonces(references): referenceUtxoNonces</text><polygon fill="#A80036" points="1078.5,1029.3682,1088.5,1033.3682,1078.5,1037.3682,1082.5,1033.3682" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="468.5" x2="1084.5" y1="1033.3682" y2="1033.3682"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="598" x="475.5" y="1028.626">ZincWitness(wtx, resolvedInputs, resolvedReferences, inputUtxoNonces, referenceUtxoNonces)</text><path d="M1095,805.3652 L1095,1243.3652 L1784,1243.3652 L1784,815.3652 L1774,805.3652 L1095,805.3652 " fill="#FBFB77" filter="url(#f1udnt2ruz0p09)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1774,805.3652 L1774,815.3652 L1784,815.3652 L1774,805.3652 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="179" x="1101" y="822.9336">TBD. Do we send the wtx as:</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="1105" y="838.2441"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="474" x="1101" y="853.5547">1. Sized, serialized components with a separate sizing metadata struct with</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="378" x="1117" y="868.8652">a lookup path for all arbitrary-length types in the hierarchy?</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="451" x="1101" y="884.1758">3. sized, serialized components wrapped with Sized&lt;Type&gt;List wrapper</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="345" x="1117" y="899.4863">for each list, or similar for other arbitrary-length types</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="53" x="1101" y="914.7969">2. sized,</text><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="17" x="1158" y="914.7969">de</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="402" x="1175" y="914.7969">-serialized components wrapped with Sized&lt;Type&gt;List wrapper</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="345" x="1117" y="930.1074">for each list, or similar for other arbitrary-length types</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="1105" y="945.418"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="1105" y="960.7285"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="298" x="1101" y="976.0391">In the case of 1), it means deserializing in Zinc,</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="299" x="1101" y="991.3496">and when needed lookup the original length for</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="307" x="1101" y="1006.6602">a property which we know is arbitrary-length, so</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="397" x="1101" y="1021.9707">we can conditionally ignore padding whe making comparisons.</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="569" x="1101" y="1037.2813">A downside is that the creation of the separate sizing metadata struct on the Corda side is</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="499" x="1101" y="1052.5918">is not trivial and needs to be made such that lookups on Zinc side make sense.</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="1105" y="1067.9023"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="580" x="1101" y="1083.2129">In the case of 2), it means that we pass around the Sized&lt;Type&gt;List wrappers instead of the</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="548" x="1101" y="1098.5234">original types, which makes it perhaps easier: this can be done on the Corda side when</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="330" x="1101" y="1113.834">serializing the witness as JSON for transport to Zinc.</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="387" x="1101" y="1129.1445">On the other hand, all sized wrappers and their nesting needs</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="501" x="1101" y="1144.4551">to be hand built on the Zinc side, so Zinc can understand the witness structure.</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="245" x="1101" y="1159.7656">Deserialization is identical to option 1.</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="1105" y="1175.0762"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="668" x="1101" y="1190.3867">In the case of 3), like option 2, it means that we pass around the Sized&lt;Type&gt;List wrappers instead of the</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="90" x="1101" y="1205.6973">original types.</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="666" x="1101" y="1221.0078">A big risk is if we can actually recreate from Zinc types the serialized form identically to what was created</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="561" x="1101" y="1236.3184">on the Corda side from Kotlin types. This is necessary for correct Merkle tree calculation.</text><path d="M1047.5,1267.0605 L1172.5,1267.0605 L1172.5,1274.0605 L1162.5,1284.0605 L1047.5,1284.0605 L1047.5,1267.0605 " fill="#EEEEEE" style="stroke: #000000; stroke-width: 1.0;"/><rect fill="none" height="743.3164" style="stroke: #000000; stroke-width: 2.0;" width="778" x="1047.5" y="1267.0605"/><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="80" x="1062.5" y="1280.6289">Zinc.verify()</text><path d="M1057.5,1291.3711 L1375.5,1291.3711 L1375.5,1298.3711 L1365.5,1308.3711 L1057.5,1308.3711 L1057.5,1291.3711 " fill="#EEEEEE" style="stroke: #000000; stroke-width: 1.0;"/><rect fill="none" height="244.7949" style="stroke: #000000; stroke-width: 2.0;" width="678" x="1057.5" y="1291.3711"/><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="273" x="1072.5" y="1304.9395">Comparing with hardcoded sized values</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1090.5" x2="1132.5" y1="1359.1133" y2="1359.1133"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1132.5" x2="1132.5" y1="1359.1133" y2="1372.1133"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1091.5" x2="1132.5" y1="1372.1133" y2="1372.1133"/><polygon fill="#A80036" points="1101.5,1368.1133,1091.5,1372.1133,1101.5,1376.1133,1097.5,1372.1133" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="161" x="1097.5" y="1354.3711">wtx.inputs[0].amount &gt; 0</text><path d="M1270,1313.6816 L1270,1399.6816 L1716,1399.6816 L1716,1323.6816 L1706,1313.6816 L1270,1313.6816 " fill="#FBFB77" filter="url(#f1udnt2ruz0p09)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1706,1313.6816 L1706,1323.6816 L1716,1323.6816 L1706,1313.6816 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="400" x="1276" y="1331.25">These checks can work without needing metadata about sizing.</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="425" x="1276" y="1346.5605">We for simple checks on types like this, the standard struct defines</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="403" x="1276" y="1361.8711">the lenght, which allows comparisons. See `participants` below</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="358" x="1276" y="1377.1816">for an example which will NOT work like this and require</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="100" x="1276" y="1392.4922">sizing metadata</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1090.5" x2="1132.5" y1="1430.5449" y2="1430.5449"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1132.5" x2="1132.5" y1="1430.5449" y2="1443.5449"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1091.5" x2="1132.5" y1="1443.5449" y2="1443.5449"/><polygon fill="#A80036" points="1101.5,1439.5449,1091.5,1443.5449,1101.5,1447.5449,1097.5,1443.5449" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="200" x="1097.5" y="1425.8027">wtx.inputs[0].someIntval &lt;= 23</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1090.5" x2="1132.5" y1="1472.8555" y2="1472.8555"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1132.5" x2="1132.5" y1="1472.8555" y2="1485.8555"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1091.5" x2="1132.5" y1="1485.8555" y2="1485.8555"/><polygon fill="#A80036" points="1101.5,1481.8555,1091.5,1485.8555,1101.5,1489.8555,1097.5,1485.8555" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="250" x="1097.5" y="1468.1133">wtx.inputs[0].amount &gt; Amount(0, GBP)</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1090.5" x2="1132.5" y1="1515.166" y2="1515.166"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1132.5" x2="1132.5" y1="1515.166" y2="1528.166"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1091.5" x2="1132.5" y1="1528.166" y2="1528.166"/><polygon fill="#A80036" points="1101.5,1524.166,1091.5,1528.166,1101.5,1532.166,1097.5,1528.166" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="320" x="1097.5" y="1510.4238">wtx.outputs[0].owner.name = "Scott00000000000"</text><path d="M1057.5,1550.166 L1377.5,1550.166 L1377.5,1557.166 L1367.5,1567.166 L1057.5,1567.166 L1057.5,1550.166 " fill="#EEEEEE" style="stroke: #000000; stroke-width: 1.0;"/><rect fill="none" height="214.1738" style="stroke: #000000; stroke-width: 2.0;" width="758" x="1057.5" y="1550.166"/><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="275" x="1072.5" y="1563.7344">Comparing with other sized components</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1090.5" x2="1132.5" y1="1602.5977" y2="1602.5977"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1132.5" x2="1132.5" y1="1602.5977" y2="1615.5977"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1091.5" x2="1132.5" y1="1615.5977" y2="1615.5977"/><polygon fill="#A80036" points="1101.5,1611.5977,1091.5,1615.5977,1101.5,1619.5977,1097.5,1615.5977" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="316" x="1097.5" y="1597.8555">wtx.outputs[0].amount == wtx.outputs[0].amount</text><path d="M1425,1572.4766 L1425,1627.4766 L1796,1627.4766 L1796,1582.4766 L1786,1572.4766 L1425,1572.4766 " fill="#FBFB77" filter="url(#f1udnt2ruz0p09)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1786,1572.4766 L1786,1582.4766 L1796,1582.4766 L1786,1572.4766 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="327" x="1431" y="1590.0449">These check will be fine without knowing metadata.</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="349" x="1431" y="1605.3555">We compare within the same transaction, so comparing</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="350" x="1431" y="1620.666">sized to sized. We don't care about the original lengths.</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1090.5" x2="1132.5" y1="1658.7188" y2="1658.7188"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1132.5" x2="1132.5" y1="1658.7188" y2="1671.7188"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1091.5" x2="1132.5" y1="1671.7188" y2="1671.7188"/><polygon fill="#A80036" points="1101.5,1667.7188,1091.5,1671.7188,1101.5,1675.7188,1097.5,1671.7188" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="281" x="1097.5" y="1653.9766">wtx.inputs[0].owner != wtx.outputs[0].owner</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1090.5" x2="1132.5" y1="1701.0293" y2="1701.0293"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1132.5" x2="1132.5" y1="1701.0293" y2="1714.0293"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1091.5" x2="1132.5" y1="1714.0293" y2="1714.0293"/><polygon fill="#A80036" points="1101.5,1710.0293,1091.5,1714.0293,1101.5,1718.0293,1097.5,1714.0293" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="329" x="1097.5" y="1696.2871">wtx.inputs[0].owner.owningkey in command.signers</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1090.5" x2="1132.5" y1="1743.3398" y2="1743.3398"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1132.5" x2="1132.5" y1="1743.3398" y2="1756.3398"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1091.5" x2="1132.5" y1="1756.3398" y2="1756.3398"/><polygon fill="#A80036" points="1101.5,1752.3398,1091.5,1756.3398,1101.5,1760.3398,1097.5,1756.3398" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="294" x="1097.5" y="1738.5977">wtx.inputs[0].participants in command.signers</text><path d="M1057.5,1778.3398 L1298.5,1778.3398 L1298.5,1785.3398 L1288.5,1795.3398 L1057.5,1795.3398 L1057.5,1778.3398 " fill="#EEEEEE" style="stroke: #000000; stroke-width: 1.0;"/><rect fill="none" height="225.0371" style="stroke: #000000; stroke-width: 2.0;" width="635" x="1057.5" y="1778.3398"/><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="196" x="1072.5" y="1791.9082">Transaction structure checks</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="1090.5" x2="1132.5" y1="1899.6689" y2="1899.6689"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1132.5" x2="1132.5" y1="1899.6689" y2="1912.6689"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1091.5" x2="1132.5" y1="1912.6689" y2="1912.6689"/><polygon fill="#A80036" points="1101.5,1908.6689,1091.5,1912.6689,1101.5,1916.6689,1097.5,1912.6689" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="32" x="1097.5" y="1894.9268">noop</text><path d="M1141,1800.6504 L1141,1993.6504 L1673,1993.6504 L1673,1810.6504 L1663,1800.6504 L1141,1800.6504 " fill="#FBFB77" filter="url(#f1udnt2ruz0p09)" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1663,1800.6504 L1663,1810.6504 L1673,1810.6504 L1663,1800.6504 " fill="#FBFB77" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="80" x="1147" y="1818.2188">Assumption:</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="1151" y="1833.5293"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="468" x="1147" y="1848.8398">Not necessary: we never have to check the number of outputs, inputs, etc,</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="495" x="1147" y="1864.1504">since the Zinc circuit structure is unique for each command and already forces</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="175" x="1147" y="1879.4609">the number of components.</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="1151" y="1894.7715"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="511" x="1147" y="1910.082">E.g. If we we require 0 inputs and 1 outputs, the hardcoded witness structure will</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="434" x="1147" y="1925.3926">reflect this. Any witness passed to Zinc of other sizes will simpy fail.</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="306" x="1147" y="1940.7031">So we don't need to check this inside the circuit.</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="0" x="1151" y="1956.0137"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="440" x="1147" y="1971.3242">Additionally, why would we ever define a fixed size of 2 outputs when</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="333" x="1147" y="1986.6348">the contract rules require exactly 1? Makes no sense.</text><!--
@startuml
title
<b><font color=red>Transaction</font> <font color=orange>component</font> <font color=yellow>serialization</font> <font color=green>and</font> <font color=purple>sizing</font></b>

end title

skinparam backgroundColor white

box "In Corda/Kotlin" #LightBlue
    participant txb as "TransactionBuilder"
    participant wtx as "WireTransaction"
    participant ltx as "LedgerTransaction"
end box
participant znc as "Zinc"

txb -> txb: withItems(*): components

group build() <i>(sized)</i>
    txb -> txb: components.size(): sizedComponents
    txb -> txb: sizedComponents.serialize(): serializedSizedComponents
    txb -> wtx: WireTransaction(serializedSizedComponents, serializer)
end group

group deserialiseComponentGroup(serializedSizedComponents, serializer) <i>(unsized)</i>
    wtx -> wtx: deserialize(serializedSizedComponents): sizedComponents
    wtx -> wtx: unsize(sizedComponents): components
end group
    note right
        Unfortunately, we can't influence the call site of deserialiseComponentGroup.
        This means we can't influence as what types components are deserialised.
        Example: inputs are deserialized as StateRef.
        As a result, we can't store SizedStateRef in the serializedSizedComponents,
        because then deserialization will fail.
        This is even not going to work if SizedStateRef extended
        StateRef: unfortunately all Corda type such as
        StateRef, etc. are final.

        So we solve this by adding unsizing metadata to the transaction as an attachment.
        Our serializer will be made aware of this attachment, so during deserialization on
        the Corda side, it will always also unsize the components to their original size.
        This way, sizing is invisible to the user.

        This can be done by providing this metadata as extra properties on the serializationContext passed to
        deserialiseComponentGroups(). This should be possible, because it is the "TransactionBuilder" that
        constructs the WireTransaction, its component groups and passes it the serializationContext to use.

        BUT: how does tx receiver know that this metadata is valid and actually matches the
        metadata attachment? It will receive an AMQP-serialized WireTransaction, with serializationContext
        and should check after the fact that the metadata matched the deserialized attachment hash.
    end note

group toLedgerTransaction() <i>(unsized)</i>
    wtx -> wtx: deserialiseComponentGroups(*): components <i>(unsized)</i>
    wtx -> wtx: resolveComponents(components): resolvedComponents
    wtx -> ltx: LedgerTransaction(resolvedComponents)
    ltx -> ltx: verify()
end group

group toZincWitness() <i>(sized)</i>
    wtx -> wtx: resolveComponents(inputs): resolvedInputs
    wtx -> wtx: resolveComponents(references): resolvedReferences
    wtx -> wtx: collectUtxoNonces(inputs): inputUtxoNonces
    wtx -> wtx: collectUtxoNonces(references): referenceUtxoNonces
    wtx -> znc: ZincWitness(wtx, resolvedInputs, resolvedReferences, inputUtxoNonces, referenceUtxoNonces)
        note right
            TBD. Do we send the wtx as:

            1. Sized, serialized components with a separate sizing metadata struct with
                a lookup path for all arbitrary-length types in the hierarchy?
            3. sized, serialized components wrapped with Sized<Type>List wrapper
                for each list, or similar for other arbitrary-length types
            2. sized, <b>de</b>-serialized components wrapped with Sized<Type>List wrapper
                for each list, or similar for other arbitrary-length types


            In the case of 1), it means deserializing in Zinc,
            and when needed lookup the original length for
            a property which we know is arbitrary-length, so
            we can conditionally ignore padding whe making comparisons.
            A downside is that the creation of the separate sizing metadata struct on the Corda side is
            is not trivial and needs to be made such that lookups on Zinc side make sense.

            In the case of 2), it means that we pass around the Sized<Type>List wrappers instead of the
            original types, which makes it perhaps easier: this can be done on the Corda side when
            serializing the witness as JSON for transport to Zinc.
            On the other hand, all sized wrappers and their nesting needs
            to be hand built on the Zinc side, so Zinc can understand the witness structure.
            Deserialization is identical to option 1.

            In the case of 3), like option 2, it means that we pass around the Sized<Type>List wrappers instead of the
            original types.
            A big risk is if we can actually recreate from Zinc types the serialized form identically to what was created
            on the Corda side from Kotlin types. This is necessary for correct Merkle tree calculation.
        end note
end group

group Zinc.verify()

    group Comparing with hardcoded sized values
        znc -> znc: wtx.inputs[0].amount > 0
            note right
                These checks can work without needing metadata about sizing.
                We for simple checks on types like this, the standard struct defines
                the lenght, which allows comparisons. See `participants` below
                for an example which will NOT work like this and require
                sizing metadata
            end note
        znc -> znc: wtx.inputs[0].someIntval <= 23
        znc -> znc: wtx.inputs[0].amount > Amount(0, GBP)
        znc -> znc: wtx.outputs[0].owner.name = "Scott00000000000"
    end group

    group Comparing with other sized components
        znc -> znc: wtx.outputs[0].amount == wtx.outputs[0].amount
            note right
                These check will be fine without knowing metadata.
                We compare within the same transaction, so comparing
                sized to sized. We don't care about the original lengths.
            end note
        znc -> znc: wtx.inputs[0].owner != wtx.outputs[0].owner
        znc -> znc: wtx.inputs[0].owner.owningkey in command.signers
        znc -> znc: wtx.inputs[0].participants in command.signers
    end group

    group Transaction structure checks
    znc -> znc: noop
        note right
            Assumption:

            Not necessary: we never have to check the number of outputs, inputs, etc,
            since the Zinc circuit structure is unique for each command and already forces
            the number of components.

            E.g. If we we require 0 inputs and 1 outputs, the hardcoded witness structure will
            reflect this. Any witness passed to Zinc of other sizes will simpy fail.
            So we don't need to check this inside the circuit.

            Additionally, why would we ever define a fixed size of 2 outputs when
            the contract rules require exactly 1? Makes no sense.
        end note
    end group
end group
@enduml

PlantUML version 1.2019.07(Mon Jun 24 21:59:20 CEST 2019)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 1.8.0_232-b18
Operating System: Mac OS X
OS Version: 10.15.7
Default Encoding: UTF-8
Language: en
Country: GB
--></g></svg>