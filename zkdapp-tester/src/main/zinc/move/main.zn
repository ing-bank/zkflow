mod consts;
mod platform_node_digest_dto;
mod platform_component_group_leaf_digest_dto;
mod platform_zk_prover_transaction;
mod contract_rules;
mod platform_merkle_tree;
mod platform_utxo_digests;

use platform_utxo_digests::compute_input_utxo_digests;
use platform_utxo_digests::compute_reference_utxo_digests;
use platform_zk_prover_transaction::Witness;
use platform_component_group_leaf_digest_dto::ComponentGroupLeafDigestDto;
use platform_node_digest_dto::NodeDigestDto;
use consts::INPUT_GROUP_SIZE;
use consts::REFERENCE_GROUP_SIZE;
use contract_rules::check_contract_rules;
use platform_merkle_tree::build_merkle_tree;

//!
//! The 'move' main module.
//!

struct PublicInput {
    transaction_id: NodeDigestDto,
    input_hashes: [ComponentGroupLeafDigestDto; INPUT_GROUP_SIZE],
    reference_hashes: [ComponentGroupLeafDigestDto; REFERENCE_GROUP_SIZE],
}

fn main(witness: Witness) -> PublicInput {
    // Check contract rules
    check_contract_rules(witness.transaction);

    // Compute the transaction id
    let root_hash = build_merkle_tree(witness.transaction);

    PublicInput {
        transaction_id: NodeDigestDto::from_bits_to_bytes(root_hash),
        input_hashes: compute_input_utxo_digests(
            witness.transaction.inputs.components,
            witness.input_nonces,
        ),
        reference_hashes: compute_reference_utxo_digests(
            witness.transaction.references.components,
            witness.reference_nonces,
        ),
    }
}
