package com.ing.zkflow.zinc.poet.generate.structure

import com.ing.zkflow.common.serialization.KClassSerializerProvider
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import kotlinx.serialization.serializer
import net.corda.core.contracts.ContractState
import net.corda.core.internal.writeText
import java.nio.file.Paths
import java.util.ServiceLoader
import kotlin.reflect.full.isSubclassOf

private val json = Json {
    encodeDefaults = true // otherwise `comment` is not serialized
    prettyPrint = true
    prettyPrintIndent = "  "
}

const val GENERATE_ZKP_STRUCTURE = "generateZkpStructure"

@Serializable
data class ZkpStructure(
    @SerialName("__comment__")
    val comment: String = "!!!DO NOT MODIFY!!! This file is generated by the gradle task `$GENERATE_ZKP_STRUCTURE`",
    val structure: List<ZkpStructureType>,
)

fun main() {
    val commandDataSerializerRegistryProviders = ServiceLoader.load(KClassSerializerProvider::class.java)
    val structureTypes = commandDataSerializerRegistryProviders
        .asSequence()
        .map { it.get().klass }
        .filter { it.isSubclassOf(ContractState::class) }
        .flatMap { ZkpStructureGenerator.generate(it.serializer().descriptor).toFlattenedClassStructure() }
        .distinct()
        .toList()
    val structure = ZkpStructure(
        structure = structureTypes
    )
    val jsonString = json.encodeToString(ZkpStructure.serializer(), structure)
    Paths.get("src/main/zkp/structure.json").writeText(jsonString)
}
