//!
//! The 'BigDecimal' main module.
//!

const MAX_NUMBER_OF_DIGITS: u16 = 1024;

struct BigDecimal {
    sign: i8,
    integer: [u8; MAX_NUMBER_OF_DIGITS],
    fraction: [u8; MAX_NUMBER_OF_DIGITS]
}

impl BigDecimal {

    fn compareMagnitude(this: BigDecimal, that: BigDecimal) -> i8 {
        let mut result: i8 = 0 as i8;
        for i in 0..MAX_NUMBER_OF_DIGITS {
            if (result == 0 as i8) {
                result = if (this.integer[i] > that.integer[i]) {
                    1 as i8
                } else {
                    if (this.integer[i] < that.integer[i]) {
                        -1
                    } else {
                        0 as i8
                    }
                };
            }
        }

        if (result == 0 as i8) {
            for i in 0..MAX_NUMBER_OF_DIGITS {
                if (result == 0 as i8) {
                    result = if (this.fraction[i] > that.fraction[i]) {
                        1 as i8
                    } else {
                        if (this.fraction[i] < that.fraction[i]) {
                            -1
                        } else {
                            0 as i8
                        }
                    };
                }
            }
            result
        } else {
            result
        }
    }

    fn compare(this: BigDecimal, that: BigDecimal) -> i8 {
        if (this.sign == that.sign) {
            if (this.sign == 0 as i8) {
                0 as i8
            } else {
                this.sign * compareMagnitude(that, that)
            }
        } else {
            if (this.sign > that.sign) {
                1 as i8
            } else {
                -1
            }
        }
    }

    fn equalsArray(thisArray: [u8; MAX_NUMBER_OF_DIGITS], thatArray: [u8; MAX_NUMBER_OF_DIGITS]) -> bool {
        let mut eq = true;

        for i in 1 as u16..MAX_NUMBER_OF_DIGITS {
            if (thisArray[i] != thatArray[i]) {
                eq = eq && false
            }
        }
        eq
    }

    fn equals(this: BigDecimal, that: BigDecimal) -> bool {
        this.sign == that.sign
        && BigDecimal::equalsArray(this.integer, that.integer)
        && BigDecimal::equalsArray(this.fraction, that.fraction)
    }
}

fn main(left: BigDecimal, right: BigDecimal) -> i8 {
    BigDecimal::compare(left, right)
}
