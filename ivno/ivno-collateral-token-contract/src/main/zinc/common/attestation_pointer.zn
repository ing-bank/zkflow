mod platform_state_ref;
mod string_192;
mod nullable_unique_identifier;

use platform_state_ref::StateRef;
use platform_state_ref::SerializedStateRef;
use platform_state_ref::STATE_REF_LENGTH;

use string_192::String_192;
use string_192::SerializedString_192;
use string_192::STRING_192_LENGTH;

use nullable_unique_identifier::NullableUniqueIdentifier;
use nullable_unique_identifier::SerializedNullableUniqueIdentifier;
use nullable_unique_identifier::NULLABLE_UNIQUE_IDENTIFIER_LENGTH;

// AttestationPointer lengths
const ATTESTATION_POINTER_STATE_REF_LENGTH: u16 = STATE_REF_LENGTH;
const ATTESTATION_POINTER_STATE_CLASS_NAME_LENGTH: u16 = STRING_192_LENGTH;
const ATTESTATION_POINTER_STATE_LINEAR_ID_LENGTH: u16 = NULLABLE_UNIQUE_IDENTIFIER_LENGTH;

// AttestationPointer offsets
const ATTESTATION_POINTER_STATE_REF_OFFSET: u16 = 0;
const ATTESTATION_POINTER_STATE_CLASS_NAME_OFFSET: u16
    = ATTESTATION_POINTER_STATE_REF_OFFSET
    + ATTESTATION_POINTER_STATE_REF_LENGTH;
const ATTESTATION_POINTER_STATE_LINEAR_ID_OFFSET: u16
    = ATTESTATION_POINTER_STATE_CLASS_NAME_OFFSET
    + ATTESTATION_POINTER_STATE_CLASS_NAME_LENGTH;
const ATTESTATION_POINTER_LENGTH: u16
    = ATTESTATION_POINTER_STATE_LINEAR_ID_OFFSET
    + ATTESTATION_POINTER_STATE_LINEAR_ID_LENGTH;

type SerializedAttestationPointer = [u8; ATTESTATION_POINTER_LENGTH];

// Define type alias, to make the rest of the template cleaner
type AttestationPointerClassName = String_192;

struct AttestationPointer {
    state_ref: StateRef,
    state_class_name: AttestationPointerClassName,
    state_linear_id: NullableUniqueIdentifier,
}

impl AttestationPointer {
    fn empty() -> AttestationPointer {
        AttestationPointer {
            state_ref: StateRef::empty(),
            state_class_name: AttestationPointerClassName::empty(),
            state_linear_id: NullableUniqueIdentifier::null(),
        }
    }

    fn equals(this: AttestationPointer, that: AttestationPointer) -> bool {
        StateRef::equals(this.state_ref, that.state_ref)
            && AttestationPointerClassName::equals(this.state_class_name, that.state_class_name)
            && NullableUniqueIdentifier::equals(this.state_linear_id, that.state_linear_id)
    }

    fn deserialize(serialized: SerializedAttestationPointer) -> AttestationPointer {
        let state_ref = {
            let mut state_ref_bytes = [0; ATTESTATION_POINTER_STATE_REF_LENGTH];
            for i in 0..ATTESTATION_POINTER_STATE_REF_LENGTH {
                state_ref_bytes[i] = serialized[i + ATTESTATION_POINTER_STATE_REF_OFFSET];
            }
            StateRef::deserialize(state_ref_bytes)
        };

        let state_class_name = {
            let mut state_class_name_bytes = [0; ATTESTATION_POINTER_STATE_CLASS_NAME_LENGTH];
            for i in 0..ATTESTATION_POINTER_STATE_CLASS_NAME_LENGTH {
                state_class_name_bytes[i] = serialized[i + ATTESTATION_POINTER_STATE_CLASS_NAME_OFFSET];
            }
            AttestationPointerClassName::deserialize(state_class_name_bytes)
        };

        let state_linear_id = {
            let mut state_linear_id_bytes = [0; ATTESTATION_POINTER_STATE_LINEAR_ID_LENGTH];
            for i in 0..ATTESTATION_POINTER_STATE_LINEAR_ID_LENGTH {
                state_linear_id_bytes[i] = serialized[i + ATTESTATION_POINTER_STATE_LINEAR_ID_OFFSET];
            }
            NullableUniqueIdentifier::deserialize(state_linear_id_bytes)
        };

        AttestationPointer {
            state_ref: state_ref,
            state_class_name: state_class_name,
            state_linear_id: state_linear_id,
        }
    }
}
