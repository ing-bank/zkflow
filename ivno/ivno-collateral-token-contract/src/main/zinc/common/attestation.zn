//! Attestation module")
mod poly_anonymous_party_ed_dsa;
mod poly_anonymous_party_ed_dsa_collection_2;
mod attestation_metadata_map;
mod attestation_pointer;
mod attestation_status;
mod nullable_state_ref;
mod unique_identifier;

use poly_anonymous_party_ed_dsa::PolyAnonymousPartyEdDSA;
use poly_anonymous_party_ed_dsa::POLY_ANONYMOUS_PARTY_ED_DSA_LENGTH;

use poly_anonymous_party_ed_dsa_collection_2::PolyAnonymousPartyEdDSA_Collection_2;
use poly_anonymous_party_ed_dsa_collection_2::POLY_ANONYMOUS_PARTY_ED_DSA_COLLECTION_2_LENGTH;

use attestation_metadata_map::AttestationMetadataMap;
use attestation_metadata_map::ATTESTATION_METADATA_MAP_LENGTH;

use attestation_pointer::AttestationPointer;
use attestation_pointer::ATTESTATION_POINTER_LENGTH;

use attestation_status::AttestationStatus;
use attestation_status::ATTESTATION_STATUS_LENGTH;

use nullable_state_ref::NullableStateRef;
use nullable_state_ref::NULLABLE_STATE_REF_LENGTH;

use unique_identifier::UniqueIdentifier;
use unique_identifier::UNIQUE_IDENTIFIER_LENGTH;

// field lengths
const ATTESTATION_ATTESTOR_LENGTH: u16 = POLY_ANONYMOUS_PARTY_ED_DSA_LENGTH;
const ATTESTATION_ATTESTEES_LENGTH: u16 = POLY_ANONYMOUS_PARTY_ED_DSA_COLLECTION_2_LENGTH;
//const ATTESTATION_POINTER_LENGTH: u16 = ATTESTATION_POINTER_LENGTH;
//const ATTESTATION_STATUS_LENGTH: u16 = ATTESTATION_STATUS_LENGTH;
const ATTESTATION_METADATA_LENGTH: u16 = ATTESTATION_METADATA_MAP_LENGTH;
const ATTESTATION_LINEAR_ID_LENGTH: u16 = UNIQUE_IDENTIFIER_LENGTH;
const ATTESTATION_PREVIOUS_STATE_REF_LENGTH: u16 = NULLABLE_STATE_REF_LENGTH;

// field offsets
const ATTESTATION_ATTESTOR_OFFSET: u16 = 0;
const ATTESTATION_ATTESTEES_OFFSET: u16
    = ATTESTATION_ATTESTOR_OFFSET
    + ATTESTATION_ATTESTOR_LENGTH;
const ATTESTATION_POINTER_OFFSET: u16
    = ATTESTATION_ATTESTEES_OFFSET
    + ATTESTATION_ATTESTEES_LENGTH;
const ATTESTATION_STATUS_OFFSET: u16
    = ATTESTATION_POINTER_OFFSET
    + ATTESTATION_POINTER_LENGTH;
const ATTESTATION_METADATA_OFFSET: u16
    = ATTESTATION_STATUS_OFFSET
    + ATTESTATION_STATUS_LENGTH;
const ATTESTATION_LINEAR_ID_OFFSET: u16
    = ATTESTATION_METADATA_OFFSET
    + ATTESTATION_METADATA_LENGTH;
const ATTESTATION_PREVIOUS_STATE_REF_OFFSET: u16
    = ATTESTATION_LINEAR_ID_OFFSET
    + ATTESTATION_LINEAR_ID_LENGTH;

// length
const ATTESTATION_LENGTH: u16
    = ATTESTATION_PREVIOUS_STATE_REF_OFFSET
    + ATTESTATION_PREVIOUS_STATE_REF_LENGTH;


type SerializedAttestation = [u8; ATTESTATION_LENGTH];

struct Attestation {
    attestor: PolyAnonymousPartyEdDSA,
    attestees: PolyAnonymousPartyEdDSA_Collection_2,
    pointer: AttestationPointer,
    status: AttestationStatus,
    metadata: AttestationMetadataMap,
    linear_id: UniqueIdentifier,
    previous_state_ref: NullableStateRef,
}

impl Attestation {
    fn new(
        attestor: PolyAnonymousPartyEdDSA,
        attestees: PolyAnonymousPartyEdDSA_Collection_2,
        pointer: AttestationPointer,
        status: AttestationStatus,
        metadata: AttestationMetadataMap,
        linear_id: UniqueIdentifier,
        previous_state_ref: NullableStateRef
    ) -> Attestation {
        Attestation {
            attestor: attestor,
            attestees: attestees,
            pointer: pointer,
            status: status,
            metadata: metadata,
            linear_id: linear_id,
            previous_state_ref: previous_state_ref,
        }
    }

    fn empty() -> Attestation {
        Attestation {
            attestor: PolyAnonymousPartyEdDSA::empty(),
            attestees: PolyAnonymousPartyEdDSA_Collection_2::empty(),
            pointer: AttestationPointer::empty(),
            status: AttestationStatus::ACCEPTED,
            metadata: AttestationMetadataMap::empty(),
            linear_id: UniqueIdentifier::empty(),
            previous_state_ref: NullableStateRef::null()
        }
    }

    fn equals(this: Attestation, that: Attestation) -> bool {
        (PolyAnonymousPartyEdDSA::equals(this.attestor, that.attestor))
            && (PolyAnonymousPartyEdDSA_Collection_2::equals(this.attestees, that.attestees))
            && (AttestationPointer::equals(this.pointer, that.pointer))
            && (this.status == that.status)
            && (AttestationMetadataMap::equals(this.metadata, that.metadata))
            && (UniqueIdentifier::equals(this.linear_id, that.linear_id))
            && (NullableStateRef::equals(this.previous_state_ref, that.previous_state_ref))
    }

    fn deserialize(serialized: SerializedAttestation) -> Attestation {
        let attestor: PolyAnonymousPartyEdDSA = {
            let mut attestor_bytes: [u8; ATTESTATION_ATTESTOR_LENGTH] = [0; ATTESTATION_ATTESTOR_LENGTH];
            for attestor_i in 0..ATTESTATION_ATTESTOR_LENGTH {
                attestor_bytes[attestor_i] = serialized[attestor_i + ATTESTATION_ATTESTOR_OFFSET];
            }
            PolyAnonymousPartyEdDSA::deserialize(attestor_bytes)
        };
        let attestees: PolyAnonymousPartyEdDSA_Collection_2 = {
            let mut attestees_bytes: [u8; ATTESTATION_ATTESTEES_LENGTH] = [0; ATTESTATION_ATTESTEES_LENGTH];
            for attestees_i in 0..ATTESTATION_ATTESTEES_LENGTH {
                attestees_bytes[attestees_i] = serialized[attestees_i + ATTESTATION_ATTESTEES_OFFSET];
            }
            PolyAnonymousPartyEdDSA_Collection_2::deserialize(attestees_bytes)
        };
        let pointer: AttestationPointer = {
            let mut pointer_bytes: [u8; ATTESTATION_POINTER_LENGTH] = [0; ATTESTATION_POINTER_LENGTH];
            for pointer_i in 0..ATTESTATION_POINTER_LENGTH {
                pointer_bytes[pointer_i] = serialized[pointer_i + ATTESTATION_POINTER_OFFSET];
            }
            AttestationPointer::deserialize(pointer_bytes)
        };
        let status: AttestationStatus = {
            let mut status_bytes: [u8; ATTESTATION_STATUS_LENGTH] = [0; ATTESTATION_STATUS_LENGTH];
            for status_i in 0..ATTESTATION_STATUS_LENGTH {
                status_bytes[status_i] = serialized[status_i + ATTESTATION_STATUS_OFFSET];
            }
            AttestationStatus::deserialize(status_bytes)
        };
        let metadata: AttestationMetadataMap = {
            let mut metadata_bytes: [u8; ATTESTATION_METADATA_LENGTH] = [0; ATTESTATION_METADATA_LENGTH];
            for metadata_i in 0..ATTESTATION_METADATA_LENGTH {
                metadata_bytes[metadata_i] = serialized[metadata_i + ATTESTATION_METADATA_OFFSET];
            }
            AttestationMetadataMap::deserialize(metadata_bytes)
        };
        let linear_id: UniqueIdentifier = {
            let mut linear_id_bytes: [u8; ATTESTATION_LINEAR_ID_LENGTH] = [0; ATTESTATION_LINEAR_ID_LENGTH];
            for linear_id_i in 0..ATTESTATION_LINEAR_ID_LENGTH {
                linear_id_bytes[linear_id_i] = serialized[linear_id_i + ATTESTATION_LINEAR_ID_OFFSET];
            }
            UniqueIdentifier::deserialize(linear_id_bytes)
        };
        let previous_state_ref: NullableStateRef = {
            let mut previous_state_ref_bytes: [u8; ATTESTATION_PREVIOUS_STATE_REF_LENGTH] = [0; ATTESTATION_PREVIOUS_STATE_REF_LENGTH];
            for previous_state_ref_i in 0..ATTESTATION_PREVIOUS_STATE_REF_LENGTH {
                previous_state_ref_bytes[previous_state_ref_i] = serialized[previous_state_ref_i + ATTESTATION_PREVIOUS_STATE_REF_OFFSET];
            }
            NullableStateRef::deserialize(previous_state_ref_bytes)
        };

        Attestation {
            attestor: attestor,
            attestees: attestees,
            pointer: pointer,
            status: status,
            metadata: metadata,
            linear_id: linear_id,
            previous_state_ref: previous_state_ref,
        }
    }
}
