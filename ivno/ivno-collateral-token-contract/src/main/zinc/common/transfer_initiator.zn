mod platform_consts;
mod platform_integer;

use platform_consts::U32_BYTES;
use platform_integer::parse_u32;

// length
const TRANSFER_INITIATOR_LENGTH: u16 = U32_BYTES;

type SerializedTransferInitiator = [u8; TRANSFER_INITIATOR_LENGTH];

enum TransferInitiator {
    CURRENT_HOLDER = 0,
    TARGET_HOLDER = 1,
}

impl TransferInitiator {
    fn deserialize(serialized: [u8; TRANSFER_INITIATOR_LENGTH]) -> TransferInitiator {
        let index = parse_u32(serialized);
        assert!(index <= 1 as u32, "Not a TransferInitiator");
        match index as u8 {
            0 => TransferInitiator::CURRENT_HOLDER,
            1 => TransferInitiator::TARGET_HOLDER,
            _ => TransferInitiator::CURRENT_HOLDER, // Should never happen (see assert) but here to make the compiler happy
        }
    }
}
