mod platform_consts;
mod platform_integer;

use platform_consts::U32_BYTES;
use platform_integer::parse_u32;

// length
const TRANSFER_STATUS_LENGTH: u16 = U32_BYTES;

type SerializedTransferStatus = [u8; TRANSFER_STATUS_LENGTH];

enum TransferStatus {
    REQUESTED = 0,
    ACCEPTED = 1,
    REJECTED = 2,
    CANCELLED = 3,
    COMPLETED = 4,
}

impl TransferStatus {
    fn deserialize(serialized: [u8; TRANSFER_STATUS_LENGTH]) -> TransferStatus {
        let index = parse_u32(serialized);
        assert!(index <= 4 as u32, "Not a TransferStatus");
        match index as u8 {
            0 => TransferStatus::REQUESTED,
            1 => TransferStatus::ACCEPTED,
            2 => TransferStatus::REJECTED,
            3 => TransferStatus::CANCELLED,
            4 => TransferStatus::COMPLETED,
            _ => TransferStatus::REJECTED, // Should never happen (see assert) but here to make the compiler happy
        }
    }
}
