//! MembershipAttestation module")
mod attestation;
mod network_poly_party_ed_dsa;

use attestation::Attestation;
use attestation::ATTESTATION_LENGTH;

use network_poly_party_ed_dsa::NetworkPolyPartyEdDSA;
use network_poly_party_ed_dsa::NETWORK_POLY_PARTY_ED_DSA_LENGTH;

// field lengths
const MEMBERSHIP_ATTESTATION_NETWORK_LENGTH: u16 = NETWORK_POLY_PARTY_ED_DSA_LENGTH;
const MEMBERSHIP_ATTESTATION_ATTESTATION_LENGTH: u16 = ATTESTATION_LENGTH;

// field offsets
const MEMBERSHIP_ATTESTATION_NETWORK_OFFSET: u16
    = 0;
const MEMBERSHIP_ATTESTATION_ATTESTATION_OFFSET: u16
    = MEMBERSHIP_ATTESTATION_NETWORK_OFFSET
    + MEMBERSHIP_ATTESTATION_NETWORK_LENGTH;

// length
const MEMBERSHIP_ATTESTATION_LENGTH: u16
    = MEMBERSHIP_ATTESTATION_ATTESTATION_OFFSET
    + MEMBERSHIP_ATTESTATION_ATTESTATION_LENGTH;


type SerializedMembershipAttestation = [u8; MEMBERSHIP_ATTESTATION_LENGTH];

struct MembershipAttestation {
    network: NetworkPolyPartyEdDSA,
    attestation: Attestation,
}

impl MembershipAttestation {
    fn new(network: NetworkPolyPartyEdDSA, an_attestation: Attestation) -> MembershipAttestation {
        MembershipAttestation {
            network: network,
            attestation: an_attestation,
        }
    }

    fn empty() -> MembershipAttestation {
        MembershipAttestation {
            network: NetworkPolyPartyEdDSA::empty(),
            attestation: Attestation::empty()
        }
    }

    fn equals(this: MembershipAttestation, that: MembershipAttestation) -> bool {
        (NetworkPolyPartyEdDSA::equals(this.network, that.network))
            && (Attestation::equals(this.attestation, that.attestation))
    }

    fn deserialize(serialized: SerializedMembershipAttestation) -> MembershipAttestation {
        let network: NetworkPolyPartyEdDSA = {
            let mut network_bytes: [u8; MEMBERSHIP_ATTESTATION_NETWORK_LENGTH] = [0; MEMBERSHIP_ATTESTATION_NETWORK_LENGTH];
            for network_i in 0..MEMBERSHIP_ATTESTATION_NETWORK_LENGTH {
                network_bytes[network_i] = serialized[network_i + MEMBERSHIP_ATTESTATION_NETWORK_OFFSET];
            }
            NetworkPolyPartyEdDSA::deserialize(network_bytes)
        };
        let an_attestation: Attestation = {
            let mut attestation_bytes: [u8; MEMBERSHIP_ATTESTATION_ATTESTATION_LENGTH] = [0; MEMBERSHIP_ATTESTATION_ATTESTATION_LENGTH];
            for attestation_i in 0..MEMBERSHIP_ATTESTATION_ATTESTATION_LENGTH {
                attestation_bytes[attestation_i] = serialized[attestation_i + MEMBERSHIP_ATTESTATION_ATTESTATION_OFFSET];
            }
            Attestation::deserialize(attestation_bytes)
        };

        MembershipAttestation {
            network: network,
            attestation: an_attestation,
        }
    }
}
