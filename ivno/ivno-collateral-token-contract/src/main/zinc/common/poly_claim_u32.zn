mod platform_serial_name;
mod claim_u32;

use claim_u32::ClaimU32;
use claim_u32::CLAIM_U32_LENGTH;

// lengths
const POLY_CLAIM_U32_SERIAL_NAME_LENGTH: u16 = platform_serial_name::SERIAL_NAME_LENGTH;
const POLY_CLAIM_U32_VALUE_LENGTH: u16 = CLAIM_U32_LENGTH;

// offsets
const POLY_CLAIM_U32_SERIAL_NAME_OFFSET: u16
    = 0;
const POLY_CLAIM_U32_VALUE_OFFSET: u16
    = POLY_CLAIM_U32_SERIAL_NAME_OFFSET
    + POLY_CLAIM_U32_SERIAL_NAME_LENGTH;

// length
const POLY_CLAIM_U32_LENGTH: u16
    = POLY_CLAIM_U32_VALUE_OFFSET
    + POLY_CLAIM_U32_VALUE_LENGTH;

type SerializedPolyClaimU32 = [u8; POLY_CLAIM_U32_LENGTH];

struct PolyClaimU32 {
    value: ClaimU32,
}

impl PolyClaimU32 {
    fn print_structure() {
        dbg!("Size of PolyClaimU32");
        dbg!("- LENGTH: {}", POLY_CLAIM_U32_LENGTH);
        dbg!("Structure of PolyClaimU32");
        dbg!("- SERIAL_NAME: {}", POLY_CLAIM_U32_SERIAL_NAME_LENGTH);
        dbg!("- VALUE:       {}", POLY_CLAIM_U32_VALUE_LENGTH);
        dbg!("");
        ClaimU32::print_structure();
    }

    fn empty() -> PolyClaimU32 {
        PolyClaimU32 {
            value: ClaimU32::empty(),
        }
    }

    fn equals(this: PolyClaimU32, that: PolyClaimU32) -> bool {
        ClaimU32::equals(this.value, that.value)
    }

    fn deserialize(serialized: SerializedPolyClaimU32) -> PolyClaimU32 {
        let value = {
            let mut value_bytes = [0; POLY_CLAIM_U32_VALUE_LENGTH];
            for i in 0..POLY_CLAIM_U32_VALUE_LENGTH {
                value_bytes[i] = serialized[i + POLY_CLAIM_U32_VALUE_OFFSET];
            }
            ClaimU32::deserialize(value_bytes)
        };
        PolyClaimU32 {
            value: value,
        }
    }
}
