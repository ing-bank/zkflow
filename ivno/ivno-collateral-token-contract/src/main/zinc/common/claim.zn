// Claim includes a value of generic type. Currently, Claim is tested against a String of length 7 as its value.

mod string_20;
mod string_7;

use string_20::String_20;
use string_20::STRING_20_LENGTH;

use string_7::String_7;
use string_7::STRING_7_LENGTH;

const CLAIM_PROPERTY_LENGTH: u16 = STRING_20_LENGTH;
const CLAIM_VALUE_LENGTH: u16 = STRING_7_LENGTH;

const CLAIM_PROPERTY_OFFSET: u16 = 0;
const CLAIM_VALUE_OFFSET: u16
    = CLAIM_PROPERTY_OFFSET
    + CLAIM_PROPERTY_LENGTH;
const CLAIM_LENGTH: u16
    = CLAIM_VALUE_OFFSET
    + CLAIM_VALUE_LENGTH;

type SerializedClaim = [u8; CLAIM_LENGTH];

struct Claim {
    property: String_20,
    value: String_7,
}

impl Claim {
    fn equals(this: Claim, that: Claim) -> bool {
        String_20::equals(this.property, that.property)
            && String_7::equals(this.value, that.value)
    }

    fn deserialize(serialized: SerializedClaim) -> Claim {
        let property = {
            let mut property_bytes = [0; CLAIM_PROPERTY_LENGTH];
            for i in 0..CLAIM_PROPERTY_LENGTH {
                property_bytes[i] = serialized[i + CLAIM_PROPERTY_OFFSET];
            }
            String_20::deserialize(property_bytes)
        };

        let value = {
            let mut value_bytes = [0; CLAIM_VALUE_LENGTH];
            for i in 0..CLAIM_VALUE_LENGTH {
                value_bytes[i] = serialized[i + CLAIM_VALUE_OFFSET];
            }
            String_7::deserialize(value_bytes)
        };

        Claim {
            property: property,
            value: value,
        }
    }
}