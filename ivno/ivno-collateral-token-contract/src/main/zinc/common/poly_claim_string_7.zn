mod platform_serial_name;
mod claim_string_7;

use claim_string_7::ClaimString_7;
use claim_string_7::CLAIM_STRING_7_LENGTH;

// lengths
const POLY_CLAIM_STRING_7_SERIAL_NAME_LENGTH: u16 = platform_serial_name::SERIAL_NAME_LENGTH;
const POLY_CLAIM_STRING_7_VALUE_LENGTH: u16 = CLAIM_STRING_7_LENGTH;

// offsets
const POLY_CLAIM_STRING_7_SERIAL_NAME_OFFSET: u16
    = 0;
const POLY_CLAIM_STRING_7_VALUE_OFFSET: u16
    = POLY_CLAIM_STRING_7_SERIAL_NAME_OFFSET
    + POLY_CLAIM_STRING_7_SERIAL_NAME_LENGTH;

// length
const POLY_CLAIM_STRING_7_LENGTH: u16
    = POLY_CLAIM_STRING_7_VALUE_OFFSET
    + POLY_CLAIM_STRING_7_VALUE_LENGTH;

type SerializedPolyClaimString_7 = [u8; POLY_CLAIM_STRING_7_LENGTH];

struct PolyClaimString_7 {
    value: ClaimString_7,
}

impl PolyClaimString_7 {
    fn empty() -> PolyClaimString_7 {
        PolyClaimString_7 {
            value: ClaimString_7::empty(),
        }
    }

    fn equals(this: PolyClaimString_7, that: PolyClaimString_7) -> bool {
        ClaimString_7::equals(this.value, that.value)
    }

    fn deserialize(serialized: SerializedPolyClaimString_7) -> PolyClaimString_7 {
        let value = {
            let mut value_bytes = [0; POLY_CLAIM_STRING_7_VALUE_LENGTH];
            for i in 0..POLY_CLAIM_STRING_7_VALUE_LENGTH {
                value_bytes[i] = serialized[i + POLY_CLAIM_STRING_7_VALUE_OFFSET];
            }
            ClaimString_7::deserialize(value_bytes)
        };
        PolyClaimString_7 {
            value: value,
        }
    }
}