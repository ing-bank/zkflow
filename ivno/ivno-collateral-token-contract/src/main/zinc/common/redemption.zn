mod party_ed_dsa;
mod big_decimal_amount_linear_pointer;
mod redemption_status;
mod platform_instant;
mod string_20;
mod unique_identifier;

use party_ed_dsa::PartyEdDSA;
use party_ed_dsa::PARTY_ED_DSA_LENGTH;

use big_decimal_amount_linear_pointer::BigDecimalAmountLinearPointer;
use big_decimal_amount_linear_pointer::BIG_DECIMAL_AMOUNT_LINEAR_POINTER_LENGTH;

use redemption_status::RedemptionStatus;
use redemption_status::REDEMPTION_STATUS_LENGTH;

use platform_instant::Instant;
use platform_instant::INSTANT_LENGTH;

use string_20::String_20;
use string_20::STRING_20_LENGTH;

use unique_identifier::UniqueIdentifier;
use unique_identifier::UNIQUE_IDENTIFIER_LENGTH;

const REDEMPTION_REDEEMER_LENGTH: u16 = PARTY_ED_DSA_LENGTH;
const REDEMPTION_CUSTODIAN_LENGTH: u16 = PARTY_ED_DSA_LENGTH;
const REDEMPTION_TOKEN_ISSUING_ENTITY_LENGTH: u16 = PARTY_ED_DSA_LENGTH;
const REDEMPTION_AMOUNT_LENGTH: u16 = BIG_DECIMAL_AMOUNT_LINEAR_POINTER_LENGTH;
// const REDEMPTION_STATUS_LENGTH: u16 = REDEMPTION_STATUS_LENGTH;
const REDEMPTION_TIMESTAMP_LENGTH: u16 = INSTANT_LENGTH;
const REDEMPTION_ACCOUNT_ID_LENGTH: u16 = STRING_20_LENGTH;
const REDEMPTION_LINEAR_ID_LENGTH: u16 = UNIQUE_IDENTIFIER_LENGTH;

const REDEMPTION_REDEEMER_OFFSET: u16 = 0;
const REDEMPTION_CUSTODIAN_OFFSET: u16
    = REDEMPTION_REDEEMER_OFFSET
    + REDEMPTION_REDEEMER_LENGTH;
const REDEMPTION_TOKEN_ISSUING_ENTITY_OFFSET: u16
    = REDEMPTION_CUSTODIAN_OFFSET
    + REDEMPTION_CUSTODIAN_LENGTH;
const REDEMPTION_AMOUNT_OFFSET: u16
    = REDEMPTION_TOKEN_ISSUING_ENTITY_OFFSET
    + REDEMPTION_TOKEN_ISSUING_ENTITY_LENGTH;
const REDEMPTION_STATUS_OFFSET: u16
    = REDEMPTION_AMOUNT_OFFSET
    + REDEMPTION_AMOUNT_LENGTH;
const REDEMPTION_TIMESTAMP_OFFSET: u16
    = REDEMPTION_STATUS_OFFSET
    + REDEMPTION_STATUS_LENGTH;
const REDEMPTION_ACCOUNT_ID_OFFSET: u16
    = REDEMPTION_TIMESTAMP_OFFSET
    + REDEMPTION_TIMESTAMP_LENGTH;
const REDEMPTION_LINEAR_ID_OFFSET: u16
    = REDEMPTION_ACCOUNT_ID_OFFSET
    + REDEMPTION_ACCOUNT_ID_LENGTH;

const REDEMPTION_LENGTH: u16
    = REDEMPTION_LINEAR_ID_OFFSET
    + REDEMPTION_LINEAR_ID_LENGTH;

type SerializedRedemption = [u8; REDEMPTION_LENGTH];

struct Redemption {
    redeemer: PartyEdDSA,
    custodian: PartyEdDSA,
    token_issuing_entity: PartyEdDSA,
    amount: BigDecimalAmountLinearPointer,
    status: RedemptionStatus,
    timestamp: Instant,
    account_id: String_20,
    linear_id: UniqueIdentifier,
}

impl Redemption {
    fn new(redeemer: PartyEdDSA, custodian: PartyEdDSA, token_issuing_entity: PartyEdDSA, amount: BigDecimalAmountLinearPointer, status: RedemptionStatus, timestamp: Instant, account_id: String_20, linear_id: UniqueIdentifier) -> Redemption {
        Redemption {
            redeemer: redeemer,
            custodian: custodian,
            token_issuing_entity: token_issuing_entity,
            amount: amount,
            status: status,
            timestamp: timestamp,
            account_id: account_id,
            linear_id: linear_id,
        }
    }

    fn empty() -> Redemption {
        Redemption {
            redeemer: PartyEdDSA::empty(),
            custodian: PartyEdDSA::empty(),
            token_issuing_entity: PartyEdDSA::empty(),
            amount: BigDecimalAmountLinearPointer::empty(),
            status: RedemptionStatus::REQUESTED,
            timestamp: Instant::empty(),
            account_id: String_20::empty(),
            linear_id: UniqueIdentifier::empty()
        }
    }

    fn equals(this: Redemption, that: Redemption) -> bool {
        (PartyEdDSA::equals(this.redeemer, that.redeemer))
         && (PartyEdDSA::equals(this.custodian, that.custodian))
         && (PartyEdDSA::equals(this.token_issuing_entity, that.token_issuing_entity))
         && (BigDecimalAmountLinearPointer::equals(this.amount, that.amount))
         && (this.status == that.status)
         && (Instant::equals(this.timestamp, that.timestamp))
         && (String_20::equals(this.account_id, that.account_id))
         && (UniqueIdentifier::equals(this.linear_id, that.linear_id))
    }

    fn deserialize(serialized: SerializedRedemption) -> Redemption {
        let redeemer: PartyEdDSA = {
            let mut redeemer_bytes: [u8; REDEMPTION_REDEEMER_LENGTH] = [0; REDEMPTION_REDEEMER_LENGTH];
            for i in 0..REDEMPTION_REDEEMER_LENGTH {
                redeemer_bytes[i] = serialized[i + REDEMPTION_REDEEMER_LENGTH];
            }
            PartyEdDSA::deserialize(redeemer_bytes)
        };
        let custodian: PartyEdDSA = {
            let mut custodian_bytes: [u8; REDEMPTION_CUSTODIAN_LENGTH] = [0; REDEMPTION_CUSTODIAN_LENGTH];
            for i in 0..REDEMPTION_CUSTODIAN_LENGTH {
                custodian_bytes[i] = serialized[i + REDEMPTION_CUSTODIAN_OFFSET];
            }
            PartyEdDSA::deserialize(custodian_bytes)
        };
        let token_issuing_entity: PartyEdDSA = {
            let mut token_issuing_entity_bytes: [u8; REDEMPTION_TOKEN_ISSUING_ENTITY_LENGTH] = [0; REDEMPTION_TOKEN_ISSUING_ENTITY_LENGTH];
            for i in 0..REDEMPTION_TOKEN_ISSUING_ENTITY_LENGTH {
                token_issuing_entity_bytes[i] = serialized[i + REDEMPTION_TOKEN_ISSUING_ENTITY_OFFSET];
            }
            PartyEdDSA::deserialize(token_issuing_entity_bytes)
        };
        let amount: BigDecimalAmountLinearPointer = {
            let mut amount_bytes: [u8; REDEMPTION_AMOUNT_LENGTH] = [0; REDEMPTION_AMOUNT_LENGTH];
            for i in 0..REDEMPTION_AMOUNT_LENGTH {
                amount_bytes[i] = serialized[i + REDEMPTION_AMOUNT_OFFSET];
            }
            BigDecimalAmountLinearPointer::deserialize(amount_bytes)
        };
        let status: RedemptionStatus = {
            let mut status_bytes: [u8; REDEMPTION_STATUS_LENGTH] = [0; REDEMPTION_STATUS_LENGTH];
            for i in 0..REDEMPTION_STATUS_LENGTH {
                status_bytes[i] = serialized[i + REDEMPTION_STATUS_OFFSET];
            }
            RedemptionStatus::deserialize(status_bytes)
        };
        let timestamp: Instant = {
            let mut timestamp_bytes: [u8; REDEMPTION_TIMESTAMP_LENGTH] = [0; REDEMPTION_TIMESTAMP_LENGTH];
            for i in 0..REDEMPTION_TIMESTAMP_LENGTH {
                timestamp_bytes[i] = serialized[i + REDEMPTION_TIMESTAMP_OFFSET];
            }
            Instant::deserialize(timestamp_bytes)
        };
        let account_id: String_20 = {
            let mut account_id_bytes: [u8; REDEMPTION_ACCOUNT_ID_LENGTH] = [0; REDEMPTION_ACCOUNT_ID_LENGTH];
            for i in 0..REDEMPTION_ACCOUNT_ID_LENGTH {
                account_id_bytes[i] = serialized[i + REDEMPTION_ACCOUNT_ID_OFFSET];
            }
            String_20::deserialize(account_id_bytes)
        };
        let linear_id: UniqueIdentifier = {
            let mut linear_id_bytes: [u8; REDEMPTION_LINEAR_ID_LENGTH] = [0; REDEMPTION_LINEAR_ID_LENGTH];
            for i in 0..REDEMPTION_LINEAR_ID_LENGTH {
                linear_id_bytes[i] = serialized[i + REDEMPTION_LINEAR_ID_OFFSET];
            }
            UniqueIdentifier::deserialize(linear_id_bytes)
        };

        Redemption {
            redeemer: redeemer,
            custodian: custodian,
            token_issuing_entity: token_issuing_entity,
            amount: amount,
            status: status,
            timestamp: timestamp,
            account_id: account_id,
            linear_id: linear_id,
        }
    }
}
