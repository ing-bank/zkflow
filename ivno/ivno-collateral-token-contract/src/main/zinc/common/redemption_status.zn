mod platform_consts;
mod platform_integer;

use platform_consts::U32_BYTES;
use platform_integer::parse_u32;

// length
const REDEMPTION_STATUS_LENGTH: u16 = U32_BYTES;

type SerializedRedemptionStatus = [u8; REDEMPTION_STATUS_LENGTH];

enum RedemptionStatus {
    REQUESTED = 0,
    COMPLETED = 1,
    REJECTED = 2,
}

impl RedemptionStatus {
    fn deserialize(serialized: SerializedRedemptionStatus) -> RedemptionStatus {
        let index = parse_u32(serialized);
        assert!(index <= 2 as u32, "Not a RedemptionStatus");
        match index as u8 {
            0 => RedemptionStatus::REQUESTED,
            1 => RedemptionStatus::COMPLETED,
            2 => RedemptionStatus::REJECTED,
            _ => RedemptionStatus::REJECTED, // Should never happen (see assert) but here to make the compiler happy
        }
    }
}
