mod poly_anonymous_party_ed_dsa;
mod big_decimal_amount_linear_pointer;
mod transfer_initiator;
mod transfer_status;
mod platform_instant;
mod string_20;
mod unique_identifier;

use poly_anonymous_party_ed_dsa::PolyAnonymousPartyEdDSA;
use poly_anonymous_party_ed_dsa::POLY_ANONYMOUS_PARTY_ED_DSA_LENGTH;

use big_decimal_amount_linear_pointer::BigDecimalAmountLinearPointer;
use big_decimal_amount_linear_pointer::BIG_DECIMAL_AMOUNT_LINEAR_POINTER_LENGTH;

use transfer_initiator::TransferInitiator;
use transfer_initiator::TRANSFER_INITIATOR_LENGTH;

use transfer_status::TransferStatus;
use transfer_status::TRANSFER_STATUS_LENGTH;

use platform_instant::Instant;
use platform_instant::INSTANT_LENGTH;

use string_20::String_20;
use string_20::STRING_20_LENGTH;

use unique_identifier::UniqueIdentifier;
use unique_identifier::UNIQUE_IDENTIFIER_LENGTH;

// field lengths
const TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_CURRENT_TOKEN_HOLDER_LENGTH: u16 = POLY_ANONYMOUS_PARTY_ED_DSA_LENGTH;
const TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TARGET_TOKEN_HOLDER_LENGTH: u16 = POLY_ANONYMOUS_PARTY_ED_DSA_LENGTH;
const TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_INITIATOR_LENGTH: u16 = TRANSFER_INITIATOR_LENGTH;
const TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_AMOUNT_LENGTH: u16 = BIG_DECIMAL_AMOUNT_LINEAR_POINTER_LENGTH;
const TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_STATUS_LENGTH: u16 = TRANSFER_STATUS_LENGTH;
const TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TIMESTAMP_LENGTH: u16 = INSTANT_LENGTH;
const TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_CURRENT_TOKEN_HOLDER_ACCOUNT_ID_LENGTH: u16 = STRING_20_LENGTH;
const TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TARGET_TOKEN_HOLDER_ACCOUNT_ID_LENGTH: u16 = STRING_20_LENGTH;
const TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_LINEAR_ID_LENGTH: u16 = UNIQUE_IDENTIFIER_LENGTH;

// field offsets
const TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_CURRENT_TOKEN_HOLDER_OFFSET: u16 = 0;
const TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TARGET_TOKEN_HOLDER_OFFSET: u16
    = TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_CURRENT_TOKEN_HOLDER_OFFSET
    + TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_CURRENT_TOKEN_HOLDER_LENGTH;
const TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_INITIATOR_OFFSET: u16
    = TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TARGET_TOKEN_HOLDER_OFFSET
    + TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TARGET_TOKEN_HOLDER_LENGTH;
const TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_AMOUNT_OFFSET: u16
    = TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_INITIATOR_OFFSET
    + TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_INITIATOR_LENGTH;
const TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_STATUS_OFFSET: u16
    = TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_AMOUNT_OFFSET
    + TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_AMOUNT_LENGTH;
const TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TIMESTAMP_OFFSET: u16
    = TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_STATUS_OFFSET
    + TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_STATUS_LENGTH;
const TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_CURRENT_TOKEN_HOLDER_ACCOUNT_ID_OFFSET: u16
    = TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TIMESTAMP_OFFSET
    + TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TIMESTAMP_LENGTH;
const TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TARGET_TOKEN_HOLDER_ACCOUNT_ID_OFFSET: u16
    = TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_CURRENT_TOKEN_HOLDER_ACCOUNT_ID_OFFSET
    + TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_CURRENT_TOKEN_HOLDER_ACCOUNT_ID_LENGTH;
const TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_LINEAR_ID_OFFSET: u16
    = TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TARGET_TOKEN_HOLDER_ACCOUNT_ID_OFFSET
    + TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TARGET_TOKEN_HOLDER_ACCOUNT_ID_LENGTH;


// length
const TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_LENGTH: u16
    = TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_LINEAR_ID_OFFSET
    + TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_LINEAR_ID_LENGTH;


type SerializedTransferPolyAnonymousPartyEdDSAPolyAnonymousPartyEdDSA = [u8; TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_LENGTH];

struct TransferPolyAnonymousPartyEdDSAPolyAnonymousPartyEdDSA {
    current_token_holder: PolyAnonymousPartyEdDSA,
    target_token_holder: PolyAnonymousPartyEdDSA,
    initiator: TransferInitiator,
    amount: BigDecimalAmountLinearPointer,
    status: TransferStatus,
    timestamp: Instant,
    current_token_holder_account_id: String_20,
    target_token_holder_account_id: String_20,
    linear_id: UniqueIdentifier,
}

impl TransferPolyAnonymousPartyEdDSAPolyAnonymousPartyEdDSA {
    fn empty() -> TransferPolyAnonymousPartyEdDSAPolyAnonymousPartyEdDSA {
        TransferPolyAnonymousPartyEdDSAPolyAnonymousPartyEdDSA {
            current_token_holder: PolyAnonymousPartyEdDSA::empty(),
            target_token_holder: PolyAnonymousPartyEdDSA::empty(),
            initiator: TransferInitiator::CURRENT_HOLDER,
            amount: BigDecimalAmountLinearPointer::empty(),
            status: TransferStatus::REQUESTED,
            timestamp: Instant::empty(),
            current_token_holder_account_id: String_20::empty(),
            target_token_holder_account_id: String_20::empty(),
            linear_id: UniqueIdentifier::empty()
        }
    }

    fn equals(this: TransferPolyAnonymousPartyEdDSAPolyAnonymousPartyEdDSA, that: TransferPolyAnonymousPartyEdDSAPolyAnonymousPartyEdDSA) -> bool {
        (PolyAnonymousPartyEdDSA::equals(this.current_token_holder, that.current_token_holder))
            && (PolyAnonymousPartyEdDSA::equals(this.target_token_holder, that.target_token_holder))
            && (this.initiator == that.initiator)
            && (BigDecimalAmountLinearPointer::equals(this.amount, that.amount))
            && (this.status == that.status)
            && (Instant::equals(this.timestamp, that.timestamp))
            && (String_20::equals(this.current_token_holder_account_id, that.current_token_holder_account_id))
            && (String_20::equals(this.target_token_holder_account_id, that.target_token_holder_account_id))
            && (UniqueIdentifier::equals(this.linear_id, that.linear_id))
    }

    fn deserialize(serialized: SerializedTransferPolyAnonymousPartyEdDSAPolyAnonymousPartyEdDSA) -> TransferPolyAnonymousPartyEdDSAPolyAnonymousPartyEdDSA {
        let current_token_holder: PolyAnonymousPartyEdDSA = {
            let mut current_token_holder_bytes: [u8; TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_CURRENT_TOKEN_HOLDER_LENGTH] = [0; TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_CURRENT_TOKEN_HOLDER_LENGTH];
            for current_token_holder_i in 0..TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_CURRENT_TOKEN_HOLDER_LENGTH {
                current_token_holder_bytes[current_token_holder_i] = serialized[current_token_holder_i + TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_CURRENT_TOKEN_HOLDER_OFFSET];
            }
            PolyAnonymousPartyEdDSA::deserialize(current_token_holder_bytes)
        };
        let target_token_holder: PolyAnonymousPartyEdDSA = {
            let mut target_token_holder_bytes: [u8; TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TARGET_TOKEN_HOLDER_LENGTH] = [0; TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TARGET_TOKEN_HOLDER_LENGTH];
            for target_token_holder_i in 0..TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TARGET_TOKEN_HOLDER_LENGTH {
                target_token_holder_bytes[target_token_holder_i] = serialized[target_token_holder_i + TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TARGET_TOKEN_HOLDER_OFFSET];
            }
            PolyAnonymousPartyEdDSA::deserialize(target_token_holder_bytes)
        };
        let initiator: TransferInitiator = {
            let mut initiator_bytes: [u8; TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_INITIATOR_LENGTH] = [0; TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_INITIATOR_LENGTH];
            for initiator_i in 0..TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_INITIATOR_LENGTH {
                initiator_bytes[initiator_i] = serialized[initiator_i + TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_INITIATOR_OFFSET];
            }
            TransferInitiator::deserialize(initiator_bytes)
        };
        let amount: BigDecimalAmountLinearPointer = {
            let mut amount_bytes: [u8; TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_AMOUNT_LENGTH] = [0; TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_AMOUNT_LENGTH];
            for amount_i in 0..TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_AMOUNT_LENGTH {
                amount_bytes[amount_i] = serialized[amount_i + TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_AMOUNT_OFFSET];
            }
            BigDecimalAmountLinearPointer::deserialize(amount_bytes)
        };
        let status: TransferStatus = {
            let mut status_bytes: [u8; TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_STATUS_LENGTH] = [0; TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_STATUS_LENGTH];
            for status_i in 0..TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_STATUS_LENGTH {
                status_bytes[status_i] = serialized[status_i + TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_STATUS_OFFSET];
            }
            TransferStatus::deserialize(status_bytes)
        };
        let timestamp: Instant = {
            let mut timestamp_bytes: [u8; TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TIMESTAMP_LENGTH] = [0; TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TIMESTAMP_LENGTH];
            for timestamp_i in 0..TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TIMESTAMP_LENGTH {
                timestamp_bytes[timestamp_i] = serialized[timestamp_i + TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TIMESTAMP_OFFSET];
            }
            Instant::deserialize(timestamp_bytes)
        };
        let current_token_holder_account_id: String_20 = {
            let mut current_token_holder_account_id_bytes: [u8; TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_CURRENT_TOKEN_HOLDER_ACCOUNT_ID_LENGTH] = [0; TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_CURRENT_TOKEN_HOLDER_ACCOUNT_ID_LENGTH];
            for current_token_holder_account_id_i in 0..TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_CURRENT_TOKEN_HOLDER_ACCOUNT_ID_LENGTH {
                current_token_holder_account_id_bytes[current_token_holder_account_id_i] = serialized[current_token_holder_account_id_i + TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_CURRENT_TOKEN_HOLDER_ACCOUNT_ID_OFFSET];
            }
            String_20::deserialize(current_token_holder_account_id_bytes)
        };
        let target_token_holder_account_id: String_20 = {
            let mut target_token_holder_account_id_bytes: [u8; TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TARGET_TOKEN_HOLDER_ACCOUNT_ID_LENGTH] = [0; TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TARGET_TOKEN_HOLDER_ACCOUNT_ID_LENGTH];
            for target_token_holder_account_id_i in 0..TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TARGET_TOKEN_HOLDER_ACCOUNT_ID_LENGTH {
                target_token_holder_account_id_bytes[target_token_holder_account_id_i] = serialized[target_token_holder_account_id_i + TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_TARGET_TOKEN_HOLDER_ACCOUNT_ID_OFFSET];
            }
            String_20::deserialize(target_token_holder_account_id_bytes)
        };
        let linear_id: UniqueIdentifier = {
            let mut linear_id_bytes: [u8; TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_LINEAR_ID_LENGTH] = [0; TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_LINEAR_ID_LENGTH];
            for linear_id_i in 0..TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_LINEAR_ID_LENGTH {
                linear_id_bytes[linear_id_i] = serialized[linear_id_i + TRANSFER_POLY_ANONYMOUS_PARTY_ED_DSA_POLY_ANONYMOUS_PARTY_ED_DSA_LINEAR_ID_OFFSET];
            }
            UniqueIdentifier::deserialize(linear_id_bytes)
        };

        TransferPolyAnonymousPartyEdDSAPolyAnonymousPartyEdDSA {
            current_token_holder: current_token_holder,
            target_token_holder: target_token_holder,
            initiator: initiator,
            amount: amount,
            status: status,
            timestamp: timestamp,
            current_token_holder_account_id: current_token_holder_account_id,
            target_token_holder_account_id: target_token_holder_account_id,
            linear_id: linear_id,
        }
    }

    fn new(current_token_holder: PolyAnonymousPartyEdDSA, target_token_holder: PolyAnonymousPartyEdDSA, initiator: TransferInitiator, amount: BigDecimalAmountLinearPointer, status: TransferStatus, timestamp: Instant, current_token_holder_account_id: String_20, target_token_holder_account_id: String_20, linear_id: UniqueIdentifier) -> TransferPolyAnonymousPartyEdDSAPolyAnonymousPartyEdDSA {
        TransferPolyAnonymousPartyEdDSAPolyAnonymousPartyEdDSA {
            current_token_holder: current_token_holder,
            target_token_holder: target_token_holder,
            initiator: initiator,
            amount: amount,
            status: status,
            timestamp: timestamp,
            current_token_holder_account_id: current_token_holder_account_id,
            target_token_holder_account_id: target_token_holder_account_id,
            linear_id: linear_id,
        }
    }
}
