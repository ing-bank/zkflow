mod network_poly_party_ed_dsa;
mod poly_party_ed_dsa;
mod poly_claim_u32_collection_2;
mod setting_u32_collection_3;
mod unique_identifier;
mod nullable_state_ref;
mod platform_consts;
mod platform_integer;

use network_poly_party_ed_dsa::NetworkPolyPartyEdDSA;
use network_poly_party_ed_dsa::NETWORK_POLY_PARTY_ED_DSA_LENGTH;

use poly_party_ed_dsa::PolyPartyEdDSA;
use poly_party_ed_dsa::POLY_PARTY_ED_DSA_LENGTH;

use poly_claim_u32_collection_2::PolyClaimU32_Collection_2;
use poly_claim_u32_collection_2::POLY_CLAIM_U32_COLLECTION_2_LENGTH;

use setting_u32_collection_3::SettingU32_Collection_3;
use setting_u32_collection_3::SETTING_U32_COLLECTION_3_LENGTH;

use unique_identifier::UniqueIdentifier;
use unique_identifier::UNIQUE_IDENTIFIER_LENGTH;

use nullable_state_ref::NullableStateRef;
use nullable_state_ref::NULLABLE_STATE_REF_LENGTH;

use platform_consts::U32_BYTES;

const MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_NETWORK_LENGTH: u16 = NETWORK_POLY_PARTY_ED_DSA_LENGTH;
const MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_HOLDER_LENGTH: u16 = POLY_PARTY_ED_DSA_LENGTH;
const MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_IDENTITY_LENGTH: u16 = POLY_CLAIM_U32_COLLECTION_2_LENGTH;
const MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_SETTINGS_LENGTH: u16 = SETTING_U32_COLLECTION_3_LENGTH;
const MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_LINEAR_ID_LENGTH: u16 = UNIQUE_IDENTIFIER_LENGTH;
const MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_PREVIOUS_STATE_REF_LENGTH: u16 = NULLABLE_STATE_REF_LENGTH;

const MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_NETWORK_OFFSET: u16 = 0;
const MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_HOLDER_OFFSET: u16
    = MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_NETWORK_OFFSET
    + MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_NETWORK_LENGTH;
const MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_IDENTITY_OFFSET: u16
    = MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_HOLDER_OFFSET
    + MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_HOLDER_LENGTH;
const MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_SETTINGS_OFFSET: u16
    = MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_IDENTITY_OFFSET
    + MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_IDENTITY_LENGTH;
const MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_LINEAR_ID_OFFSET: u16
    = MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_SETTINGS_OFFSET
    + MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_SETTINGS_LENGTH;
const MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_PREVIOUS_STATE_REF_OFFSET: u16
    = MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_LINEAR_ID_OFFSET
    + MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_LINEAR_ID_LENGTH;
const MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2SETTING_U32_COLLECTION_3_LENGTH: u16
    = MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_PREVIOUS_STATE_REF_OFFSET
    + MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_PREVIOUS_STATE_REF_LENGTH;


type SerializedMembershipNetworkPolyPartyEdDSAPolyPartyEdDSAPolyClaimU32_Collection_2SettingU32_Collection_3 = [u8; MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2SETTING_U32_COLLECTION_3_LENGTH];

struct MembershipNetworkPolyPartyEdDSAPolyPartyEdDSAPolyClaimU32_Collection_2SettingU32_Collection_3 {
    network: NetworkPolyPartyEdDSA,
    holder: PolyPartyEdDSA,
    identity: PolyClaimU32_Collection_2,
    settings: SettingU32_Collection_3,
    linear_id: UniqueIdentifier,
    previous_state_ref: NullableStateRef,
}

impl MembershipNetworkPolyPartyEdDSAPolyPartyEdDSAPolyClaimU32_Collection_2SettingU32_Collection_3 {
    fn print_structure() {
        dbg!("Size of MembershipNetworkPolyPartyEdDSAPolyPartyEdDSAPolyClaimU32_Collection_2SettingU32_Collection_3");
        dbg!("- LENGTH: {}", MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2SETTING_U32_COLLECTION_3_LENGTH);
        dbg!("Structure of MembershipNetworkPolyPartyEdDSAPolyPartyEdDSAPolyClaimU32_Collection_2SettingU32_Collection_3");
        dbg!("- NETWORK:            {}", MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_NETWORK_LENGTH);
        dbg!("- HOLDER:             {}", MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_HOLDER_LENGTH);
        dbg!("- IDENTITY:           {}", MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_IDENTITY_LENGTH);
        dbg!("- SETTINGS:           {}", MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_SETTINGS_LENGTH);
        dbg!("- LINEAR_ID:          {}", MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_LINEAR_ID_LENGTH);
        dbg!("- PREVIOUS_STATE_REF: {}", MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_PREVIOUS_STATE_REF_LENGTH);
        dbg!("");
    }

    fn equals(this: MembershipNetworkPolyPartyEdDSAPolyPartyEdDSAPolyClaimU32_Collection_2SettingU32_Collection_3, that: MembershipNetworkPolyPartyEdDSAPolyPartyEdDSAPolyClaimU32_Collection_2SettingU32_Collection_3) -> bool {
        NetworkPolyPartyEdDSA::equals(this.network, that.network)
            && PolyPartyEdDSA::equals(this.holder, that.holder)
            && PolyClaimU32_Collection_2::set_equals(this.identity, that.identity)
            && SettingU32_Collection_3::set_equals(this.settings, that.settings)
            && UniqueIdentifier::equals(this.linear_id, that.linear_id)
            && NullableStateRef::equals(this.previous_state_ref, that.previous_state_ref)
    }

    fn deserialize(serialized: SerializedMembershipNetworkPolyPartyEdDSAPolyPartyEdDSAPolyClaimU32_Collection_2SettingU32_Collection_3) -> MembershipNetworkPolyPartyEdDSAPolyPartyEdDSAPolyClaimU32_Collection_2SettingU32_Collection_3 {
        let membership_network = {
            let mut network_bytes = [0; MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_NETWORK_LENGTH];
            for i in 0..MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_NETWORK_LENGTH {
                network_bytes[i] = serialized[i + MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_NETWORK_OFFSET];
            }
            NetworkPolyPartyEdDSA::deserialize(network_bytes)
        };

        let holder = {
            let mut holder_bytes = [0; MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_HOLDER_LENGTH];
            for i in 0..MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_HOLDER_LENGTH {
                holder_bytes[i] = serialized[i + MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_HOLDER_OFFSET];
            }
            PolyPartyEdDSA::deserialize(holder_bytes)
        };

        let identity = {
            let mut identity_bytes = [0; MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_IDENTITY_LENGTH];
            for i in 0..MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_IDENTITY_LENGTH {
                identity_bytes[i] = serialized[i + MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_IDENTITY_OFFSET];
            }
            PolyClaimU32_Collection_2::deserialize(identity_bytes)
        };

        let settings = {
            let mut settings_bytes = [0; MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_SETTINGS_LENGTH];
            for i in 0..MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_SETTINGS_LENGTH {
                settings_bytes[i] = serialized[i + MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_SETTINGS_OFFSET];
            }
            SettingU32_Collection_3::deserialize(settings_bytes)
        };

        let linear_id = {
            let mut linear_id_bytes = [0; MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_LINEAR_ID_LENGTH];
            for i in 0..MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_LINEAR_ID_LENGTH {
                linear_id_bytes[i] = serialized[i + MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_LINEAR_ID_OFFSET];
            }
            UniqueIdentifier::deserialize(linear_id_bytes)
        };

        let previous_state_ref = {
            let mut previous_state_ref_bytes = [0; MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_PREVIOUS_STATE_REF_LENGTH];
            for i in 0..MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_PREVIOUS_STATE_REF_LENGTH {
                previous_state_ref_bytes[i] = serialized[i + MEMBERSHIP_NETWORK_POLY_PARTY_ED_DSA_POLY_PARTY_ED_DSA_POLY_CLAIM_U32_COLLECTION_2_SETTING_U32_COLLECTION_3_PREVIOUS_STATE_REF_OFFSET];
            }
            NullableStateRef::deserialize(previous_state_ref_bytes)
        };

        MembershipNetworkPolyPartyEdDSAPolyPartyEdDSAPolyClaimU32_Collection_2SettingU32_Collection_3 {
            network: membership_network,
            holder: holder,
            identity: identity,
            settings: settings,
            linear_id: linear_id,
            previous_state_ref: previous_state_ref,
        }
    }
}
