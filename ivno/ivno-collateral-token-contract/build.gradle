import com.ing.zknotary.gradle.zinc.template.parameters.AbstractPartyTemplateParameters
import com.ing.zknotary.gradle.zinc.template.parameters.BigDecimalTemplateParameters
import com.ing.zknotary.gradle.zinc.template.parameters.CollectionTemplateParameters
import com.ing.zknotary.gradle.zinc.template.parameters.MapTemplateParameters
import com.ing.zknotary.gradle.zinc.template.parameters.NullableTemplateParameters
import com.ing.zknotary.gradle.zinc.template.parameters.PolyTemplateParameters
import com.ing.zknotary.gradle.zinc.template.parameters.PublicKeyTemplateParameters
import com.ing.zknotary.gradle.zinc.template.parameters.SecureHashTemplateParameters
import com.ing.zknotary.gradle.zinc.template.parameters.StringTemplateParameters
import com.ing.zknotary.gradle.zinc.template.parameters.UniqueIdentifierTemplateParameters

plugins {
    id 'com.ing.zknotary.gradle-plugin'
}

cordapp {
    signing {
        enabled = cordapp_signing_enabled
    }
    targetPlatformVersion cordapp_platform_version
    minimumPlatformVersion cordapp_platform_version
    contract {
        name "Ivno Tokens Contract"
        vendor "Ivno Ltd"
        licence "Ivno Tokens Contract Copyright Â© 2021 Ivno Limited. All rights reserved.  The information herein is, and remains, the property of Ivno Limited [and its suppliers (if any)]. No use may be made of this software without a valid licence from Ivno Limited. Please contact legal@ivno.io for more information."
        versionId 1
    }
}

// The numeric values refer to the lengths used by the serializable surrogates, e.g. RoleSurrogate.VALUE_LENGTH
// If any of these lengths are changed in the respective Kotlin files, the relevant values shall be also updated here!!!
zkp {
     addConfigurations([
            new BigDecimalTemplateParameters(20, 4),
            new NullableTemplateParameters(
                    "nullable.zn",
                    new PolyTemplateParameters(
                            new AbstractPartyTemplateParameters(
                                    "Party",
                                    PublicKeyTemplateParameters.Companion.newInstance().eddsaTemplateParameters
                            )
                    ),
                    null
            ),
            new NullableTemplateParameters(
                    "nullable.zn",
                    new StringTemplateParameters(20),
                    null
            ),
            new NullableTemplateParameters(
                    "nullable.zn",
                    null,
                    "platform_state_ref"
            ),
            new NullableTemplateParameters(
                    "nullable.zn",
                    UniqueIdentifierTemplateParameters.INSTANCE,
                    null
            ),
            new NullableTemplateParameters(
                    "nullable.zn",
                    SecureHashTemplateParameters.INSTANCE,
                    null
            ),
            new CollectionTemplateParameters(
                    "collection.zn",
                    2,
                    new PolyTemplateParameters(
                            new AbstractPartyTemplateParameters("Party", PublicKeyTemplateParameters.Companion.newInstance().eddsaTemplateParameters)
                    ),
                    null
            ),
            new CollectionTemplateParameters(
                     2,
                     new PolyTemplateParameters(
                             new AbstractPartyTemplateParameters(
                                     "AnonymousParty",
                                     PublicKeyTemplateParameters.Companion.newInstance().eddsaTemplateParameters
                             )
                     )
             ),
             new MapTemplateParameters(
                     "AttestationMetadataMap",
                     5,
                     new StringTemplateParameters(32),
                     new StringTemplateParameters(128)
             )
    ])

    addConfigurations([7, 20, 32].collect { new StringTemplateParameters(it.shortValue()) })
}

dependencies {
    // Kotlin Dependencies
    implementation "$kotlin_group:kotlin-stdlib-jdk8:$kotlin_version"

    // Corda Development Dependencies
    cordaCompile "$corda_core_release_distribution:corda-core:$corda_core_release_version"
    cordaCompile "$corda_core_release_distribution:corda-core-test-utils:$corda_core_release_version"
    cordaCompile "$onixlabs_group:onixlabs-corda-core-contract:$onixlabs_corda_core_release_version"
    cordaCompile "$onixlabs_group:onixlabs-corda-identity-framework-contract:$onixlabs_corda_idfx_release_version"
    cordaCompile "$onixlabs_group:onixlabs-corda-bnms-contract:$onixlabs_corda_bnms_release_version"

    // DASL Dependencies
    cordapp "$dasl_release_group:dasl-contracts:$dasl_version"
    cordapp "$dasl_release_group:dasl-workflows:$dasl_version"

    // Test Dependencies
    testRuntimeOnly "$junit_group:junit-jupiter-engine:$junit_version"
    testImplementation "$junit_group:junit-jupiter-api:$junit_version"
    testImplementation "$junit_group:junit-jupiter-params:$junit_version"
    testImplementation "$kotlin_group:kotlin-test:$kotlin_version"
    testImplementation "$corda_group:corda-node-driver:$corda_release_version"

    // ZKFlow Test dependencies
    testImplementation "com.ing.zknotary:test-utils"
    testImplementation("io.kotest:kotest-assertions-core:4.3.1")

    // kotlinx dependencies
    testImplementation "$kotlinx_group:kotlinx-serialization-core:$kotlinx_version"
    testImplementation "$kotlinx_group:kotlinx-serialization-json:$kotlinx_version"

}

test {
    jvmArgs = ["-ea", "-javaagent:../lib/quasar.jar"]
    maxHeapSize = "1024m"
//        forkEvery = 15
    //failFast = true // this causes the tests to fail on the first failure - useful for cci debugging
    useJUnitPlatform()
}
